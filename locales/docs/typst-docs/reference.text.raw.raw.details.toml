
[[main]]
en = """Raw text with optional syntax highlighting."""

[[main]]
en = """Displays the text verbatim and in a monospace font. This is typically used
to embed computer code into your document."""

[[main]]
en = """# Example
````example
Adding `rbx` to `rcx` gives
the desired result."""

[[main]]
en = """What is"""

[[main]]
en = """```rust fn main()```"""

[[main]]
en = """in Rust
would be"""

[[main]]
en = """```c int main()```"""

[[main]]
en = """in C."""

[[main]]
en = """```rust
fn main() {
    println!("Hello World!");
}
```"""

[[main]]
en = """This has"""

[[main]]
en = """``` `backticks` ```"""

[[main]]
en = """in it
(but the spaces are trimmed). And"""

[[main]]
en = """``` here```"""

[[main]]
en = """the leading space is
also trimmed.
````"""

[[main]]
en = """You can also construct a [`raw`] element programmatically from a string (and
provide the language tag via the optional [`lang`]($raw.lang) argument)."""

[[main]]
en = """```example
#raw("fn " + "main() {}", lang: "rust")
```"""

[[main]]
en = """# Syntax
This function also has dedicated syntax. You can enclose text in 1 or 3+
backticks (`` ` ``) to make it raw. Two backticks produce empty raw text.
This works both in markup and code."""

[[main]]
en = """When you use three or more backticks, you can additionally specify a
language tag for syntax highlighting directly after the opening backticks.
Within raw blocks, everything (except for the language tag, if applicable)
is rendered as is, in particular, there are no escape sequences."""

[[main]]
en = """The language tag is an identifier that directly follows the opening
backticks only if there are three or more backticks. If your text starts
with something that looks like an identifier, but no syntax highlighting is
needed, start the text with a single space (which will be trimmed) or use
the single backtick syntax. If your text should start or end with a
backtick, put a space before or after it (it will be trimmed)."""
