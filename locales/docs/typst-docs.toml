
# The translations are partially generated by copilot

[Export.part]
en = "Export"

[Language.part]
en = "Language"

[Library.part]
en = "Library"

[guides.body]
en = "\n# Guides\nWelcome to the Guides section! Here, you'll find helpful material for specific\nuser groups or use cases. Currently, two guides are available: An introduction\nto Typst for LaTeX users, and a detailed look at page setup. Feel free to\npropose other topics for guides!\n\n## List of Guides\n- [Guide for LaTeX users]($guides/guide-for-latex-users)\n- [Page setup guide]($guides/page-setup-guide)\n- [Table guide]($guides/table-guide)"

[guides.description]
en = "Guides for Typst."

[guides.guide-for-latex-users.body]
en = "\n# Guide for LaTeX users { # }\nThis page is a good starting point if you have used LaTeX before and want to try\nout Typst. We will explore the main differences between these two systems from a\nuser perspective. Although Typst is not built upon LaTeX and has a different\nsyntax, you will learn how to use your LaTeX skills to get a head start.\n\nJust like LaTeX, Typst is a markup-based typesetting system: You compose your\ndocument in a text file and mark it up with commands and other syntax. Then, you\nuse a compiler to typeset the source file into a PDF. However, Typst also\ndiffers from LaTeX in several aspects: For one, Typst uses more dedicated syntax\n(like you may know from Markdown) for common tasks. Typst's commands are also\nmore principled: They all work the same, so unlike in LaTeX, you just need to\nunderstand a few general concepts instead of learning different conventions for\neach package. Moreover Typst compiles faster than LaTeX: Compilation usually\ntakes milliseconds, not seconds, so the web app and the compiler can both\nprovide instant previews.\n\nIn the following, we will cover some of the most common questions a user\nswitching from LaTeX will have when composing a document in Typst. If you prefer\na step-by-step introduction to Typst, check out our [tutorial].\n\n## Installation\nYou have two ways to use Typst: In [our web app](https://typst.app/signup/) or\nby [installing the compiler](https://github.com/typst/typst/releases) on your\ncomputer. When you use the web app, we provide a batteries-included\ncollaborative editor and run Typst in your browser, no installation required.\n\nIf you choose to use Typst on your computer instead, you can download the\ncompiler as a single, small binary which any user can run, no root privileges\nrequired. Unlike LaTeX, packages are downloaded  when you first use them and\nthen cached locally, keeping your Typst installation lean. You can use your own\neditor and decide where to store your files with the local compiler.\n\n## How do I create a new, empty document? { #getting-started }\nThat's easy. You just create a new, empty text file (the file extension is\n`.typ`). No boilerplate is needed to get started. Simply start by writing your\ntext. It will be set on an empty A4-sized page. If you are using the web app,\nclick \"+ Empty document\" to create a new project with a file and enter the\neditor. [Paragraph breaks]($parbreak) work just as they do in LaTeX, just use a\nblank line.\n\n```example\nHey there!\n\nHere are two paragraphs. The\noutput is shown to the right.\n```\n\nIf you want to start from an preexisting LaTeX document instead, you can use\n[Pandoc](https://pandoc.org) to convert your source code to Typst markup. This\nconversion is also built into our web app, so you can upload your `.tex` file to\nstart your project in Typst.\n\n## How do I create section headings, emphasis, ...? { #elements }\nLaTeX uses the command `\\section` to create a section heading. Nested headings\nare indicated with `\\subsection`, `\\subsubsection`, etc. Depending on your\ndocument class, there is also `\\part` or `\\chapter`.\n\nIn Typst, [headings]($heading) are less verbose: You prefix the line with the\nheading on it with an equals sign and a space to get a first-order heading:\n`[= Introduction]`. If you need a second-order heading, you use two equals\nsigns: `[== In this paper]`. You can nest headings as deeply as you'd like by\nadding more equals signs.\n\nEmphasis (usually rendered as italic text) is expressed by enclosing text in\n`[_underscores_]` and strong emphasis (usually rendered in boldface) by using\n`[*stars*]` instead.\n\nHere is a list of common markup commands used in LaTeX and their Typst\nequivalents. You can also check out the [full syntax cheat sheet]($syntax).\n\n| Element          | LaTeX                     | Typst                  | See        |\n|:-----------------|:--------------------------|:-----------------------|:-----------|\n| Strong emphasis  | `\\textbf{strong}`         | `[*strong*]`           | [`strong`] |\n| Emphasis         | `\\emph{emphasis}`         | `[_emphasis_]`         | [`emph`]   |\n| Monospace / code | `\\texttt{print(1)}`       | ``[`print(1)`]``       | [`raw`]    |\n| Link             | `\\url{https://typst.app}` | `[https://typst.app/]` | [`link`]   |\n| Label            | `\\label{intro}`           | `[<intro>]`            | [`label`]  |\n| Reference        | `\\ref{intro}`             | `[@intro]`             | [`ref`]    |\n| Citation         | `\\cite{humphrey97}`       | `[@humphrey97]`        | [`cite`]   |\n| Bullet list      | `itemize` environment     | `[- List]`             | [`list`]   |\n| Numbered list    | `enumerate` environment   | `[+ List]`             | [`enum`]   |\n| Term list        | `description` environment | `[/ Term: List]`       | [`terms`]  |\n| Figure           | `figure` environment      | `figure` function      | [`figure`] |\n| Table            | `table` environment       | `table` function       | [`table`]  |\n| Equation         | `$x$`, `align` / `equation` environments | `[$x$]`, `[$ x = y $]` | [`equation`]($math.equation) |\n\n[Lists]($list) do not rely on environments in Typst. Instead, they have\nlightweight syntax like headings. To create an unordered list (`itemize`),\nprefix each line of an item with a hyphen:\n\n````example\nTo write this list in Typst...\n\n```latex\n\\begin{itemize}\n  \\item Fast\n  \\item Flexible\n  \\item Intuitive\n\\end{itemize}\n```\n\n...just type this:\n\n- Fast\n- Flexible\n- Intuitive\n\n````\n\nNesting lists works just by using proper indentation. Adding a blank line in\nbetween items results in a more [widely]($list.tight) spaced list.\n\nTo get a [numbered list]($enum) (`enumerate`) instead, use a `+` instead of the\nhyphen. For a [term list]($terms) (`description`), write `[/ Term: Description]`\ninstead.\n\n## How do I use a command? { #commands }\nLaTeX heavily relies on commands (prefixed by backslashes). It uses these\n_macros_ to affect the typesetting process and to insert and manipulate content.\nSome commands accept arguments, which are most frequently enclosed in curly\nbraces: `\\cite{rasmus}`.\n\nTypst differentiates between [markup mode and code mode]($scripting/#blocks).\nThe default is markup mode, where you compose text and apply syntactic\nconstructs such as `[*stars for bold text*]`. Code mode, on the other hand,\nparallels programming languages like Python, providing the option to input and\nexecute segments of code.\n\nWithin Typst's markup, you can switch to code mode for a single command (or\nrather, _expression_) using a hash (`#`). This is how you call functions to, for\nexample, split your project into different [files]($scripting/#modules) or\nrender text based on some [condition]($scripting/#conditionals). Within code\nmode, it is possible to include normal markup [_content_]($content) by using\nsquare brackets. Within code mode, this content is treated just as any other\nnormal value for a variable.\n\n```example\nFirst, a rectangle:\n#rect()\n\nLet me show how to do\n#underline([_underlined_ text])\n\nWe can also do some maths:\n#calc.max(3, 2 * 4)\n\nAnd finally a little loop:\n#for x in range(3) [\n  Hi #x.\n]\n```\n\nA function call always involves the name of the function ([`rect`],\n[`underline`], [`calc.max`]($calc.max), [`range`]($array.range)) followed by\nparentheses (as opposed to LaTeX where the square brackets and curly braces are\noptional if the macro requires no arguments). The expected list of arguments\npassed within those parentheses depends on the concrete function and is\nspecified in the [reference].\n\n### Arguments\nA function can have multiple arguments. Some arguments are positional, i.e., you\njust provide the value: The function `[#lower(\"SCREAM\")]` returns its argument\nin all-lowercase. Many functions use named arguments instead of positional\narguments to increase legibility. For example, the dimensions and stroke of a\nrectangle are defined with named arguments:\n\n```example\n#rect(\n  width: 2cm,\n  height: 1cm,\n  stroke: red,\n)\n```\n\nYou specify a named argument by first entering its name (above, it's `width`,\n`height`, and `stroke`), then a colon, followed by the value (`2cm`, `1cm`,\n`red`). You can find the available named arguments in the [reference\npage]($reference) for each function or in the autocomplete panel when typing.\nNamed arguments are similar to how some LaTeX environments are configured, for\nexample, you would type `\\begin{enumerate}[label={\\alph*)}]` to start a list\nwith the labels `a)`, `b)`, and so on.\n\nOften, you want to provide some [content] to a function. For example, the LaTeX\ncommand `\\underline{Alternative A}` would translate to\n`[#underline([Alternative A])]` in Typst. The square brackets indicate that a\nvalue is [content]. Within these brackets, you can use normal markup.\nHowever, that's a lot of parentheses for a pretty simple construct. This is why\nyou can also move trailing content arguments after the parentheses (and omit the\nparentheses if they would end up empty).\n\n```example\nTypst is an #underline[alternative]\nto LaTeX.\n\n#rect(fill: aqua)[Get started here!]\n```\n\n### Data types\nYou likely already noticed that the arguments have distinctive data types. Typst\nsupports many [data types]($type). Below, there is a table with some of the most\nimportant ones and how to write them. In order to specify values of any of these\ntypes, you have to be in code mode!\n\n| Data type                       | Example                           |\n|:--------------------------------|:----------------------------------|\n| [Content]($content)             | `{[*fast* typesetting]}`          |\n| [String]($str)                  | `{\"Pietro S. Author\"}`            |\n| [Integer]($int)                 | `{23}`                            |\n| [Floating point number]($float) | `{1.459}`                         |\n| [Absolute length]($length)      | `{12pt}`, `{5in}`, `{0.3cm}`, ... |\n| [Relative length]($ratio)       | `{65%}`                           |\n\nThe difference between content and string is that content can contain markup,\nincluding function calls, while a string really is just a plain sequence of\ncharacters.\n\nTypst provides [control flow constructs]($scripting/#conditionals) and\n[operators]($scripting/#operators) such as `+` for adding things or `==` for\nchecking equality between two variables.\n\nYou can also store values, including functions, in your own\n[variables]($scripting/#bindings). This can be useful to perform computations on\nthem, create reusable automations, or reference a value multiple times. The\nvariable binding is accomplished with the let keyword, which works similar to\n`\\newcommand`:\n\n```example\n// Store the integer `5`.\n#let five = 5\n\n// Define a function that\n// increments a value.\n#let inc(i) = i + 1\n\n// Reference the variables.\nI have #five fingers.\n\nIf I had one more, I'd have\n#inc(five) fingers. Whoa!\n```\n\n### Commands to affect the remaining document { #rules }\nIn LaTeX, some commands like `\\textbf{bold text}` receive an argument in curly\nbraces and only affect that argument. Other commands such as `\\bfseries bold\ntext` act as switches (LaTeX calls this a declaration), altering the appearance\nof all subsequent content within the document or current scope.\n\nIn Typst, the same function can be used both to affect the appearance for the\nremainder of the document, a block (or scope), or just its arguments. For\nexample, `[#text(weight: \"bold\")[bold text]]` will only embolden its argument,\nwhile `[#set text(weight: \"bold\")]` will embolden any text until the end of the\ncurrent block, or, if there is none, document. The effects of a function are\nimmediately obvious based on whether it is used in a call or a\n[set rule.]($styling/#set-rules)\n\n```example\nI am starting out with small text.\n\n#set text(14pt)\n\nThis is a bit #text(18pt)[larger,]\ndon't you think?\n```\n\nSet rules may appear anywhere in the document. They can be thought of as\ndefault argument values of their respective function:\n\n```example\n#set enum(numbering: \"I.\")\n\nGood results can only be obtained by\n+ following best practices\n+ being aware of current results\n  of other researchers\n+ checking the data for biases\n```\n\nThe `+` is syntactic sugar (think of it as an abbreviation) for a call to the\n[`{enum}`]($enum) function, to which we apply a set rule above.\n[Most syntax is linked to a function in this way.]($syntax) If you need to style\nan element beyond what its arguments enable, you can completely redefine its\nappearance with a [show rule]($styling/#show-rules) (somewhat comparable to\n`\\renewcommand`).\n\nYou can achieve the effects of LaTeX commands like `\\textbf`, `\\textsf`,\n`\\rmfamily`, `\\mdseries`, and `\\itshape` with the [`font`]($text.font),\n[`style`]($text.style), and [`weight`]($text.weight) arguments of the `text`\nfunction. The text function can be used in a set rule (declaration style) or\nwith a content argument. To replace `\\textsc`, you can use the [`smallcaps`]\nfunction, which renders its content argument as smallcaps. Should you want to\nuse it declaration style (like `\\scshape`), you can use an\n[_everything_ show rule]($styling/#show-rules) that applies the function to the\nrest of the scope:\n\n```example\n#show: smallcaps\n\nBoisterous Accusations\n```\n\n## How do I load a document class? { #templates }\nIn LaTeX, you start your main `.tex` file with the `\\documentclass{article}`\ncommand to define how your document is supposed to look. In that command, you\nmay have replaced `article` with another value such as `report` and `amsart` to\nselect a different look.\n\nWhen using Typst, you style your documents with [functions]($function).\nTypically, you use a template that provides a function that styles your whole\ndocument. First, you import the function from a template file. Then, you apply\nit to your whole document. This is accomplished with a\n[show rule]($styling/#show-rules) that wraps the following document in a given\nfunction. The following example illustrates how it works:\n\n```example:single\n>>> #let conf(\n>>>   title: none,\n>>>   authors: (),\n>>>   abstract: [],\n>>>   doc,\n>>> ) = {\n>>>   set text(font: \"Libertinus Serif\", 11pt)\n>>>   set par(justify: true)\n>>>   set page(\n>>>     \"us-letter\",\n>>>     margin: auto,\n>>>     header: align(\n>>>       right + horizon,\n>>>       title\n>>>     ),\n>>>     numbering: \"1\",\n>>>     columns: 2\n>>>   )\n>>>\n>>>   show heading.where(\n>>>     level: 1\n>>>   ): it => block(\n>>>     align(center,\n>>>       text(\n>>>         13pt,\n>>>         weight: \"regular\",\n>>>         smallcaps(it.body),\n>>>       )\n>>>     ),\n>>>   )\n>>>   show heading.where(\n>>>     level: 2\n>>>   ): it => box(\n>>>     text(\n>>>       11pt,\n>>>       weight: \"regular\",\n>>>       style: \"italic\",\n>>>       it.body + [.],\n>>>     )\n>>>   )\n>>>\n>>>   place(top, float: true, scope: \"parent\", {\n>>>     set align(center)\n>>>     text(17pt, title)\n>>>\n>>>     let count = calc.min(authors.len(), 3)\n>>>     grid(\n>>>       columns: (1fr,) * count,\n>>>       row-gutter: 24pt,\n>>>       ..authors.map(author => [\n>>>         #author.name \\\n>>>         #author.affiliation \\\n>>>         #link(\"mailto:\" + author.email)\n>>>       ]),\n>>>     )\n>>>\n>>>     par(justify: false)[\n>>>       *Abstract* \\\n>>>       #abstract\n>>>     ]\n>>>   })\n>>>\n>>>   set align(left)\n>>>   doc\n>>> }\n<<< #import \"conf.typ\": conf\n#show: conf.with(\n  title: [\n    Towards Improved Modelling\n  ],\n  authors: (\n    (\n      name: \"Theresa Tungsten\",\n      affiliation: \"Artos Institute\",\n      email: \"tung@artos.edu\",\n    ),\n    (\n      name: \"Eugene Deklan\",\n      affiliation: \"Honduras State\",\n      email: \"e.deklan@hstate.hn\",\n    ),\n  ),\n  abstract: lorem(80),\n)\n\nLet's get started writing this\narticle by putting insightful\nparagraphs right here!\n>>> #lorem(500)\n```\n\nThe [`{import}`]($scripting/#modules) statement makes [functions]($function)\n(and other definitions) from another file available. In this example, it imports\nthe `conf` function from the `conf.typ` file. This function formats a document\nas a conference article. We use a show rule to apply it to the document and also\nconfigure some metadata of the article. After applying the show rule, we can\nstart writing our article right away!\n\nYou can also use templates from Typst Universe (which is Typst's equivalent of\nCTAN) using an import statement like this: `[#import\n\"@preview/elsearticle:0.2.1\": elsearticle]`. Check the documentation of an\nindividual template to learn the name of its template function. Templates and\npackages from Typst Universe are automatically downloaded when you first use\nthem.\n\nIn the web app, you can choose to create a project from a template on Typst\nUniverse or even create your own using the template wizard. Locally, you can use\nthe `typst init` CLI to create a new project from a template. Check out [the\nlist of templates]($universe/search/?kind=templates) published on Typst\nUniverse. You can also take a look at the [`awesome-typst`\nrepository](https://github.com/qjcg/awesome-typst) to find community templates\nthat aren't available through Universe.\n\nYou can also [create your own, custom templates.]($tutorial/making-a-template)\nThey are shorter and more readable than the corresponding LaTeX `.sty` files by\norders of magnitude, so give it a try!\n\n<div class=\"info-box\">\n\nFunctions are Typst's \"commands\" and can transform their arguments to an output\nvalue, including document _content._ Functions are \"pure\", which means that they\ncannot have any effects beyond creating an output value / output content. This\nis in stark contrast to LaTeX macros that can have arbitrary effects on your\ndocument.\n\nTo let a function style your whole document, the show rule processes everything\nthat comes after it and calls the function specified after the colon with the\nresult as an argument. The `.with` part is a _method_ that takes the `conf`\nfunction and pre-configures some if its arguments before passing it on to the\nshow rule.\n</div>\n\n## How do I load packages? { #packages }\nTypst is \"batteries included,\" so the equivalent of many popular LaTeX packages\nis built right-in. Below, we compiled a table with frequently loaded packages\nand their corresponding Typst functions.\n\n| LaTeX Package                   | Typst Alternative                          |\n|:--------------------------------|:-------------------------------------------|\n| graphicx, svg                   | [`image`] function                         |\n| tabularx                        | [`table`], [`grid`] functions              |\n| fontenc, inputenc, unicode-math | Just start writing!                        |\n| babel, polyglossia              | [`text`]($text.lang) function: `[#set text(lang: \"zh\")]` |\n| amsmath                         | [Math mode]($category/math)                |\n| amsfonts, amssymb               | [`sym`]($category/symbols) module and [syntax]($syntax/#math) |\n| geometry, fancyhdr              | [`page`] function                          |\n| xcolor                          | [`text`]($text.fill) function: `[#set text(fill: rgb(\"#0178A4\"))]` |\n| hyperref                        | [`link`] function                          |\n| bibtex, biblatex, natbib        | [`cite`], [`bibliography`] functions       |\n| lstlisting, minted              | [`raw`] function and syntax                |\n| parskip                         | [`block`]($block.spacing) and [`par`]($par.first-line-indent) functions |\n| csquotes                        | Set the [`text`]($text.lang) language and type `[\"]` or `[']` |\n| caption                         | [`figure`] function                        |\n| enumitem                        | [`list`], [`enum`], [`terms`] functions    |\n\nAlthough _many_ things are built-in, not everything can be. That's why Typst has\nits own [package ecosystem]($universe) where the community share its creations\nand automations. Let's take, for instance, the _cetz_ package: This package\nallows you to create complex drawings and plots. To use cetz in your document,\nyou can just write:\n\n```typ\n#import \"@preview/cetz:0.2.1\"\n```\n\n(The `@preview` is a _namespace_ that is used while the package manager is still\nin its early and experimental state. It will be replaced in the future.)\n\nAside from the official package hub, you might also want to check out the\n[awesome-typst repository](https://github.com/qjcg/awesome-typst), which\ncompiles a curated list of resources created for Typst.\n\nIf you need to load functions and variables from another file within your\nproject, for example to use a template, you can use the same\n[`import`]($scripting/#modules) statement with a file name rather than a\npackage specification. To instead include the textual content of another file,\nyou can use an [`include`]($scripting/#modules) statement. It will retrieve\nthe content of the specified file and put it in your document.\n\n## How do I input maths? { #maths }\nTo enter math mode in Typst, just enclose your equation in dollar signs. You can\nenter display mode by adding spaces or newlines between the equation's contents\nand its enclosing dollar signs.\n\n```example\nThe sum of the numbers from\n$1$ to $n$ is:\n\n$ sum_(k=1)^n k = (n(n+1))/2 $\n```\n\n[Math mode]($category/math) works differently than regular markup or code mode.\nNumbers and single characters are displayed verbatim, while multiple consecutive\n(non-number) characters will be interpreted as Typst variables.\n\nTypst pre-defines a lot of useful variables in math mode. All Greek (`alpha`,\n`beta`, ...) and some Hebrew letters (`alef`, `bet`, ...) are available through\ntheir name. Some symbols are additionally available through shorthands, such as\n`<=`, `>=`, and `->`.\n\nRefer to the [symbol pages]($reference/symbols) for a full list of the symbols.\nIf a symbol is missing, you can also access it through a\n[Unicode escape sequence]($syntax/#escapes).\n\nAlternate and related forms of symbols can often be selected by\n[appending a modifier]($symbol) after a period. For example,\n`arrow.l.squiggly` inserts a squiggly left-pointing arrow. If you want to insert\nmultiletter text in your expression instead, enclose it in double quotes:\n\n```example\n$ delta \"if\" x <= 5 $\n```\n\nIn Typst, delimiters will scale automatically for their expressions, just as if\n`\\left` and `\\right` commands were implicitly inserted in LaTeX. You can\ncustomize delimiter behaviour using the [`lr` function]($math.lr). To\nprevent a pair of delimiters from scaling, you can escape them with backslashes.\n\nTypst will automatically set terms around a slash `/` as a fraction while\nhonoring operator precedence. All round parentheses not made redundant by the\nfraction will appear in the output.\n\n```example\n$ f(x) = (x + 1) / x $\n```\n\n[Sub- and superscripts]($math.attach) work similarly in Typst and LaTeX.\n`{$x^2$}` will produce a superscript, `{$x_2$}` yields a subscript. If you want\nto include more than one value in a sub- or superscript, enclose their contents\nin parentheses: `{$x_(a -> epsilon)$}`.\n\nSince variables in math mode do not need to be prepended with a `#` or a `/`,\nyou can also call functions without these special characters:\n\n```example\n$ f(x, y) := cases(\n  1 \"if\" (x dot y)/2 <= 0,\n  2 \"if\" x \"is even\",\n  3 \"if\" x in NN,\n  4 \"else\",\n) $\n```\n\nThe above example uses the [`cases` function]($math.cases) to describe f. Within\nthe cases function, arguments are delimited using commas and the arguments are\nalso interpreted as math. If you need to interpret arguments as Typst\nvalues instead, prefix them with a `#`:\n\n```example\n$ (a + b)^2\n  = a^2\n  + text(fill: #maroon, 2 a b)\n  + b^2 $\n```\n\nYou can use all Typst functions within math mode and insert any content. If you\nwant them to work normally, with code mode in the argument list, you can prefix\ntheir call with a `#`. Nobody can stop you from using rectangles or emoji as\nyour variables anymore:\n\n```example\n$ sum^10_(🥸=1)\n  #rect(width: 4mm, height: 2mm)/🥸\n  = 🧠 maltese $\n```\n\nIf you'd like to enter your mathematical symbols directly as Unicode, that is\npossible, too!\n\nMath calls can have two-dimensional argument lists using `;` as a delimiter. The\nmost common use for this is the [`mat` function]($math.mat) that creates\nmatrices:\n\n```example\n$ mat(\n  1, 2, ..., 10;\n  2, 2, ..., 10;\n  dots.v, dots.v, dots.down, dots.v;\n  10, 10, ..., 10;\n) $\n```\n\n## How do I get the \"LaTeX look?\" { #latex-look }\nPapers set in LaTeX have an unmistakeable look. This is mostly due to their\nfont, Computer Modern, justification, narrow line spacing, and wide margins.\n\nThe example below\n- sets wide [margins]($page.margin)\n- enables [justification]($par.justify), [tighter lines]($par.leading) and\n  [first-line-indent]($par.first-line-indent)\n- [sets the font]($text.font) to \"New Computer Modern\", an OpenType derivative of\n  Computer Modern for both text and [code blocks]($raw)\n- disables paragraph [spacing]($block.spacing)\n- increases [spacing]($block.spacing) around [headings]($heading)\n\n```typ\n#set page(margin: 1.75in)\n#set par(leading: 0.55em, spacing: 0.55em, first-line-indent: 1.8em, justify: true)\n#set text(font: \"New Computer Modern\")\n#show raw: set text(font: \"New Computer Modern Mono\")\n#show heading: set block(above: 1.4em, below: 1em)\n```\n\nThis should be a good starting point! If you want to go further, why not create\na reusable template?\n\n## Bibliographies\nTypst includes a fully-featured bibliography system that is compatible with\nBibTeX files. You can continue to use your `.bib` literature libraries by\nloading them with the [`bibliography`] function. Another possibility is to use\n[Typst's YAML-based native format](https://github.com/typst/hayagriva/blob/main/docs/file-format.md).\n\nTypst uses the Citation Style Language to define and process citation and\nbibliography styles. You can compare CSL files to BibLaTeX's `.bbx` files.\nThe compiler already includes [over 80 citation styles]($bibliography.style),\nbut you can use any CSL-compliant style from the\n[CSL repository](https://github.com/citation-style-language/styles) or write\nyour own.\n\nYou can cite an entry in your bibliography or reference a label in your document\nwith the same syntax: `[@key]` (this would reference an entry called `key`).\nAlternatively, you can use the [`cite`] function.\n\nAlternative forms for your citation, such as year only and citations for natural\nuse in prose (cf. `\\citet` and `\\textcite`) are available with\n[`[#cite(<key>, form: \"prose\")]`]($cite.form).\n\nYou can find more information on the documentation page of the [`bibliography`]\nfunction.\n\n## What limitations does Typst currently have compared to LaTeX? { #limitations }\nAlthough Typst can be a LaTeX replacement for many today, there are still\nfeatures that Typst does not (yet) support. Here is a list of them which, where\napplicable, contains possible workarounds.\n\n- **Well-established plotting ecosystem.** LaTeX users often create elaborate\n  charts along with their documents in PGF/TikZ. The Typst ecosystem does not\n  yet offer the same breadth of available options, but the ecosystem around the\n  [`cetz` package](https://typst.app/universe/package/cetz) is catching up\n  quickly.\n\n- **Change page margins without a pagebreak.** In LaTeX, margins can always be\n  adjusted, even without a pagebreak. To change margins in Typst, you use the\n  [`page` function]($page) which will force a page break. If you just want a few\n  paragraphs to stretch into the margins, then reverting to the old margins, you\n  can use the [`pad` function]($pad) with negative padding.\n\n- **Include PDFs as images.** In LaTeX, it has become customary to insert vector\n  graphics as PDF or EPS files. Typst supports neither format as an image\n  format, but you can easily convert both into SVG files with [online\n  tools](https://cloudconvert.com/pdf-to-svg) or\n  [Inkscape](https://inkscape.org/). The web app will automatically convert PDF\n  files to SVG files upon uploading them. You can also use the\n  community-provided [`muchpdf` package](https://typst.app/universe/package/muchpdf)\n  to embed PDFs. It internally converts PDFs to SVGs on-the-fly."

[guides.guide-for-latex-users.description]
en = "Are you a LaTeX user? This guide explains the differences and\nsimilarities between Typst and LaTeX so you can get started quickly.\n"

[guides.guide-for-latex-users.title]
en = "Guide for LaTeX users"

[guides.page-setup-guide.body]
en = "\n# Page setup guide\nYour page setup is a big part of the first impression your document gives. Line\nlengths, margins, and columns influence\n[appearance](https://practicaltypography.com/page-margins.html) and\n[legibility](https://designregression.com/article/line-length-revisited-following-the-research)\nwhile the right headers and footers will help your reader easily navigate your\ndocument. This guide will help you to customize pages, margins, headers,\nfooters, and page numbers so that they are the right fit for your content and\nyou can get started with writing.\n\nIn Typst, each page has a width, a height, and margins on all four sides. The\ntop and bottom margins may contain a header and footer. The set rule of the\n[`{page}`]($page) element is where you control all of the page setup. If you\nmake changes with this set rule, Typst will ensure that there is a new and\nconforming empty page afterward, so it may insert a page break. Therefore, it is\nbest to specify your [`{page}`]($page) set rule at the start of your document or\nin your template.\n\n```example\n#set rect(\n  width: 100%,\n  height: 100%,\n  inset: 4pt,\n)\n>>> #set text(6pt)\n>>> #set page(margin: auto)\n\n#set page(\n  paper: \"iso-b7\",\n  header: rect(fill: aqua)[Header],\n  footer: rect(fill: aqua)[Footer],\n  number-align: center,\n)\n\n#rect(fill: aqua.lighten(40%))\n```\n\nThis example visualizes the dimensions for page content, headers, and footers.\nThe page content is the page size (ISO B7) minus each side's default margin. In\nthe top and the bottom margin, there are stroked rectangles visualizing the\nheader and footer. They do not touch the main content, instead, they are offset\nby 30% of the respective margin. You can control this offset by specifying the\n[`header-ascent`]($page.header-ascent) and\n[`footer-descent`]($page.footer-descent) arguments.\n\nBelow, the guide will go more into detail on how to accomplish common page setup\nrequirements with examples.\n\n## Customize page size and margins { #customize-margins }\nTypst's default page size is A4 paper. Depending on your region and your use\ncase, you will want to change this. You can do this by using the\n[`{page}`]($page) set rule and passing it a string argument to use a common page\nsize. Options include the complete ISO 216 series (e.g. `\"iso-a4\"`, `\"iso-c2\"`),\ncustomary US formats like `\"us-legal\"` or `\"us-letter\"`, and more. Check out the\nreference for the [page's paper argument]($page.paper) to learn about all\navailable options.\n\n```example\n>>> #set page(margin: auto)\n#set page(\"us-letter\")\n\nThis page likes freedom.\n```\n\nIf you need to customize your page size to some dimensions, you can specify the\nnamed arguments [`width`]($page.width) and [`height`]($page.height) instead.\n\n```example\n>>> #set page(margin: auto)\n#set page(width: 12cm, height: 12cm)\n\nThis page is a square.\n```\n\n### Change the page's margins { #change-margins }\nMargins are a vital ingredient for good typography:\n[Typographers consider lines that fit between 45 and 75 characters best length\nfor legibility](http://webtypography.net/2.1.2) and your margins and\n[columns](#columns) help define line widths. By default, Typst will create\nmargins proportional to the page size of your document. To set custom margins,\nyou will use the [`margin`]($page.margin) argument in the [`{page}`]($page) set\nrule.\n\nThe `margin` argument will accept a length if you want to set all margins to the\nsame width. However, you often want to set different margins on each side. To do\nthis, you can pass a dictionary:\n\n```example\n#set page(margin: (\n  top: 3cm,\n  bottom: 2cm,\n  x: 1.5cm,\n))\n\n#lorem(100)\n```\n\nThe page margin dictionary can have keys for each side (`top`, `bottom`, `left`,\n`right`), but you can also control left and right together by setting the `x`\nkey of the margin dictionary, like in the example. Likewise, the top and bottom\nmargins can be adjusted together by setting the `y` key.\n\nIf you do not specify margins for all sides in the margin dictionary, the old\nmargins will remain in effect for the unset sides. To prevent this and set all\nremaining margins to a common size, you can use the `rest` key. For example,\n`[#set page(margin: (left: 1.5in, rest: 1in))]` will set the left margin to 1.5\ninches and the remaining margins to one inch.\n\n### Different margins on alternating pages { #alternating-margins }\nSometimes, you'll need to alternate horizontal margins for even and odd pages,\nfor example, to have more room towards the spine of a book than on the outsides\nof its pages. Typst keeps track of whether a page is to the left or right of the\nbinding. You can use this information and set the `inside` or `outside` keys of\nthe margin dictionary. The `inside` margin points towards the spine, and the\n`outside` margin points towards the edge of the bound book.\n\n```typ\n#set page(margin: (inside: 2.5cm, outside: 2cm, y: 1.75cm))\n```\n\nTypst will assume that documents written in Left-to-Right scripts are bound on\nthe left while books written in Right-to-Left scripts are bound on the right.\nHowever, you will need to change this in some cases: If your first page is\noutput by a different app, the binding is reversed from Typst's perspective.\nAlso, some books, like English-language Mangas are customarily bound on the\nright, despite English using Left-to-Right script. To change the binding side\nand explicitly set where the `inside` and `outside` are, set the\n[`binding`]($page.binding) argument in the [`{page}`]($page) set rule.\n\n```typ\n// Produce a book bound on the right,\n// even though it is set in Spanish.\n#set text(lang: \"es\")\n#set page(binding: right)\n```\n\nIf `binding` is `left`, `inside` margins will be on the left on odd pages, and\nvice versa.\n\n## Add headers and footers { #headers-and-footers }\nHeaders and footers are inserted in the top and bottom margins of every page.\nYou can add custom headers and footers or just insert a page number.\n\nIn case you need more than just a page number, the best way to insert a header\nand a footer are the [`header`]($page.header) and [`footer`]($page.footer)\narguments of the [`{page}`]($page) set rule. You can pass any content as their\nvalues:\n\n```example\n>>> #set page(\"a5\", margin: (x: 2.5cm, y: 3cm))\n#set page(header: [\n  _Lisa Strassner's Thesis_\n  #h(1fr)\n  National Academy of Sciences\n])\n\n#lorem(150)\n```\n\nHeaders are bottom-aligned by default so that they do not collide with the top\nedge of the page. You can change this by wrapping your header in the\n[`{align}`]($align) function.\n\n### Different header and footer on specific pages { #specific-pages }\nYou'll need different headers and footers on some pages. For example, you may\nnot want a header and footer on the title page. The example below shows how to\nconditionally remove the header on the first page:\n\n```typ\n>>> #set page(\"a5\", margin: (x: 2.5cm, y: 3cm))\n#set page(header: context {\n  if counter(page).get().first() > 1 [\n    _Lisa Strassner's Thesis_\n    #h(1fr)\n    National Academy of Sciences\n  ]\n})\n\n#lorem(150)\n```\n\nThis example may look intimidating, but let's break it down: By using the\n`{context}` keyword, we are telling Typst that the header depends on where we\nare in the document. We then ask Typst if the page [counter] is larger than one\nat our (context-dependent) current position. The page counter starts at one, so\nwe are skipping the header on a single page. Counters may have multiple levels.\nThis feature is used for items like headings, but the page counter will always\nhave a single level, so we can just look at the first one.\n\nYou can, of course, add an `else` to this example to add a different header to\nthe first page instead.\n\n### Adapt headers and footers on pages with specific elements { #specific-elements }\nThe technique described in the previous section can be adapted to perform more\nadvanced tasks using Typst's labels. For example, pages with big tables could\nomit their headers to help keep clutter down. We will mark our tables with a\n`<big-table>` [label] and use the [query system]($query) to find out if such a\nlabel exists on the current page:\n\n```typ\n>>> #set page(\"a5\", margin: (x: 2.5cm, y: 3cm))\n#set page(header: context {\n  let page-counter =\n  let matches = query(<big-table>)\n  let current = counter(page).get()\n  let has-table = matches.any(m =>\n    counter(page).at(m.location()) == current\n  )\n\n  if not has-table [\n    _Lisa Strassner's Thesis_\n    #h(1fr)\n    National Academy of Sciences\n  ]\n}))\n\n#lorem(100)\n#pagebreak()\n\n#table(\n  columns: 2 * (1fr,),\n  [A], [B],\n  [C], [D],\n) <big-table>\n```\n\nHere, we query for all instances of the `<big-table>` label. We then check that\nnone of the tables are on the page at our current position. If so, we print the\nheader. This example also uses variables to be more concise. Just as above, you\ncould add an `else` to add another header instead of deleting it.\n\n## Add and customize page numbers { #page-numbers }\nPage numbers help readers keep track of and reference your document more easily.\nThe simplest way to insert page numbers is the [`numbering`]($page.numbering)\nargument of the [`{page}`]($page) set rule. You can pass a\n[_numbering pattern_]($numbering.numbering) string that shows how you want your\npages to be numbered.\n\n```example\n>>> #set page(\"iso-b6\", margin: 1.75cm)\n#set page(numbering: \"1\")\n\nThis is a numbered page.\n```\n\nAbove, you can check out the simplest conceivable example. It adds a single\nArabic page number at the center of the footer. You can specify other characters\nthan `\"1\"` to get other numerals. For example, `\"i\"` will yield lowercase Roman\nnumerals. Any character that is not interpreted as a number will be output\nas-is. For example, put dashes around your page number by typing this:\n\n```example\n>>> #set page(\"iso-b6\", margin: 1.75cm)\n#set page(numbering: \"— 1 —\")\n\nThis is a — numbered — page.\n```\n\nYou can add the total number of pages by entering a second number character in\nthe string.\n\n```example\n>>> #set page(\"iso-b6\", margin: 1.75cm)\n#set page(numbering: \"1 of 1\")\n\nThis is one of many numbered pages.\n```\n\nGo to the [`{numbering}` function reference]($numbering.numbering) to learn more\nabout the arguments you can pass here.\n\nIn case you need to right- or left-align the page number, use the\n[`number-align`]($page.number-align) argument of the [`{page}`]($page) set rule.\nAlternating alignment between even and odd pages is not currently supported\nusing this property. To do this, you'll need to specify a custom footer with\nyour footnote and query the page counter as described in the section on\nconditionally omitting headers and footers.\n\n### Custom footer with page numbers\nSometimes, you need to add other content than a page number to your footer.\nHowever, once a footer is specified, the [`numbering`]($page.numbering) argument\nof the [`{page}`]($page) set rule is ignored. This section shows you how to add\na custom footer with page numbers and more.\n\n```example\n>>> #set page(\"iso-b6\", margin: 1.75cm)\n#set page(footer: context [\n  *American Society of Proceedings*\n  #h(1fr)\n  #counter(page).display(\n    \"1/1\",\n    both: true,\n  )\n])\n\nThis page has a custom footer.\n```\n\nFirst, we add some strongly emphasized text on the left and add free space to\nfill the line. Then, we call `counter(page)` to retrieve the page counter and\nuse its `display` function to show its current value. We also set `both` to\n`{true}` so that our numbering pattern applies to the current _and_ final page\nnumber.\n\nWe can also get more creative with the page number. For example, let's insert a\ncircle for each page.\n\n```example\n>>> #set page(\"iso-b6\", margin: 1.75cm)\n#set page(footer: context [\n  *Fun Typography Club*\n  #h(1fr)\n  #let (num,) = counter(page).get()\n  #let circles = num * (\n    box(circle(\n      radius: 2pt,\n      fill: navy,\n    )),\n  )\n  #box(\n    inset: (bottom: 1pt),\n    circles.join(h(1pt))\n  )\n])\n\nThis page has a custom footer.\n```\n\nIn this example, we use the number of pages to create an array of\n[circles]($circle). The circles are wrapped in a [box] so they can all appear on\nthe same line because they are blocks and would otherwise create paragraph\nbreaks. The length of this [array] depends on the current page number.\n\nWe then insert the circles at the right side of the footer, with 1pt of space\nbetween them. The join method of an array will attempt to\n[_join_]($scripting/#blocks) the different values of an array into a single\nvalue, interspersed with its argument. In our case, we get a single content\nvalue with circles and spaces between them that we can use with the align\nfunction. Finally, we use another box to ensure that the text and the circles\ncan share a line and use the [`inset` argument]($box.inset) to raise the circles\na bit so they line up nicely with the text.\n\n### Reset the page number and skip pages { #skip-pages }\nDo you, at some point in your document, need to reset the page number? Maybe you\nwant to start with the first page only after the title page. Or maybe you need\nto skip a few page numbers because you will insert pages into the final printed\nproduct.\n\nThe right way to modify the page number is to manipulate the page [counter]. The\nsimplest manipulation is to set the counter back to 1.\n\n```typ\n#counter(page).update(1)\n```\n\nThis line will reset the page counter back to one. It should be placed at the\nstart of a page because it will otherwise create a page break. You can also\nupdate the counter given its previous value by passing a function:\n\n```typ\n#counter(page).update(n => n + 5)\n```\n\nIn this example, we skip five pages. `n` is the current value of the page\ncounter and `n + 5` is the return value of our function.\n\nIn case you need to retrieve the actual page number instead of the value of the\npage counter, you can use the [`page`]($location.page) method on the return\nvalue of the [`here`] function:\n\n```example\n#counter(page).update(n => n + 5)\n\n// This returns one even though the\n// page counter was incremented by 5.\n#context here().page()\n```\n\nYou can also obtain the page numbering pattern from the location returned by\n`here` with the [`page-numbering`]($location.page-numbering) method.\n\n## Add columns { #columns }\nAdd columns to your document to fit more on a page while maintaining legible\nline lengths. Columns are vertical blocks of text which are separated by some\nwhitespace. This space is called the gutter.\n\nTo lay out your content in columns, just specify the desired number of columns\nin a [`{page}`]($page.columns) set rule. To adjust the amount of space between\nthe columns, add a set rule on the [`columns` function]($columns), specifying\nthe `gutter` parameter.\n\n```example\n>>> #set page(height: 120pt)\n#set page(columns: 2)\n#set columns(gutter: 12pt)\n\n#lorem(30)\n```\n\nVery commonly, scientific papers have a single-column title and abstract, while\nthe main body is set in two-columns. To achieve this effect, Typst's [`place`\nfunction]($place) can temporarily escape the two-column layout by specifying\n`{float: true}` and `{scope: \"parent\"}`:\n\n```example:single\n>>> #set page(height: 180pt)\n#set page(columns: 2)\n#set par(justify: true)\n\n#place(\n  top + center,\n  float: true,\n  scope: \"parent\",\n  text(1.4em, weight: \"bold\")[\n    Impacts of Odobenidae\n  ],\n)\n\n== About seals in the wild\n#lorem(80)\n```\n\n_Floating placement_ refers to elements being pushed to the top or bottom of the\ncolumn or page, with the remaining content flowing in between. It is also\nfrequently used for [figures]($figure.placement).\n\n### Use columns anywhere in your document { #columns-anywhere }\nTo create columns within a nested layout, e.g. within a rectangle, you can use\nthe [`columns` function]($columns) directly. However, it really should only be\nused within nested layouts. At the page-level, the page set rule is preferable\nbecause it has better interactions with things like page-level floats,\nfootnotes, and line numbers.\n\n```example\n#rect(\n  width: 6cm,\n  height: 3.5cm,\n  columns(2, gutter: 12pt)[\n    In the dimly lit gas station,\n    a solitary taxi stood silently,\n    its yellow paint fading with\n    time. Its windows were dark,\n    its engine idle, and its tires\n    rested on the cold concrete.\n  ]\n)\n```\n\n### Balanced columns\nIf the columns on the last page of a document differ greatly in length, they may\ncreate a lopsided and unappealing layout. That's why typographers will often\nequalize the length of columns on the last page. This effect is called balancing\ncolumns. Typst cannot yet balance columns automatically. However, you can\nbalance columns manually by placing [`[#colbreak()]`]($colbreak) at an\nappropriate spot in your markup, creating the desired column break manually.\n\n\n## One-off modifications\nYou do not need to override your page settings if you need to insert a single\npage with a different setup. For example, you may want to insert a page that's\nflipped to landscape to insert a big table or change the margin and columns for\nyour title page. In this case, you can call [`{page}`]($page) as a function with\nyour content as an argument and the overrides as the other arguments. This will\ninsert enough new pages with your overridden settings to place your content on\nthem. Typst will revert to the page settings from the set rule after the call.\n\n```example\n>>> #set page(\"a6\")\n#page(flipped: true)[\n  = Multiplication table\n\n  #table(\n    columns: 5 * (1fr,),\n    ..for x in range(1, 10) {\n      for y in range(1, 6) {\n        (str(x*y),)\n      }\n    }\n  )\n]\n```"

[guides.page-setup-guide.description]
en = "An in-depth guide to setting page dimensions, margins, and page numbers in\nTypst. Learn how to create appealing and clear layouts and get there quickly.\n"

[guides.page-setup-guide.title]
en = "Page setup guide"

[guides.table-guide.body]
en = "\n# Table guide\nTables are a great way to present data to your readers in an easily readable,\ncompact, and organized manner. They are not only used for numerical values, but\nalso survey responses, task planning, schedules, and more. Because of this wide\nset of possible applications, there is no single best way to lay out a table.\nInstead, think about the data you want to highlight, your document's overarching\ndesign, and ultimately how your table can best serve your readers.\n\nTypst can help you with your tables by automating styling, importing data from\nother applications, and more! This guide takes you through a few of the most\ncommon questions you may have when adding a table to your document with Typst.\nFeel free to skip to the section most relevant to you – we designed this guide\nto be read out of order.\n\nIf you want to look up a detail of how tables work, you should also [check out\ntheir reference page]($table). And if you are looking for a table of contents\nrather than a normal table, the reference page of the [`outline`\nfunction]($outline) is the right place to learn more.\n\n## How to create a basic table? { #basic-tables }\nIn order to create a table in Typst, use the [`table` function]($table). For a\nbasic table, you need to tell the table function two things:\n\n- The number of columns\n- The content for each of the table cells\n\nSo, let's say you want to create a table with two columns describing the\ningredients for a cookie recipe:\n\n```example\n#table(\n  columns: 2,\n  [*Amount*], [*Ingredient*],\n  [360g], [Baking flour],\n  [250g], [Butter (room temp.)],\n  [150g], [Brown sugar],\n  [100g], [Cane sugar],\n  [100g], [70% cocoa chocolate],\n  [100g], [35-40% cocoa chocolate],\n  [2], [Eggs],\n  [Pinch], [Salt],\n  [Drizzle], [Vanilla extract],\n)\n```\n\nThis example shows how to call, configure, and populate a table. Both the column\ncount and cell contents are passed to the table as arguments. The [argument\nlist]($function) is surrounded by round parentheses. In it, we first pass the\ncolumn count as a named argument. Then, we pass multiple [content\nblocks]($content) as positional arguments. Each content block contains the\ncontents for a single cell.\n\nTo make the example more legible, we have placed two content block arguments on\neach line, mimicking how they would appear in the table. You could also write\neach cell on its own line. Typst does not care on which line you place the\narguments. Instead, Typst will place the content cells from left to right (or\nright to left, if that is the writing direction of your language) and then from\ntop to bottom. It will automatically add enough rows to your table so that it\nfits all of your content.\n\nIt is best to wrap the header row of your table in the [`table.header`\nfunction]($table.header). This clarifies your intent and will also allow future\nversions of Typst to make the output more accessible to users with a screen\nreader:\n\n```example\n#table(\n  columns: 2,\n  table.header[*Amount*][*Ingredient*],\n  [360g], [Baking flour],\n<<<  // ... the remaining cells\n>>>  [250g], [Butter (room temp.)],\n>>>  [150g], [Brown sugar],\n>>>  [100g], [Cane sugar],\n>>>  [100g], [70% cocoa chocolate],\n>>>  [100g], [35-40% cocoa chocolate],\n>>>  [2], [Eggs],\n>>>  [Pinch], [Salt],\n>>>  [Drizzle], [Vanilla extract],\n)\n```\n\nYou could also write a show rule that automatically [strongly\nemphasizes]($strong) the contents of the first cells for all tables. This\nquickly becomes useful if your document contains multiple tables!\n\n```example\n#show table.cell.where(y: 0): strong\n\n#table(\n  columns: 2,\n  table.header[Amount][Ingredient],\n  [360g], [Baking flour],\n<<<  // ... the remaining cells\n>>>  [250g], [Butter (room temp.)],\n>>>  [150g], [Brown sugar],\n>>>  [100g], [Cane sugar],\n>>>  [100g], [70% cocoa chocolate],\n>>>  [100g], [35-40% cocoa chocolate],\n>>>  [2], [Eggs],\n>>>  [Pinch], [Salt],\n>>>  [Drizzle], [Vanilla extract],\n)\n```\n\nWe are using a show rule with a selector for cell coordinates here instead of\napplying our styles directly to `table.header`. This is due to a current\nlimitation of Typst that will be fixed in a future release.\n\nCongratulations, you have created your first table! Now you can proceed to\n[change column sizes](#column-sizes), [adjust the strokes](#strokes), [add\nstriped rows](#fills), and more!\n\n## How to change the column sizes? { #column-sizes }\nIf you create a table and specify the number of columns, Typst will make each\ncolumn large enough to fit its largest cell. Often, you want something\ndifferent, for example, to make a table span the whole width of the page. You\ncan provide a list, specifying how wide you want each column to be, through the\n`columns` argument. There are a few different ways to specify column widths:\n\n- First, there is `{auto}`. This is the default behavior and tells Typst to grow\n  the column to fit its contents. If there is not enough space, Typst will try\n  its best to distribute the space among the `{auto}`-sized columns.\n- [Lengths]($length) like `{6cm}`, `{0.7in}`, or `{120pt}`. As usual, you can\n  also use the font-dependent `em` unit. This is a multiple of your current font\n  size. It's useful if you want to size your table so that it always fits\n  about the same amount of text, independent of font size.\n- A [ratio in percent]($ratio) such as `{40%}`. This will make the column take\n  up 40% of the total horizontal space available to the table, so either the\n  inner width of the page or the table's container. You can also mix ratios and\n  lengths into [relative lengths]($relative). Be mindful that even if you\n  specify a list of column widths that sum up to 100%, your table could still\n  become larger than its container. This is because there can be\n  [gutter]($table.gutter) between columns that is not included in the column\n  widths. If you want to make a table fill the page, the next option is often\n  very useful.\n- A [fractional part of the free space]($fraction) using the `fr` unit, such as\n  `1fr`. This unit allows you to distribute the available space to columns. It\n  works as follows: First, Typst sums up the lengths of all columns that do not\n  use `fr`s. Then, it determines how much horizontal space is left. This\n  horizontal space then gets distributed to all columns denominated in `fr`s.\n  During this process, a `2fr` column will become twice as wide as a `1fr`\n  column. This is where the name comes from: The width of the column is its\n  fraction of the total fractionally sized columns.\n\nLet's put this to use with a table that contains the dates, numbers, and\ndescriptions of some routine checks. The first two columns are `auto`-sized and\nthe last column is `1fr` wide as to fill the whole page.\n\n```example\n#table(\n  columns: (auto, auto, 1fr),\n  table.header[Date][°No][Description],\n  [24/01/03], [813], [Filtered participant pool],\n  [24/01/03], [477], [Transitioned to sec. regimen],\n  [24/01/11], [051], [Cycled treatment substrate],\n)\n```\n\nHere, we have passed our list of column lengths as an [array], enclosed in round\nparentheses, with its elements separated by commas. The first two columns are\nautomatically sized, so that they take on the size of their content and the\nthird column is sized as `{1fr}` so that it fills up the remainder of the space\non the page. If you wanted to instead change the second column to be a bit more\nspacious, you could replace its entry in the `columns` array with a value like\n`{6em}`.\n\n## How to caption and reference my table? { #captions-and-references }\nA table is just as valuable as the information your readers draw from it. You\ncan enhance the effectiveness of both your prose and your table by making a\nclear connection between the two with a cross-reference. Typst can help you with\nautomatic [references]($ref) and the [`figure` function]($figure).\n\nJust like with images, wrapping a table in the `figure` function allows you to\nadd a caption and a label, so you can reference the figure elsewhere. Wrapping\nyour table in a figure also lets you use the figure's `placement` parameter to\nfloat it to the top or bottom of a page.\n\nLet's take a look at a captioned table and how to reference it in prose:\n\n```example\n>>> #set page(width: 14cm)\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n\n#figure(\n  table(\n    columns: 4,\n    stroke: none,\n\n    table.header[Test Item][Specification][Test Result][Compliance],\n    [Voltage], [220V ± 5%], [218V], [Pass],\n    [Current], [5A ± 0.5A], [4.2A], [Fail],\n  ),\n  caption: [Probe results for design A],\n) <probe-a>\n\nThe results from @probe-a show that the design is not yet optimal.\nWe will show how its performance can be improved in this section.\n```\n\nThe example shows how to wrap a table in a figure, set a caption and a label,\nand how to reference that label. We start by using the `figure` function. It\nexpects the contents of the figure as a positional argument. We just put the\ntable function call in its argument list, omitting the `#` character because it\nis only needed when calling a function in markup mode. We also add the caption\nas a named argument (above or below) the table.\n\nAfter the figure call, we put a label in angle brackets (`[<probe-a>]`). This\ntells Typst to remember this element and make it referenceable under this name\nthroughout your document. We can then reference it in prose by using the at sign\nand the label name `[@probe-a]`. Typst will print a nicely formatted reference\nand automatically update the label if the table's number changes.\n\n## How to get a striped table? { #fills }\nMany tables use striped rows or columns instead of strokes to differentiate\nbetween rows and columns. This effect is often called _zebra stripes._ Tables\nwith zebra stripes are popular in Business and commercial Data Analytics\napplications, while academic applications tend to use strokes instead.\n\nTo add zebra stripes to a table, we use the `table` function's `fill` argument.\nIt can take three kinds of arguments:\n\n- A single color (this can also be a gradient or a tiling) to fill all cells\n  with. Because we want some cells to have another color, this is not useful if\n  we want to build zebra tables.\n- An array with colors which Typst cycles through for each column. We can use an\n  array with two elements to get striped columns.\n- A function that takes the horizontal coordinate `x` and the vertical\n  coordinate `y` of a cell and returns its fill. We can use this to create\n  horizontal stripes or [checkerboard patterns]($grid.cell).\n\nLet's start with an example of a horizontally striped table:\n\n```example\n>>> #set page(width: 16cm)\n#set text(font: \"IBM Plex Sans\")\n\n// Medium bold table header.\n#show table.cell.where(y: 0): set text(weight: \"medium\")\n\n// Bold titles.\n#show table.cell.where(x: 1): set text(weight: \"bold\")\n\n// See the strokes section for details on this!\n#let frame(stroke) = (x, y) => (\n  left: if x > 0 { 0pt } else { stroke },\n  right: stroke,\n  top: if y < 2 { stroke } else { 0pt },\n  bottom: stroke,\n)\n\n#set table(\n  fill: (rgb(\"EAF2F5\"), none),\n  stroke: frame(rgb(\"21222C\")),\n)\n\n#table(\n  columns: (0.4fr, 1fr, 1fr, 1fr),\n\n  table.header[Month][Title][Author][Genre],\n  [January], [The Great Gatsby], [F. Scott Fitzgerald], [Classic],\n  [February], [To Kill a Mockingbird], [Harper Lee], [Drama],\n  [March], [1984], [George Orwell], [Dystopian],\n  [April], [The Catcher in the Rye], [J.D. Salinger], [Coming-of-Age],\n)\n```\n\nThis example shows a book club reading list. The line `{fill: (rgb(\"EAF2F5\"),\n none)}` in `table`'s set rule is all that is needed to add striped columns. It\ntells Typst to alternate between coloring columns with a light blue (in the\n[`rgb`]($color.rgb) function call) and nothing (`{none}`). Note that we\nextracted all of our styling from the `table` function call itself into set and\nshow rules, so that we can automatically reuse it for multiple tables.\n\nBecause setting the stripes itself is easy we also added some other styles to\nmake it look nice. The other code in the example provides a dark blue\n[stroke](#stroke-functions) around the table and below the first line and\nemboldens the first row and the column with the book title. See the\n[strokes](#strokes) section for details on how we achieved this stroke\nconfiguration.\n\nLet's next take a look at how we can change only the set rule to achieve\nhorizontal stripes instead:\n\n```example\n>>> #set page(width: 16cm)\n>>> #set text(font: \"IBM Plex Sans\")\n>>> #show table.cell.where(x: 1): set text(weight: \"medium\")\n>>> #show table.cell.where(y: 0): set text(weight: \"bold\")\n>>>\n>>> #let frame(stroke) = (x, y) => (\n>>>   left: if x > 0 { 0pt } else { stroke },\n>>>   right: stroke,\n>>>   top: if y < 2 { stroke } else { 0pt },\n>>>   bottom: stroke,\n>>> )\n>>>\n#set table(\n  fill: (_, y) => if calc.odd(y) { rgb(\"EAF2F5\") },\n  stroke: frame(rgb(\"21222C\")),\n)\n>>>\n>>> #table(\n>>>   columns: (0.4fr, 1fr, 1fr, 1fr),\n>>>\n>>>   table.header[Month][Title][Author][Genre],\n>>>   [January], [The Great Gatsby],\n>>>     [F. Scott Fitzgerald], [Classic],\n>>>   [February], [To Kill a Mockingbird],\n>>>     [Harper Lee], [Drama],\n>>>   [March], [1984],\n>>>     [George Orwell], [Dystopian],\n>>>   [April], [The Catcher in the Rye],\n>>>     [J.D. Salinger], [Coming-of-Age],\n>>> )\n```\n\nWe just need to replace the set rule from the previous example with this one and\nget horizontal stripes instead. Here, we are passing a function to `fill`. It\ndiscards the horizontal coordinate with an underscore and then checks if the\nvertical coordinate `y` of the cell is odd. If so, the cell gets a light blue\nfill, otherwise, no fill is returned.\n\nOf course, you can make this function arbitrarily complex. For example, if you\nwant to stripe the rows with a light and darker shade of blue, you could do\nsomething like this:\n\n```example\n>>> #set page(width: 16cm)\n>>> #set text(font: \"IBM Plex Sans\")\n>>> #show table.cell.where(x: 1): set text(weight: \"medium\")\n>>> #show table.cell.where(y: 0): set text(weight: \"bold\")\n>>>\n>>> #let frame(stroke) = (x, y) => (\n>>>   left: if x > 0 { 0pt } else { stroke },\n>>>   right: stroke,\n>>>   top: if y < 2 { stroke } else { 0pt },\n>>>   bottom: stroke,\n>>> )\n>>>\n#set table(\n  fill: (_, y) => (none, rgb(\"EAF2F5\"), rgb(\"DDEAEF\")).at(calc.rem(y, 3)),\n  stroke: frame(rgb(\"21222C\")),\n)\n>>>\n>>> #table(\n>>>   columns: (0.4fr, 1fr, 1fr, 1fr),\n>>>\n>>>   table.header[Month][Title][Author][Genre],\n>>>   [January], [The Great Gatsby],\n>>>     [F. Scott Fitzgerald], [Classic],\n>>>   [February], [To Kill a Mockingbird],\n>>>     [Harper Lee], [Drama],\n>>>   [March], [1984],\n>>>     [George Orwell], [Dystopian],\n>>>   [April], [The Catcher in the Rye],\n>>>     [J.D. Salinger], [Coming-of-Age],\n>>> )\n```\n\nThis example shows an alternative approach to write our fill function. The\nfunction uses an array with three colors and then cycles between its values for\neach row by indexing the array with the remainder of `y` divided by 3.\n\nFinally, here is a bonus example that uses the _stroke_ to achieve striped rows:\n\n```example\n>>> #set page(width: 16cm)\n>>> #set text(font: \"IBM Plex Sans\")\n>>> #show table.cell.where(x: 1): set text(weight: \"medium\")\n>>> #show table.cell.where(y: 0): set text(weight: \"bold\")\n>>>\n>>> #let frame(stroke) = (x, y) => (\n>>>   left: if x > 0 { 0pt } else { stroke },\n>>>   right: stroke,\n>>>   top: if y < 2 { stroke } else { 0pt },\n>>>   bottom: stroke,\n>>> )\n>>>\n#set table(\n  stroke: (x, y) => (\n    y: 1pt,\n    left: if x > 0 { 0pt } else if calc.even(y) { 1pt },\n    right: if calc.even(y) { 1pt },\n  ),\n)\n>>>\n>>> #table(\n>>>   columns: (0.4fr, 1fr, 1fr, 1fr),\n>>>\n>>>   table.header[Month][Title][Author][Genre],\n>>>   [January], [The Great Gatsby],\n>>>     [F. Scott Fitzgerald], [Classic],\n>>>   [February], [To Kill a Mockingbird],\n>>>     [Harper Lee], [Drama],\n>>>   [March], [1984],\n>>>     [George Orwell], [Dystopian],\n>>>   [April], [The Catcher in the Rye],\n>>>     [J.D. Salinger], [Coming-of-Age],\n>>> )\n```\n\n### Manually overriding a cell's fill color { #fill-override }\nSometimes, the fill of a cell needs not to vary based on its position in the\ntable, but rather based on its contents. We can use the [`table.cell`\nelement]($table.cell) in the `table`'s parameter list to wrap a cell's content\nand override its fill.\n\nFor example, here is a list of all German presidents, with the cell borders\ncolored in the color of their party.\n\n```example\n>>> #set page(width: 10cm)\n#set text(font: \"Roboto\")\n\n#let cdu(name) = ([CDU], table.cell(fill: black, text(fill: white, name)))\n#let spd(name) = ([SPD], table.cell(fill: red, text(fill: white, name)))\n#let fdp(name) = ([FDP], table.cell(fill: yellow, name))\n\n#table(\n  columns: (auto, auto, 1fr),\n  stroke: (x: none),\n\n  table.header[Tenure][Party][President],\n  [1949-1959], ..fdp[Theodor Heuss],\n  [1959-1969], ..cdu[Heinrich Lübke],\n  [1969-1974], ..spd[Gustav Heinemann],\n  [1974-1979], ..fdp[Walter Scheel],\n  [1979-1984], ..cdu[Karl Carstens],\n  [1984-1994], ..cdu[Richard von Weizsäcker],\n  [1994-1999], ..cdu[Roman Herzog],\n  [1999-2004], ..spd[Johannes Rau],\n  [2004-2010], ..cdu[Horst Köhler],\n  [2010-2012], ..cdu[Christian Wulff],\n  [2012-2017], [n/a], [Joachim Gauck],\n  [2017-],     ..spd[Frank-Walter-Steinmeier],\n)\n```\n\nIn this example, we make use of variables because there only have been a total\nof three parties whose members have become president (and one unaffiliated\npresident). Their colors will repeat multiple times, so we store a function that\nproduces an array with their party's name and a table cell with that party's\ncolor and the president's name (`cdu`, `spd`, and `fdp`). We then use these\nfunctions in the `table` argument list instead of directly adding the name. We\nuse the [spread operator]($arguments/#spreading) `..` to turn the items of the\narrays into single cells. We could also write something like\n`{[FDP], table.cell(fill: yellow)[Theodor Heuss]}` for each cell directly in the\n`table`'s argument list, but that becomes unreadable, especially for the parties\nwhose colors are dark so that they require white text. We also delete vertical\nstrokes and set the font to Roboto.\n\nThe party column and the cell color in this example communicate redundant\ninformation on purpose: Communicating important data using color only is a bad\naccessibility practice. It disadvantages users with vision impairment and is in\nviolation of universal access standards, such as the\n[WCAG 2.1 Success Criterion 1.4.1](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html).\nTo improve this table, we added a column printing the party name. Alternatively,\nyou could have made sure to choose a color-blindness friendly palette and mark\nup your cells with an additional label that screen readers can read out loud.\nThe latter feature is not currently supported by Typst, but will be added in a\nfuture release. You can check how colors look for color-blind readers with\n[this Chrome extension](https://chromewebstore.google.com/detail/colorblindly/floniaahmccleoclneebhhmnjgdfijgg),\n[Photoshop](https://helpx.adobe.com/photoshop/using/proofing-colors.html), or\n[GIMP](https://docs.gimp.org/2.10/en/gimp-display-filter-dialog.html).\n\n## How to adjust the lines in a table? { #strokes }\nBy default, Typst adds strokes between each row and column of a table. You can\nadjust these strokes in a variety of ways. Which one is the most practical,\ndepends on the modification you want to make and your intent:\n\n- Do you want to style all tables in your document, irrespective of their size\n  and content? Use the `table` function's [stroke]($table.stroke) argument in a\n  set rule.\n- Do you want to customize all lines in a single table? Use the `table`\n  function's [stroke]($table.stroke) argument when calling the table function.\n- Do you want to change, add, or remove the stroke around a single cell? Use the\n  `table.cell` element in the argument list of your table call.\n- Do you want to change, add, or remove a single horizontal or vertical stroke\n  in a single table? Use the [`table.hline`] and [`table.vline`] elements in the\n  argument list of your table call.\n\nWe will go over all of these options with examples next! First, we will tackle\nthe `table` function's [stroke]($table.stroke) argument. Here, you can adjust\nboth how the table's lines get drawn and configure which lines are drawn at all.\n\nLet's start by modifying the color and thickness of the stroke:\n\n```example\n#table(\n  columns: 4,\n  stroke: 0.5pt + rgb(\"666675\"),\n  [*Monday*], [11.5], [13.0], [4.0],\n  [*Tuesday*], [8.0], [14.5], [5.0],\n  [*Wednesday*], [9.0], [18.5], [13.0],\n)\n```\n\nThis makes the table lines a bit less wide and uses a bluish gray. You can see\nthat we added a width in point to a color to achieve our customized stroke. This\naddition yields a value of the [stroke type]($stroke). Alternatively, you can\nuse the dictionary representation for strokes which allows you to access\nadvanced features such as dashed lines.\n\nThe previous example showed how to use the stroke argument in the table\nfunction's invocation. Alternatively, you can specify the stroke argument in the\n`table`'s set rule. This will have exactly the same effect on all subsequent\n`table` calls as if the stroke argument was specified in the argument list. This\nis useful if you are writing a template or want to style your whole document.\n\n```typ\n// Renders the exact same as the last example\n#set table(stroke: 0.5pt + rgb(\"666675\"))\n\n#table(\n  columns: 4,\n  [*Monday*], [11.5], [13.0], [4.0],\n  [*Tuesday*], [8.0], [14.5], [5.0],\n  [*Wednesday*], [9.0], [18.5], [13.0],\n)\n```\n\nFor small tables, you sometimes want to suppress all strokes because they add\ntoo much visual noise. To do this, just set the stroke argument to `{none}`:\n\n```example\n#table(\n  columns: 4,\n  stroke: none,\n  [*Monday*], [11.5], [13.0], [4.0],\n  [*Tuesday*], [8.0], [14.5], [5.0],\n  [*Wednesday*], [9.0], [18.5], [13.0],\n)\n```\n\nIf you want more fine-grained control of where lines get placed in your table,\nyou can also pass a dictionary with the keys `top`, `left`, `right`, `bottom`\n(controlling the respective cell sides), `x`, `y` (controlling vertical and\nhorizontal strokes), and `rest` (covers all strokes not styled by other\ndictionary entries). All keys are optional; omitted keys will be treated as if\ntheir value was the default value. For example, to get a table with only\nhorizontal lines, you can do this:\n\n```example\n#table(\n  columns: 2,\n  stroke: (x: none),\n  align: horizon,\n  [☒], [Close cabin door],\n  [☐], [Start engines],\n  [☐], [Radio tower],\n  [☐], [Push back],\n)\n```\n\nThis turns off all vertical strokes and leaves the horizontal strokes in place.\nTo achieve the reverse effect (only horizontal strokes), set the stroke argument\nto `{(y: none)}` instead.\n\n[Further down in the guide](#stroke-functions), we cover how to use a function\nin the stroke argument to customize all strokes individually. This is how you\nachieve more complex stroking patterns.\n\n### Adding individual lines in the table { #individual-lines }\nIf you want to add a single horizontal or vertical line in your table, for\nexample to separate a group of rows, you can use the [`table.hline`] and\n[`table.vline`] elements for horizontal and vertical lines, respectively. Add\nthem to the argument list of the `table` function just like you would add\nindividual cells and a header.\n\nLet's take a look at the following example from the reference:\n\n```example\n#set table.hline(stroke: 0.6pt)\n\n#table(\n  stroke: none,\n  columns: (auto, 1fr),\n  // Morning schedule abridged.\n  [14:00], [Talk: Tracked Layout],\n  [15:00], [Talk: Automations],\n  [16:00], [Workshop: Tables],\n  table.hline(),\n  [19:00], [Day 1 Attendee Mixer],\n)\n```\n\nIn this example, you can see that we have placed a call to `table.hline` between\nthe cells, producing a horizontal line at that spot. We also used a set rule on\nthe element to reduce its stroke width to make it fit better with the weight of\nthe font.\n\nBy default, Typst places horizontal and vertical lines after the current row or\ncolumn, depending on their position in the argument list. You can also manually\nmove them to a different position by adding the `y` (for `hline`) or `x` (for\n`vline`) argument. For example, the code below would produce the same result:\n\n```typ\n#set table.hline(stroke: 0.6pt)\n\n#table(\n  stroke: none,\n  columns: (auto, 1fr),\n  // Morning schedule abridged.\n  table.hline(y: 3),\n  [14:00], [Talk: Tracked Layout],\n  [15:00], [Talk: Automations],\n  [16:00], [Workshop: Tables],\n  [19:00], [Day 1 Attendee Mixer],\n)\n```\n\nLet's imagine you are working with a template that shows none of the table\nstrokes except for one between the first and second row. Now, since you have one\ntable that also has labels in the first column, you want to add an extra\nvertical line to it. However, you do not want this vertical line to cross into\nthe top row. You can achieve this with the `start` argument:\n\n```example\n>>> #set page(width: 12cm)\n>>> #show table.cell.where(y: 0): strong\n>>> #set table(stroke: (_, y) => if y == 0 { (bottom: 1pt) })\n// Base template already configured tables, but we need some\n// extra configuration for this table.\n#{\n  set table(align: (x, _) => if x == 0 { left } else { right })\n  show table.cell.where(x: 0): smallcaps\n  table(\n    columns: (auto, 1fr, 1fr, 1fr),\n    table.vline(x: 1, start: 1),\n    table.header[Trainset][Top Speed][Length][Weight],\n    [TGV Réseau], [320 km/h], [200m], [383t],\n    [ICE 403], [330 km/h], [201m], [409t],\n    [Shinkansen N700], [300 km/h], [405m], [700t],\n  )\n}\n```\n\nIn this example, we have added `table.vline` at the start of our positional\nargument list. But because the line is not supposed to go to the left of the\nfirst column, we specified the `x` argument as `{1}`. We also set the `start`\nargument to `{1}` so that the line does only start after the first row.\n\nThe example also contains two more things: We use the align argument with a\nfunction to right-align the data in all but the first column and use a show rule\nto make the first column of table cells appear in small capitals. Because these\nstyles are specific to this one table, we put everything into a [code\nblock]($scripting/#blocks), so that the styling does not affect any further\ntables.\n\n### Overriding the strokes of a single cell { #stroke-override }\nImagine you want to change the stroke around a single cell. Maybe your cell is\nvery important and needs highlighting! For this scenario, there is the\n[`table.cell` function]($table.cell). Instead of adding your content directly in\nthe argument list of the table, you wrap it in a `table.cell` call. Now, you can\nuse `table.cell`'s argument list to override the table properties, such as the\nstroke, for this cell only.\n\nHere's an example with a matrix of two of the Big Five personality factors, with\none intersection highlighted.\n\n```example\n>>> #set page(width: 16cm)\n#table(\n  columns: 3,\n  stroke: (x: none),\n\n  [], [*High Neuroticism*], [*Low Neuroticism*],\n\n  [*High Agreeableness*],\n  table.cell(stroke: orange + 2pt)[\n    _Sensitive_ \\ Prone to emotional distress but very empathetic.\n  ],\n  [_Compassionate_ \\ Caring and stable, often seen as a supportive figure.],\n\n  [*Low Agreeableness*],\n  [_Contentious_ \\ Competitive and easily agitated.],\n  [_Detached_ \\ Independent and calm, may appear aloof.],\n)\n```\n\nAbove, you can see that we used the `table.cell` element in the table's argument\nlist and passed the cell content to it. We have used its `stroke` argument to\nset a wider orange stroke. Despite the fact that we disabled vertical strokes on\nthe table, the orange stroke appeared on all sides of the modified cell, showing\nthat the table's stroke configuration is overwritten.\n\n### Complex document-wide stroke customization { #stroke-functions }\nThis section explains how to customize all lines at once in one or multiple\ntables. This allows you to draw only the first horizontal line or omit the outer\nlines, without knowing how many cells the table has. This is achieved by\nproviding a function to the table's `stroke` parameter. The function should\nreturn a stroke given the zero-indexed x and y position of the current cell. You\nshould only need these functions if you are a template author, do not use a\ntemplate, or need to heavily customize your tables. Otherwise, your template\nshould set appropriate default table strokes.\n\nFor example, this is a set rule that draws all horizontal lines except for the\nvery first and last line.\n\n```example\n#show table.cell.where(x: 0): set text(style: \"italic\")\n#show table.cell.where(y: 0): set text(style: \"normal\", weight: \"bold\")\n#set table(stroke: (_, y) => if y > 0 { (top: 0.8pt) })\n\n#table(\n  columns: 3,\n  align: center + horizon,\n  table.header[Technique][Advantage][Drawback],\n  [Diegetic], [Immersive], [May be contrived],\n  [Extradiegetic], [Breaks immersion], [Obtrusive],\n  [Omitted], [Fosters engagement], [May fracture audience],\n)\n```\n\nIn the set rule, we pass a function that receives two arguments, assigning the\nvertical coordinate to `y` and discarding the horizontal coordinate. It then\nreturns a stroke dictionary with a `{0.8pt}` top stroke for all but the first\nline. The cells in the first line instead implicitly receive `{none}` as the\nreturn value. You can easily modify this function to just draw the inner\nvertical lines instead as `{(x, _) => if x > 0 { (left: 0.8pt) }}`.\n\nLet's try a few more stroking functions. The next function will only draw a line\nbelow the first row:\n\n```example\n>>> #show table.cell: it => if it.x == 0 and it.y > 0 {\n>>>   set text(style: \"italic\")\n>>>   it\n>>> } else {\n>>>   it\n>>> }\n>>>\n>>> #show table.cell.where(y: 0): strong\n#set table(stroke: (_, y) => if y == 0 { (bottom: 1pt) })\n\n<<< // Table as seen above\n>>> #table(\n>>>   columns: 3,\n>>>   align: center + horizon,\n>>>   table.header[Technique][Advantage][Drawback],\n>>>   [Diegetic], [Immersive], [May be contrived],\n>>>   [Extradiegetic], [Breaks immersion], [Obtrusive],\n>>>   [Omitted], [Fosters engagement], [May fracture audience],\n>>> )\n```\n\nIf you understood the first example, it becomes obvious what happens here. We\ncheck if we are in the first row. If so, we return a bottom stroke. Otherwise,\nwe'll return `{none}` implicitly.\n\nThe next example shows how to draw all but the outer lines:\n\n```example\n>>> #show table.cell: it => if it.x == 0 and it.y > 0 {\n>>>   set text(style: \"italic\")\n>>>   it\n>>> } else {\n>>>   it\n>>> }\n>>>\n>>> #show table.cell.where(y: 0): strong\n#set table(stroke: (x, y) => (\n  left: if x > 0 { 0.8pt },\n  top: if y > 0 { 0.8pt },\n))\n\n<<< // Table as seen above\n>>> #table(\n>>>   columns: 3,\n>>>   align: center + horizon,\n>>>   table.header[Technique][Advantage][Drawback],\n>>>   [Diegetic], [Immersive], [May be contrived],\n>>>   [Extradiegetic], [Breaks immersion], [Obtrusive],\n>>>   [Omitted], [Fosters engagement], [May fracture audience],\n>>> )\n```\n\nThis example uses both the `x` and `y` coordinates. It omits the left stroke in\nthe first column and the top stroke in the first row. The right and bottom lines\nare not drawn.\n\nFinally, here is a table that draws all lines except for the vertical lines in\nthe first row and horizontal lines in the table body. It looks a bit like a\ncalendar.\n\n```example\n>>> #show table.cell: it => if it.x == 0 and it.y > 0 {\n>>>   set text(style: \"italic\")\n>>>   it\n>>> } else {\n>>>   it\n>>> }\n>>>\n>>> #show table.cell.where(y: 0): strong\n#set table(stroke: (x, y) => (\n  left: if x == 0 or y > 0 { 1pt } else { 0pt },\n  right: 1pt,\n  top: if y <= 1 { 1pt } else { 0pt },\n  bottom: 1pt,\n))\n\n<<< // Table as seen above\n>>> #table(\n>>>   columns: 3,\n>>>   align: center + horizon,\n>>>   table.header[Technique][Advantage][Drawback],\n>>>   [Diegetic], [Immersive], [May be contrived],\n>>>   [Extradiegetic], [Breaks immersion], [Obtrusive],\n>>>   [Omitted], [Fosters engagement], [May fracture audience],\n>>> )\n```\n\nThis example is a bit more complex. We start by drawing all the strokes on the\nright of the cells. But this means that we have drawn strokes in the top row,\ntoo, and we don't need those! We use the fact that `left` will override `right`\nand only draw the left line if we are not in the first row or if we are in the\nfirst column. In all other cases, we explicitly remove the left line. Finally,\nwe draw the horizontal lines by first setting the bottom line and then for the\nfirst two rows with the `top` key, suppressing all other top lines. The last\nline appears because there is no `top` line that could suppress it.\n\n### How to achieve a double line? { #double-stroke }\nTypst does not yet have a native way to draw double strokes, but there are\nmultiple ways to emulate them, for example with [tilings]($tiling). We will\nshow a different workaround in this section: Table gutters.\n\nTables can space their cells apart using the `gutter` argument. When a gutter is\napplied, a stroke is drawn on each of the now separated cells. We can\nselectively add gutter between the rows or columns for which we want to draw a\ndouble line. The `row-gutter` and `column-gutter` arguments allow us to do this.\nThey accept arrays of gutter values. Let's take a look at an example:\n\n```example\n#table(\n  columns: 3,\n  stroke: (x: none),\n  row-gutter: (2.2pt, auto),\n  table.header[Date][Exercise Type][Calories Burned],\n  [2023-03-15], [Swimming], [400],\n  [2023-03-17], [Weightlifting], [250],\n  [2023-03-18], [Yoga], [200],\n)\n```\n\nWe can see that we used an array for `row-gutter` that specifies a `{2.2pt}` gap\nbetween the first and second row. It then continues with `auto` (which is the\ndefault, in this case `{0pt}` gutter) which will be the gutter between all other\nrows, since it is the last entry in the array.\n\n## How to align the contents of the cells in my table? { #alignment }\nYou can use multiple mechanisms to align the content in your table. You can\neither use the `table` function's `align` argument to set the alignment for your\nwhole table (or use it in a set rule to set the alignment for tables throughout\nyour document) or the [`align`] function (or `table.cell`'s `align` argument) to\noverride the alignment of a single cell.\n\nWhen using the `table` function's align argument, you can choose between three\nmethods to specify an [alignment]:\n\n- Just specify a single alignment like `right` (aligns in the top-right corner)\n  or `center + horizon` (centers all cell content). This changes the alignment\n  of all cells.\n- Provide an array. Typst will cycle through this array for each column.\n- Provide a function that is passed the horizontal `x` and vertical `y`\n  coordinate of a cell and returns an alignment.\n\nFor example, this travel itinerary right-aligns the day column and left-aligns\neverything else by providing an array in the `align` argument:\n\n```example\n>>> #set page(width: 12cm)\n#set text(font: \"IBM Plex Sans\")\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n\n#table(\n  columns: 4,\n  align: (right, left, left, left),\n  fill: (_, y) => if calc.odd(y) { green.lighten(90%) },\n  stroke: none,\n\n  table.header[Day][Location][Hotel or Apartment][Activities],\n  [1], [Paris, France], [Hôtel de l'Europe], [Arrival, Evening River Cruise],\n  [2], [Paris, France], [Hôtel de l'Europe], [Louvre Museum, Eiffel Tower],\n  [3], [Lyon, France], [Lyon City Hotel], [City Tour, Local Cuisine Tasting],\n  [4], [Geneva, Switzerland], [Lakeview Inn], [Lake Geneva, Red Cross Museum],\n  [5], [Zermatt, Switzerland], [Alpine Lodge], [Visit Matterhorn, Skiing],\n)\n```\n\nHowever, this example does not yet look perfect — the header cells should be\nbottom-aligned. Let's use a function instead to do so:\n\n```example\n>>> #set page(width: 12cm)\n#set text(font: \"IBM Plex Sans\")\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n\n#table(\n  columns: 4,\n  align: (x, y) =>\n    if x == 0 { right } else { left } +\n    if y == 0 { bottom } else { top },\n  fill: (_, y) => if calc.odd(y) { green.lighten(90%) },\n  stroke: none,\n\n  table.header[Day][Location][Hotel or Apartment][Activities],\n  [1], [Paris, France], [Hôtel de l'Europe], [Arrival, Evening River Cruise],\n  [2], [Paris, France], [Hôtel de l'Europe], [Louvre Museum, Eiffel Tower],\n<<<  // ... remaining days omitted\n>>>  [3], [Lyon, France], [Lyon City Hotel], [City Tour, Local Cuisine Tasting],\n>>>  [4], [Geneva, Switzerland], [Lakeview Inn], [Lake Geneva, Red Cross Museum],\n>>>  [5], [Zermatt, Switzerland], [Alpine Lodge], [Visit Matterhorn, Skiing],\n)\n```\n\nIn the function, we calculate a horizontal and vertical alignment based on\nwhether we are in the first column (`{x == 0}`) or the first row (`{y == 0}`).\nWe then make use of the fact that we can add horizontal and vertical alignments\nwith `+` to receive a single, two-dimensional alignment.\n\nYou can find an example of using `table.cell` to change a single cell's\nalignment on [its reference page]($table.cell).\n\n## How to merge cells? { #merge-cells }\nWhen a table contains logical groupings or the same data in multiple adjacent\ncells, merging multiple cells into a single, larger cell can be advantageous.\nAnother use case for cell groups are table headers with multiple rows: That way,\nyou can group for example a sales data table by quarter in the first row and by\nmonths in the second row.\n\nA merged cell spans multiple rows and/or columns. You can achieve it with the\n[`table.cell`] function's `rowspan` and `colspan` arguments: Just specify how\nmany rows or columns you want your cell to span.\n\nThe example below contains an attendance calendar for an office with in-person\nand remote days for each team member. To make the table more glanceable, we\nmerge adjacent cells with the same value:\n\n```example\n>>> #set page(width: 22cm)\n#let ofi = [Office]\n#let rem = [_Remote_]\n#let lea = [*On leave*]\n\n#show table.cell.where(y: 0): set text(\n  fill: white,\n  weight: \"bold\",\n)\n\n#table(\n  columns: 6 * (1fr,),\n  align: (x, y) => if x == 0 or y == 0 { left } else { center },\n  stroke: (x, y) => (\n    // Separate black cells with white strokes.\n    left: if y == 0 and x > 0 { white } else { black },\n    rest: black,\n  ),\n  fill: (_, y) => if y == 0 { black },\n\n  table.header(\n    [Team member],\n    [Monday],\n    [Tuesday],\n    [Wednesday],\n    [Thursday],\n    [Friday]\n  ),\n  [Evelyn Archer],\n    table.cell(colspan: 2, ofi),\n    table.cell(colspan: 2, rem),\n    ofi,\n  [Lila Montgomery],\n    table.cell(colspan: 5, lea),\n  [Nolan Pearce],\n    rem,\n    table.cell(colspan: 2, ofi),\n    rem,\n    ofi,\n)\n```\n\nIn the example, we first define variables with \"Office\", \"Remote\", and \"On\nleave\" so we don't have to write these labels out every time. We can then use\nthese variables in the table body either directly or in a `table.cell` call if\nthe team member spends multiple consecutive days in office, remote, or on leave.\n\nThe example also contains a black header (created with `table`'s `fill`\nargument) with white strokes (`table`'s `stroke` argument) and white text (set\nby the `table.cell` set rule). Finally, we align all the content of all table\ncells in the body in the center. If you want to know more about the functions\npassed to `align`, `stroke`, and `fill`, you can check out the sections on\n[alignment], [strokes](#stroke-functions), and [striped\ntables](#fills).\n\nThis table would be a great candidate for fully automated generation from an\nexternal data source! Check out the [section about importing\ndata](#importing-data) to learn more about that.\n\n## How to rotate a table? { #rotate-table }\nWhen tables have many columns, a portrait paper orientation can quickly get\ncramped. Hence, you'll sometimes want to switch your tables to landscape\norientation. There are two ways to accomplish this in Typst:\n\n- If you want to rotate only the table but not the other content of the page and\n  the page itself, use the [`rotate` function]($rotate) with the `reflow`\n  argument set to `{true}`.\n- If you want to rotate the whole page the table is on, you can use the [`page`\n  function]($page) with its `flipped` argument set to `{true}`. The header,\n  footer, and page number will now also appear on the long edge of the page.\n  This has the advantage that the table will appear right side up when read on a\n  computer, but it also means that a page in your document has different\n  dimensions than all the others, which can be jarring to your readers.\n\nBelow, we will demonstrate both techniques with a student grade book table.\n\nFirst, we will rotate the table on the page. The example also places some text\non the right of the table.\n\n```example\n#set page(\"a5\", columns: 2, numbering: \"— 1 —\")\n>>> #set page(margin: auto)\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n\n#rotate(\n  -90deg,\n  reflow: true,\n\n  table(\n    columns: (1fr,) + 5 * (auto,),\n    inset: (x: 0.6em,),\n    stroke: (_, y) => (\n      x: 1pt,\n      top: if y <= 1 { 1pt } else { 0pt },\n      bottom: 1pt,\n    ),\n    align: (left, right, right, right, right, left),\n\n    table.header(\n      [Student Name],\n      [Assignment 1], [Assignment 2],\n      [Mid-term], [Final Exam],\n      [Total Grade],\n    ),\n    [Jane Smith], [78%], [82%], [75%], [80%], [B],\n    [Alex Johnson], [90%], [95%], [94%], [96%], [A+],\n    [John Doe], [85%], [90%], [88%], [92%], [A],\n    [Maria Garcia], [88%], [84%], [89%], [85%], [B+],\n    [Zhang Wei], [93%], [89%], [90%], [91%], [A-],\n    [Marina Musterfrau], [96%], [91%], [74%], [69%], [B-],\n  ),\n)\n\n#lorem(80)\n```\n\n\nWhat we have here is a two-column document on ISO A5 paper with page numbers on\nthe bottom. The table has six columns and contains a few customizations to\n[stroke](#strokes), alignment and spacing. But the most important part is that\nthe table is wrapped in a call to the `rotate` function with the `reflow`\nargument being `{true}`. This will make the table rotate 90 degrees\ncounterclockwise. The reflow argument is needed so that the table's rotation\naffects the layout. If it was omitted, Typst would lay out the page as if the\ntable was not rotated (`{true}` might become the default in the future).\n\nThe example also shows how to produce many columns of the same size: To the\ninitial `{1fr}` column, we add an array with five `{auto}` items that we\ncreate by multiplying an array with one `{auto}` item by five. Note that arrays\nwith just one item need a trailing comma to distinguish them from merely\nparenthesized expressions.\n\nThe second example shows how to rotate the whole page, so that the table stays\nupright:\n\n```example\n#set page(\"a5\", numbering: \"— 1 —\")\n>>> #set page(margin: auto)\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n\n#page(flipped: true)[\n  #table(\n    columns: (1fr,) + 5 * (auto,),\n    inset: (x: 0.6em,),\n    stroke: (_, y) => (\n      x: 1pt,\n      top: if y <= 1 { 1pt } else { 0pt },\n      bottom: 1pt,\n    ),\n    align: (left, right, right, right, right, left),\n\n    table.header(\n      [Student Name],\n      [Assignment 1], [Assignment 2],\n      [Mid-term], [Final Exam],\n      [Total Grade],\n    ),\n    [Jane Smith], [78%], [82%], [75%], [80%], [B],\n    [Alex Johnson], [90%], [95%], [94%], [96%], [A+],\n    [John Doe], [85%], [90%], [88%], [92%], [A],\n    [Maria Garcia], [88%], [84%], [89%], [85%], [B+],\n    [Zhang Wei], [93%], [89%], [90%], [91%], [A-],\n    [Marina Musterfrau], [96%], [91%], [74%], [69%], [B-],\n  )\n\n  #pad(x: 15%, top: 1.5em)[\n    = Winter 2023/24 results\n    #lorem(80)\n  ]\n]\n```\n\nHere, we take the same table and the other content we want to set with it and\nput it into a call to the [`page`] function while supplying `{true}` to the\n`flipped` argument. This will instruct Typst to create new pages with width and\nheight swapped and place the contents of the function call onto a new page.\nNotice how the page number is also on the long edge of the paper now. At the\nbottom of the page, we use the [`pad`] function to constrain the width of the\nparagraph to achieve a nice and legible line length.\n\n## How to break a table across pages? { #table-across-pages }\nIt is best to contain a table on a single page. However, some tables just have\nmany rows, so breaking them across pages becomes unavoidable. Fortunately, Typst\nsupports breaking tables across pages out of the box. If you are using the\n[`table.header`] and [`table.footer`] functions, their contents will be repeated\non each page as the first and last rows, respectively. If you want to disable\nthis behavior, you can set `repeat` to `{false}` on either of them.\n\nIf you have placed your table inside of a [figure], it becomes unable to break\nacross pages by default. However, you can change this behavior. Let's take a\nlook:\n\n```example\n#set page(width: 9cm, height: 6cm)\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n#show figure: set block(breakable: true)\n\n#figure(\n  caption: [Training regimen for Marathon],\n  table(\n    columns: 3,\n    fill: (_, y) => if y == 0 { gray.lighten(75%) },\n\n    table.header[Week][Distance (km)][Time (hh:mm:ss)],\n    [1], [5],  [00:30:00],\n    [2], [7],  [00:45:00],\n    [3], [10], [01:00:00],\n    [4], [12], [01:10:00],\n    [5], [15], [01:25:00],\n    [6], [18], [01:40:00],\n    [7], [20], [01:50:00],\n    [8], [22], [02:00:00],\n    [...], [...], [...],\n    table.footer[_Goal_][_42.195_][_02:45:00_],\n  )\n)\n```\n\nA figure automatically produces a [block] which cannot break by default.\nHowever, we can reconfigure the block of the figure using a show rule to make it\n`breakable`. Now, the figure spans multiple pages with the headers and footers\nrepeating.\n\n## How to import data into a table? { #importing-data }\nOften, you need to put data that you obtained elsewhere into a table. Sometimes,\nthis is from Microsoft Excel or Google Sheets, sometimes it is from a dataset\non the web or from your experiment. Fortunately, Typst can load many [common\nfile formats]($category/data-loading), so you can use scripting to include their\ndata in a table.\n\nThe most common file format for tabular data is CSV. You can obtain a CSV file\nfrom Excel by choosing \"Save as\" in the _File_ menu and choosing the file format\n\"CSV UTF-8 (Comma-delimited) (.csv)\". Save the file and, if you are using the\nweb app, upload it to your project.\n\nIn our case, we will be building a table about Moore's Law. For this purpose, we\nare using a statistic with [how many transistors the average microprocessor\nconsists of per year from Our World in\nData](https://ourworldindata.org/grapher/transistors-per-microprocessor). Let's\nstart by pressing the \"Download\" button to get a CSV file with the raw data.\n\nBe sure to move the file to your project or somewhere Typst can see it, if you\nare using the CLI. Once you did that, we can open the file to see how it is\nstructured:\n\n```csv\nEntity,Code,Year,Transistors per microprocessor\nWorld,OWID_WRL,1971,2308.2417\nWorld,OWID_WRL,1972,3554.5222\nWorld,OWID_WRL,1974,6097.5625\n```\n\nThe file starts with a header and contains four columns: Entity (which is to\nwhom the metric applies), Code, the year, and the number of transistors per\nmicroprocessor. Only the last two columns change between each row, so we can\ndisregard \"Entity\" and \"Code\".\n\nFirst, let's start by loading this file with the [`csv`] function. It accepts\nthe file name of the file we want to load as a string argument:\n\n```typ\n#let moore = csv(\"moore.csv\")\n```\n\nWe have loaded our file (assuming we named it `moore.csv`) and [bound\nit]($scripting/#bindings) to the new variable `moore`. This will not produce any\noutput, so there's nothing to see yet. If we want to examine what Typst loaded,\nwe can either hover the name of the variable in the web app or print some items\nfrom the array:\n\n```example\n#let moore = csv(\"moore.csv\")\n\n#moore.slice(0, 3)\n```\n\nWith the arguments `{(0, 3)}`, the [`slice`]($array.slice) method returns the\nfirst three items in the array (with the indices 0, 1, and 2). We can see that\neach row is its own array with one item per cell.\n\nNow, let's write a loop that will transform this data into an array of cells\nthat we can use with the table function.\n\n```example\n#let moore = csv(\"moore.csv\")\n\n#table(\n  columns: 2,\n  ..for (.., year, count) in moore {\n    (year, count)\n  }\n)\n```\n\nThe example above uses a for loop that iterates over the rows in our CSV file\nand returns an array for each iteration. We use the for loop's\n[destructuring]($scripting/#bindings) capability to discard all but the last two\nitems of each row. We then create a new array with just these two. Because Typst\nwill concatenate the array results of all the loop iterations, we get a\none-dimensional array in which the year column and the number of transistors\nalternate. We can then insert the array as cells. For this we use the [spread\noperator]($arguments/#spreading) (`..`). By prefixing an array, or, in our case\nan expression that yields an array, with two dots, we tell Typst that the\narray's items should be used as positional arguments.\n\nAlternatively, we can also use the [`map`]($array.map), [`slice`]($array.slice),\nand [`flatten`]($array.flatten) array methods to write this in a more functional\nstyle:\n\n```typ\n#let moore = csv(\"moore.csv\")\n\n#table(\n   columns: moore.first().len(),\n   ..moore.map(m => m.slice(2)).flatten(),\n)\n```\n\nThis example renders the same as the previous one, but first uses the `map`\nfunction to change each row of the data. We pass a function to map that gets run\non each row of the CSV and returns a new value to replace that row with. We use\nit to discard the first two columns with `slice`. Then, we spread the data into\nthe `table` function. However, we need to pass a one-dimensional array and\n`moore`'s value is two-dimensional (that means that each of its row values\ncontains an array with the cell data). That's why we call `flatten` which\nconverts it to a one-dimensional array. We also extract the number of columns\nfrom the data itself.\n\nNow that we have nice code for our table, we should try to also make the table\nitself nice! The transistor counts go from millions in 1995 to trillions in 2021\nand changes are difficult to see with so many digits. We could try to present\nour data logarithmically to make it more digestible:\n\n```example\n#let moore = csv(\"moore.csv\")\n#let moore-log = moore.slice(1).map(m => {\n  let (.., year, count) = m\n  let log = calc.log(float(count))\n  let rounded = str(calc.round(log, digits: 2))\n  (year, rounded)\n})\n\n#show table.cell.where(x: 0): strong\n\n#table(\n   columns: moore-log.first().len(),\n   align: right,\n   fill: (_, y) => if calc.odd(y) { rgb(\"D7D9E0\") },\n   stroke: none,\n\n   table.header[Year][Transistor count ($log_10$)],\n   table.hline(stroke: rgb(\"4D4C5B\")),\n   ..moore-log.flatten(),\n)\n```\n\nIn this example, we first drop the header row from the data since we are adding\nour own. Then, we discard all but the last two columns as above. We do this by\n[destructuring]($scripting/#bindings) the array `m`, discarding all but the two\nlast items. We then convert the string in `count` to a floating point number,\ncalculate its logarithm and store it in the variable `log`. Finally, we round it\nto two digits, convert it to a string, and store it in the variable `rounded`.\nThen, we return an array with `year` and `rounded` that replaces the original\nrow. In our table, we have added our custom header that tells the reader that\nwe've applied a logarithm to the values. Then, we spread the flattened data as\nabove.\n\nWe also styled the table with [stripes](#fills), a\n[horizontal line](#individual-lines) below the first row, [aligned](#alignment)\neverything to the right, and emboldened the first column. Click on the links to\ngo to the relevant guide sections and see how it's done!\n\n## What if I need the table function for something that isn't a table? { #table-and-grid }\nTabular layouts of content can be useful not only for matrices of closely\nrelated data, like shown in the examples throughout this guide, but also for\npresentational purposes. Typst differentiates between grids that are for layout\nand presentational purposes only and tables, in which the arrangement of the\ncells itself conveys information.\n\nTo make this difference clear to other software and allow templates to heavily\nstyle tables, Typst has two functions for grid and table layout:\n\n- The [`table`] function explained throughout this guide which is intended for\n  tabular data.\n- The [`grid`] function which is intended for presentational purposes and page\n  layout.\n\nBoth elements work the same way and have the same arguments. You can apply\neverything you have learned about tables in this guide to grids. There are only\nthree differences:\n\n- You'll need to use the [`grid.cell`], [`grid.vline`], and [`grid.hline`]\n  elements instead of [`table.cell`], [`table.vline`], and [`table.hline`].\n- The grid has different defaults: It draws no strokes by default and has no\n  spacing (`inset`) inside of its cells.\n- Elements like `figure` do not react to grids since they are supposed to have\n  no semantical bearing on the document structure."

[guides.table-guide.description]
en = "Not sure how to change table strokes? Need to rotate a table? This guide\nexplains all you need to know about tables in Typst.\n"

[guides.table-guide.title]
en = "Table guide"

[guides.title]
en = "Guides"

[index.body]
en = "\n# Overview\nWelcome to Typst's documentation! Typst is a new markup-based typesetting system\nfor the sciences. It is designed to be an alternative both to advanced tools\nlike LaTeX and simpler tools like Word and Google Docs. Our goal with Typst is\nto build a typesetting tool that is highly capable _and_ a pleasure to use.\n\nThis documentation is split into two parts: A beginner-friendly tutorial that\nintroduces Typst through a practical use case and a comprehensive reference that\nexplains all of Typst's concepts and features.\n\nWe also invite you to join the community we're building around Typst. Typst is\nstill a very young project, so your feedback is more than valuable."

[index.description]
en = "Learn how to use Typst to compose documents faster. Get started with the\ntutorial, or dive into the reference.\n"

[index.title]
en = "Overview"

[reference.body]
en = "\n# Reference\nThis reference documentation is a comprehensive guide to all of Typst's syntax,\nconcepts, types, and functions. If you are completely new to Typst, we recommend\nstarting with the [tutorial] and then coming back to the reference to learn more\nabout Typst's features as you need them.\n\n## Language\nThe reference starts with a language part that gives an overview over\n[Typst's syntax]($syntax) and contains information about concepts involved in\n[styling documents,]($styling) using\n[Typst's scripting capabilities.]($scripting)\n\n## Functions\nThe second part includes chapters on all functions used to insert, style, transform,\nand layout content in Typst documents. Each function is documented with a\ndescription of its purpose, a list of its parameters, and examples of how to use\nit.\n\nThe final part of the reference explains all functions that are used within\nTypst's code mode to manipulate and transform data. Just as in the previous\npart, each function is documented with a description of its purpose, a list of\nits parameters, and examples of how to use it."

[reference.context.body]
en = "\n# Context\nSometimes, we want to create content that reacts to its location in the\ndocument. This could be a localized phrase that depends on the configured text\nlanguage or something as simple as a heading number which prints the right\nvalue based on how many headings came before it. However, Typst code isn't\ndirectly aware of its location in the document. Some code at the beginning of\nthe source text could yield content that ends up at the back of the document.\n\nTo produce content that is reactive to its surroundings, we must thus\nspecifically instruct Typst: We do this with the `{context}` keyword, which\nprecedes an expression and ensures that it is computed with knowledge of its\nenvironment. In return, the context expression itself ends up opaque. We cannot\ndirectly access whatever results from it in our code, precisely because it is\ncontextual: There is no one correct result, there may be multiple results in\ndifferent places of the document. For this reason, everything that depends on\nthe contextual data must happen inside of the context expression.\n\nAside from explicit context expressions, context is also established implicitly\nin some places that are also aware of their location in the document:\n[Show rules]($styling/#show-rules) provide context[^1] and numberings in the\noutline, for instance, also provide the proper context to resolve counters.\n\n## Style context\nWith set rules, we can adjust style properties for parts or the whole of our\ndocument. We cannot access these without a known context, as they may change\nthroughout the course of the document. When context is available, we can\nretrieve them simply by accessing them as fields on the respective element\nfunction.\n\n```example\n#set text(lang: \"de\")\n#context text.lang\n```\n\nAs explained above, a context expression is reactive to the different\nenvironments it is placed into. In the example below, we create a single context\nexpression, store it in the `value` variable and use it multiple times. Each use\nproperly reacts to the current surroundings.\n\n```example\n#let value = context text.lang\n#value\n\n#set text(lang: \"de\")\n#value\n\n#set text(lang: \"fr\")\n#value\n```\n\nCrucially, upon creation, `value` becomes opaque [content] that we cannot peek\ninto. It can only be resolved when placed somewhere because only then the\ncontext is known. The body of a context expression may be evaluated zero, one,\nor multiple times, depending on how many different places it is put into.\n\n## Location context\nWe've already seen that context gives us access to set rule values. But it can\ndo more: It also lets us know _where_ in the document we currently are, relative\nto other elements, and absolutely on the pages. We can use this information to\ncreate very flexible interactions between different document parts. This\nunderpins features like heading numbering, the table of contents, or page\nheaders dependent on section headings.\n\nSome functions like [`counter.get`]($counter.get) implicitly access the current\nlocation. In the example below, we want to retrieve the value of the heading\ncounter. Since it changes throughout the document, we need to first enter a\ncontext expression. Then, we use `get` to retrieve the counter's current value.\nThis function accesses the current location from the context to resolve the\ncounter value. Counters have multiple levels and `get` returns an array with the\nresolved numbers. Thus, we get the following result:\n\n```example\n#set heading(numbering: \"1.\")\n\n= Introduction\n#lorem(5)\n\n#context counter(heading).get()\n\n= Background\n#lorem(5)\n\n#context counter(heading).get()\n```\n\nFor more flexibility, we can also use the [`here`] function to directly extract\nthe current [location] from the context. The example below\ndemonstrates this:\n\n- We first have `{counter(heading).get()}`, which resolves to `{(2,)}` as\n  before.\n- We then use the more powerful  [`counter.at`] with [`here`], which in\n  combination is equivalent to `get`, and thus get `{(2,)}`.\n- Finally, we use `at` with a [label] to retrieve the value of the counter at a\n  _different_ location in the document, in our case that of the introduction\n  heading. This yields `{(1,)}`. Typst's context system gives us time travel\n  abilities and lets us retrieve the values of any counters and states at _any_\n  location in the document.\n\n```example\n#set heading(numbering: \"1.\")\n\n= Introduction <intro>\n#lorem(5)\n\n= Background <back>\n#lorem(5)\n\n#context [\n  #counter(heading).get() \\\n  #counter(heading).at(here()) \\\n  #counter(heading).at(<intro>)\n]\n```\n\nAs mentioned before, we can also use context to get the physical position of\nelements on the pages. We do this with the [`locate`] function, which works\nsimilarly to `counter.at`: It takes a location or other [selector] that resolves\nto a unique element (could also be a label) and returns the position on the\npages for that element.\n\n```example\nBackground is at: \\\n#context locate(<back>).position()\n\n= Introduction <intro>\n#lorem(5)\n#pagebreak()\n\n= Background <back>\n#lorem(5)\n```\n\nThere are other functions that make use of the location context, most\nprominently [`query`]. Take a look at the\n[introspection]($category/introspection) category for more details on those.\n\n## Nested contexts\nContext is also accessible from within function calls nested in context blocks.\nIn the example below, `foo` itself becomes a contextual function, just like\n[`to-absolute`]($length.to-absolute) is.\n\n```example\n#let foo() = 1em.to-absolute()\n#context {\n  foo() == text.size\n}\n```\n\nContext blocks can be nested. Contextual code will then always access the\ninnermost context. The example below demonstrates this: The first `text.lang`\nwill access the outer context block's styles and as such, it will **not**\nsee the effect of `{set text(lang: \"fr\")}`. The nested context block around the\nsecond `text.lang`, however, starts after the set rule and will thus show\nits effect.\n\n```example\n#set text(lang: \"de\")\n#context [\n  #set text(lang: \"fr\")\n  #text.lang \\\n  #context text.lang\n]\n```\n\nYou might wonder why Typst ignores the French set rule when computing the first\n`text.lang` in the example above. The reason is that, in the general case, Typst\ncannot know all the styles that will apply as set rules can be applied to\ncontent after it has been constructed. Below, `text.lang` is already computed\nwhen the template function is applied. As such, it cannot possibly be aware of\nthe language change to French in the template.\n\n```example\n#let template(body) = {\n  set text(lang: \"fr\")\n  upper(body)\n}\n\n#set text(lang: \"de\")\n#context [\n  #show: template\n  #text.lang \\\n  #context text.lang\n]\n```\n\nThe second `text.lang`, however, _does_ react to the language change because\nevaluation of its surrounding context block is deferred until the styles for it\nare known. This illustrates the importance of picking the right insertion point for a context to get access to precisely the right styles.\n\nThe same also holds true for the location context. Below, the first\n`{c.display()}` call will access the outer context block and will thus not see\nthe effect of `{c.update(2)}` while the second `{c.display()}` accesses the inner context and will thus see it.\n\n```example\n#let c = counter(\"mycounter\")\n#c.update(1)\n#context [\n  #c.update(2)\n  #c.display() \\\n  #context c.display()\n]\n```\n\n## Compiler iterations\nTo resolve contextual interactions, the Typst compiler processes your document\nmultiple times. For instance, to resolve a `locate` call, Typst first provides a\nplaceholder position, layouts your document and then recompiles with the known\nposition from the finished layout. The same approach is taken to resolve\ncounters, states, and queries. In certain cases, Typst may even need more than\ntwo iterations to resolve everything. While that's sometimes a necessity, it may\nalso be a sign of misuse of contextual functions (e.g. of\n[state]($state/#caution)). If Typst cannot resolve everything within five\nattempts, it will stop and output the warning \"layout did not converge within 5\nattempts.\"\n\nA very careful reader might have noticed that not all of the functions presented\nabove actually make use of the current location. While\n`{counter(heading).get()}` definitely depends on it,\n`{counter(heading).at(<intro>)}`, for instance, does not. However, it still\nrequires context. While its value is always the same _within_ one compilation\niteration, it may change over the course of multiple compiler iterations. If one\ncould call it directly at the top level of a module, the whole module and its\nexports could change over the course of multiple compiler iterations, which\nwould not be desirable.\n\n[^1]: Currently, all show rules provide styling context, but only show rules on\n      [locatable]($location/#locatable) elements provide a location context."

[reference.context.description]
en = "How to deal with content that reacts to its location in the document.\n"

[reference.context.title]
en = "Context"
zh = "上下文"

[reference.data-loading.cbor.cbor.decode.data.details]
en = "CBOR data."
zh = "CBOR 数据。"

[reference.data-loading.cbor.cbor.decode.deprecation]
en = "`cbor.decode` is deprecated, directly pass bytes to `cbor` instead"
zh = "`cbor.decode` 已弃用，请直接将字节传递给 `cbor`。"

[reference.data-loading.cbor.cbor.decode.details]
en = "Reads structured data from CBOR bytes."
zh = "从 CBOR 字节中读取结构化数据。"

[reference.data-loading.cbor.cbor.decode.oneliner]
en = "Reads structured data from CBOR bytes."
zh = "从 CBOR 字节中读取结构化数据。"

[reference.data-loading.cbor.cbor.decode.title]
en = "Decode CBOR"
zh = "解码 CBOR"

[reference.data-loading.cbor.cbor.details]
en = "Reads structured data from a CBOR file.\n\nThe file must contain a valid CBOR serialization. Mappings will be\nconverted into Typst dictionaries, and sequences will be converted into\nTypst arrays. Strings and booleans will be converted into the Typst\nequivalents, null-values (`null`, `~` or empty ``) will be converted into\n`{none}`, and numbers will be converted to floats or integers depending on\nwhether they are whole numbers.\n\nBe aware that integers larger than 2<sup>63</sup>-1 will be converted to\nfloating point numbers, which may result in an approximative value."
zh = "从 CBOR 文件中读取结构化数据。\n\n文件必须包含有效的 CBOR 序列化。映射将被转换为 Typst 字典，序列将被转换为 Typst 数组。字符串和布尔值将被转换为 Typst 等效值，空值（`null`、`~` 或空 ``）将被转换为 `{none}`，数字将根据是否为整数转换为浮点数或整数。\n\n请注意，大于 2<sup>63</sup>-1 的整数将被转换为浮点数，这可能会导致近似值。"

[reference.data-loading.cbor.cbor.encode.details]
en = "Encode structured data into CBOR bytes."
zh = "将结构化数据编码为 CBOR 字节。"

[reference.data-loading.cbor.cbor.encode.oneliner]
en = "Encode structured data into CBOR bytes."
zh = "将结构化数据编码为 CBOR 字节。"

[reference.data-loading.cbor.cbor.encode.title]
en = "Encode CBOR"
zh = "编码 CBOR"

[reference.data-loading.cbor.cbor.encode.value.details]
en = "Value to be encoded."
zh = "要编码的值。"

[reference.data-loading.cbor.cbor.oneliner]
en = "Reads structured data from a CBOR file."
zh = "从 CBOR 文件中读取结构化数据。"

[reference.data-loading.cbor.cbor.source.details]
en = "A [path]($syntax/#paths) to a CBOR file or raw CBOR bytes."
zh = "CBOR 文件的 [路径]($syntax/#paths) 或原始 CBOR 字节。"

[reference.data-loading.cbor.cbor.title]
en = "CBOR"
zh = "CBOR"

[reference.data-loading.cbor.description]
en = "Documentation for the `cbor` function."
zh = "`cbor` 函数的文档。"

[reference.data-loading.cbor.oneliner]
en = "Reads structured data from a CBOR file."
zh = "从 CBOR 文件中读取结构化数据。"

[reference.data-loading.cbor.title]
en = "CBOR"
zh = "CBOR"

[reference.data-loading.csv.csv.decode.data.details]
en = "CSV data."
zh = "CSV 数据。"

[reference.data-loading.csv.csv.decode.delimiter.details]
en = "The delimiter that separates columns in the CSV file.\nMust be a single ASCII character."
zh = "分隔 CSV 文件中列的分隔符。\n必须是单个 ASCII 字符。"

[reference.data-loading.csv.csv.decode.deprecation]
en = "`csv.decode` is deprecated, directly pass bytes to `csv` instead"
zh = "`csv.decode` 已弃用，请直接将字节传递给 `csv`。"

[reference.data-loading.csv.csv.decode.details]
en = "Reads structured data from a CSV string/bytes."
zh = "从 CSV 字符串/字节中读取结构化数据。"

[reference.data-loading.csv.csv.decode.oneliner]
en = "Reads structured data from a CSV string/bytes."
zh = "从 CSV 字符串/字节中读取结构化数据。"

[reference.data-loading.csv.csv.decode.row-type.details]
en = "How to represent the file's rows.\n\n- If set to `array`, each row is represented as a plain array of\n  strings.\n- If set to `dictionary`, each row is represented as a dictionary\n  mapping from header keys to strings. This option only makes sense\n  when a header row is present in the CSV file."
zh = "如何表示文件的行。\n\n- 如果设置为 `array`，每行表示为一个简单的字符串数组。\n- 如果设置为 `dictionary`，每行表示为一个字典，将标题键映射到字符串。这种选项仅在 CSV 文件中存在标题行时有意义。"

[reference.data-loading.csv.csv.decode.title]
en = "Decode CSV"
zh = "解码 CSV"

[reference.data-loading.csv.csv.delimiter.details]
en = "The delimiter that separates columns in the CSV file.\nMust be a single ASCII character."
zh = "分隔 CSV 文件中列的分隔符。\n必须是单个 ASCII 字符。"

[reference.data-loading.csv.csv.details]
en = "Reads structured data from a CSV file.\n\nThe CSV file will be read and parsed into a 2-dimensional array of strings:\nEach row in the CSV file will be represented as an array of strings, and all\nrows will be collected into a single array. Header rows will not be\nstripped.\n\n# Example\n```example\n#let results = csv(\"example.csv\")\n\n#table(\n  columns: 2,\n  [*Condition*], [*Result*],\n  ..results.flatten(),\n)\n```"
zh = "从 CSV 文件中读取结构化数据。\n\nCSV 文件将被读取并解析为二维字符串数组：\nCSV 文件中的每一行将表示为一个字符串数组，所有行将被收集到一个数组中。标题行不会被删除。\n\n# 示例\n```example\n#let results = csv(\"example.csv\")\n\n#table(\n  columns: 2,\n  [*Condition*], [*Result*],\n  ..results.flatten(),\n)\n```"

[reference.data-loading.csv.csv.oneliner]
en = "Reads structured data from a CSV file."
zh = "从 CSV 文件中读取结构化数据。"

[reference.data-loading.csv.csv.row-type.details]
en = "How to represent the file's rows.\n\n- If set to `array`, each row is represented as a plain array of\n  strings.\n- If set to `dictionary`, each row is represented as a dictionary\n  mapping from header keys to strings. This option only makes sense when\n  a header row is present in the CSV file."
zh = "如何表示文件的行。\n\n- 如果设置为 `array`，每行表示为一个简单的字符串数组。\n- 如果设置为 `dictionary`，每行表示为一个字典，将标题键映射到字符串。这种选项仅在 CSV 文件中存在标题行时有意义。"

[reference.data-loading.csv.csv.source.details]
en = "A [path]($syntax/#paths) to a CSV file or raw CSV bytes."
zh = "CSV 文件的 [路径]($syntax/#paths) 或原始 CSV 字节。"

[reference.data-loading.csv.csv.title]
en = "CSV"
zh = "CSV"

[reference.data-loading.csv.description]
en = "Documentation for the `csv` function."
zh = "`csv` 函数的文档。"

[reference.data-loading.csv.oneliner]
en = "Reads structured data from a CSV file."
zh = "从 CSV 文件中读取结构化数据。"

[reference.data-loading.csv.title]
en = "CSV"
zh = "CSV"

[reference.data-loading.data-loading.details]
en = "Data loading from external files.\n\nThese functions help you with loading and embedding data, for example from the\nresults of an experiment.\n"
zh = "从外部文件加载数据。\n\n这些函数可以帮助您加载和嵌入数据，例如实验结果中的数据。\n"

[reference.data-loading.data-loading.title]
en = "Data Loading"
zh = "数据加载"

[reference.data-loading.description]
en = "Documentation for functions related to Data Loading in Typst."
zh = "Typst 中与数据加载相关的函数文档。"

[reference.data-loading.json.description]
en = "Documentation for the `json` function."
zh = "`json` 函数的文档。"

[reference.data-loading.json.json.decode.data.details]
en = "JSON data."
zh = "JSON 数据。"

[reference.data-loading.json.json.decode.deprecation]
en = "`json.decode` is deprecated, directly pass bytes to `json` instead"
zh = "`json.decode` 已弃用，请直接将字节传递给 `json`。"

[reference.data-loading.json.json.decode.details]
en = "Reads structured data from a JSON string/bytes."
zh = "从 JSON 字符串/字节中读取结构化数据。"

[reference.data-loading.json.json.decode.oneliner]
en = "Reads structured data from a JSON string/bytes."
zh = "从 JSON 字符串/字节中读取结构化数据。"

[reference.data-loading.json.json.decode.title]
en = "Decode JSON"
zh = "解码 JSON"

[reference.data-loading.json.json.details]
en = "Reads structured data from a JSON file.\n\nThe file must contain a valid JSON value, such as object or array. JSON\nobjects will be converted into Typst dictionaries, and JSON arrays will be\nconverted into Typst arrays. Strings and booleans will be converted into the\nTypst equivalents, `null` will be converted into `{none}`, and numbers will\nbe converted to floats or integers depending on whether they are whole\nnumbers.\n\nBe aware that integers larger than 2<sup>63</sup>-1 will be converted to\nfloating point numbers, which may result in an approximative value.\n\nThe function returns a dictionary, an array or, depending on the JSON file,\nanother JSON data type.\n\nThe JSON files in the example contain objects with the keys `temperature`,\n`unit`, and `weather`.\n\n# Example\n```example\n#let forecast(day) = block[\n  #box(square(\n    width: 2cm,\n    inset: 8pt,\n    fill: if day.weather == \"sunny\" {\n      yellow\n    } else {\n      aqua\n    },\n    align(\n      bottom + right,\n      strong(day.weather),\n    ),\n  ))\n  #h(6pt)\n  #set text(22pt, baseline: -8pt)\n  #day.temperature °#day.unit\n]\n\n#forecast(json(\"monday.json\"))\n#forecast(json(\"tuesday.json\"))\n```"
zh = "从 JSON 文件中读取结构化数据。\n\n文件必须包含有效的 JSON 值，例如对象或数组。JSON 对象将被转换为 Typst 字典，JSON 数组将被转换为 Typst 数组。字符串和布尔值将被转换为 Typst 等效值，`null` 将被转换为 `{none}`，数字将根据是否为整数转换为浮点数或整数。\n\n请注意，大于 2<sup>63</sup>-1 的整数将被转换为浮点数，这可能会导致近似值。\n\n该函数返回一个字典、数组或其他 JSON 数据类型，具体取决于 JSON 文件。\n\n示例中的 JSON 文件包含键 `temperature`、`unit` 和 `weather` 的对象。\n\n# 示例\n```example\n#let forecast(day) = block[\n  #box(square(\n    width: 2cm,\n    inset: 8pt,\n    fill: if day.weather == \"sunny\" {\n      yellow\n    } else {\n      aqua\n    },\n    align(\n      bottom + right,\n      strong(day.weather),\n    ),\n  ))\n  #h(6pt)\n  #set text(22pt, baseline: -8pt)\n  #day.temperature °#day.unit\n]\n\n#forecast(json(\"monday.json\"))\n#forecast(json(\"tuesday.json\"))\n```"

[reference.data-loading.json.json.encode.details]
en = "Encodes structured data into a JSON string."
zh = "将结构化数据编码为 JSON 字符串。"

[reference.data-loading.json.json.encode.oneliner]
en = "Encodes structured data into a JSON string."
zh = "将结构化数据编码为 JSON 字符串。"

[reference.data-loading.json.json.encode.pretty.details]
en = "Whether to pretty print the JSON with newlines and indentation."
zh = "是否使用换行和缩进美化打印 JSON。"

[reference.data-loading.json.json.encode.title]
en = "Encode JSON"
zh = "编码 JSON"

[reference.data-loading.json.json.encode.value.details]
en = "Value to be encoded."
zh = "要编码的值。"

[reference.data-loading.json.json.oneliner]
en = "Reads structured data from a JSON file."
zh = "从 JSON 文件中读取结构化数据。"

[reference.data-loading.json.json.source.details]
en = "A [path]($syntax/#paths) to a JSON file or raw JSON bytes."
zh = "JSON 文件的 [路径]($syntax/#paths) 或原始 JSON 字节。"

[reference.data-loading.json.json.title]
en = "JSON"
zh = "JSON"

[reference.data-loading.json.oneliner]
en = "Reads structured data from a JSON file."
zh = "从 JSON 文件中读取结构化数据。"

[reference.data-loading.json.title]
en = "JSON"
zh = "JSON"

[reference.data-loading.read.description]
en = "Documentation for the `read` function."
zh = "`read` 函数的文档。"

[reference.data-loading.read.oneliner]
en = "Reads plain text or data from a file."
zh = "从文件中读取纯文本或数据。"

[reference.data-loading.read.read.details]
en = "Reads plain text or data from a file.\n\nBy default, the file will be read as UTF-8 and returned as a [string]($str).\n\nIf you specify `{encoding: none}`, this returns raw [bytes] instead.\n\n# Example\n```example\nAn example for a HTML file: \\\n#let text = read(\"example.html\")\n#raw(text, lang: \"html\")\n\nRaw bytes:\n#read(\"tiger.jpg\", encoding: none)\n```"
zh = "从文件中读取纯文本或数据。\n\n默认情况下，文件将以 UTF-8 读取并返回为 [字符串]($str)。\n\n如果指定 `{encoding: none}`，则返回原始 [字节]。\n\n# 示例\n```example\nHTML 文件示例： \\\n#let text = read(\"example.html\")\n#raw(text, lang: \"html\")\n\n原始字节：\n#read(\"tiger.jpg\", encoding: none)\n```"

[reference.data-loading.read.read.encoding.details]
en = "The encoding to read the file with.\n\nIf set to `{none}`, this function returns raw bytes."
zh = "读取文件的编码。\n\n如果设置为 `{none}`，此函数返回原始字节。"

[reference.data-loading.read.read.oneliner]
en = "Reads plain text or data from a file."
zh = "从文件中读取纯文本或数据。"

[reference.data-loading.read.read.path.details]
en = "Path to a file.\n\nFor more details, see the [Paths section]($syntax/#paths)."
zh = "文件路径。\n\n更多详情，请参见 [路径部分]($syntax/#paths)。"

[reference.data-loading.read.read.title]
en = "Read"
zh = "读取"

[reference.data-loading.read.title]
en = "Read"
zh = "读取"

[reference.data-loading.title]
en = "Data Loading"
zh = "数据加载"

[reference.data-loading.toml.description]
en = "Documentation for the `toml` function."
zh = "`toml` 函数的文档。"

[reference.data-loading.toml.oneliner]
en = "Reads structured data from a TOML file."
zh = "从 TOML 文件中读取结构化数据。"

[reference.data-loading.toml.title]
en = "TOML"
zh = "TOML"

[reference.data-loading.toml.toml.decode.data.details]
en = "TOML data."
zh = "TOML 数据。"

[reference.data-loading.toml.toml.decode.deprecation]
en = "`toml.decode` is deprecated, directly pass bytes to `toml` instead"
zh = "`toml.decode` 已弃用，请直接将字节传递给 `toml`。"

[reference.data-loading.toml.toml.decode.details]
en = "Reads structured data from a TOML string/bytes."
zh = "从 TOML 字符串/字节中读取结构化数据。"

[reference.data-loading.toml.toml.decode.oneliner]
en = "Reads structured data from a TOML string/bytes."
zh = "从 TOML 字符串/字节中读取结构化数据。"

[reference.data-loading.toml.toml.decode.title]
en = "Decode TOML"
zh = "解码 TOML"

[reference.data-loading.toml.toml.details]
en = "Reads structured data from a TOML file.\n\nThe file must contain a valid TOML table. TOML tables will be converted into\nTypst dictionaries, and TOML arrays will be converted into Typst arrays.\nStrings, booleans and datetimes will be converted into the Typst equivalents\nand numbers will be converted to floats or integers depending on whether\nthey are whole numbers.\n\nThe TOML file in the example consists of a table with the keys `title`,\n`version`, and `authors`.\n\n# Example\n```example\n#let details = toml(\"details.toml\")\n\nTitle: #details.title \\\nVersion: #details.version \\\nAuthors: #(details.authors\n  .join(\", \", last: \" and \"))\n```"
zh = "从 TOML 文件中读取结构化数据。\n\n文件必须包含有效的 TOML 表。TOML 表将被转换为 Typst 字典，TOML 数组将被转换为 Typst 数组。字符串、布尔值和日期时间将被转换为 Typst 等效值，数字将根据是否为整数转换为浮点数或整数。\n\n示例中的 TOML 文件包含 `title`、`version` 和 `authors` 键的表。\n\n# 示例\n```example\n#let details = toml(\"details.toml\")\n\nTitle: #details.title \\\nVersion: #details.version \\\nAuthors: #(details.authors\n  .join(\", \", last: \" and \"))\n```"

[reference.data-loading.toml.toml.encode.details]
en = "Encodes structured data into a TOML string."
zh = "将结构化数据编码为 TOML 字符串。"

[reference.data-loading.toml.toml.encode.oneliner]
en = "Encodes structured data into a TOML string."
zh = "将结构化数据编码为 TOML 字符串。"

[reference.data-loading.toml.toml.encode.pretty.details]
en = "Whether to pretty-print the resulting TOML."
zh = "是否美化打印生成的 TOML。"

[reference.data-loading.toml.toml.encode.title]
en = "Encode TOML"
zh = "编码 TOML"

[reference.data-loading.toml.toml.encode.value.details]
en = "Value to be encoded."
zh = "要编码的值。"

[reference.data-loading.toml.toml.oneliner]
en = "Reads structured data from a TOML file."
zh = "从 TOML 文件中读取结构化数据。"

[reference.data-loading.toml.toml.source.details]
en = "A [path]($syntax/#paths) to a TOML file or raw TOML bytes."
zh = "TOML 文件的 [路径]($syntax/#paths) 或原始 TOML 字节。"

[reference.data-loading.toml.toml.title]
en = "TOML"
zh = "TOML"

[reference.data-loading.xml.description]
en = "Documentation for the `xml` function."
zh = "`xml` 函数的文档。"

[reference.data-loading.xml.oneliner]
en = "Reads structured data from an XML file."
zh = "从 XML 文件中读取结构化数据。"

[reference.data-loading.xml.title]
en = "XML"
zh = "XML"

[reference.data-loading.xml.xml.decode.data.details]
en = "XML data."
zh = "XML 数据。"

[reference.data-loading.xml.xml.decode.deprecation]
en = "`xml.decode` is deprecated, directly pass bytes to `xml` instead"
zh = "`xml.decode` 已弃用，请直接将字节传递给 `xml`。"

[reference.data-loading.xml.xml.decode.details]
en = "Reads structured data from an XML string/bytes."
zh = "从 XML 字符串/字节中读取结构化数据。"

[reference.data-loading.xml.xml.decode.oneliner]
en = "Reads structured data from an XML string/bytes."
zh = "从 XML 字符串/字节中读取结构化数据。"

[reference.data-loading.xml.xml.decode.title]
en = "Decode XML"
zh = "解码 XML"

[reference.data-loading.xml.xml.details]
en = "Reads structured data from an XML file.\n\nThe XML file is parsed into an array of dictionaries and strings. XML nodes\ncan be elements or strings. Elements are represented as dictionaries with\nthe following keys:\n\n- `tag`: The name of the element as a string.\n- `attrs`: A dictionary of the element's attributes as strings.\n- `children`: An array of the element's child nodes.\n\nThe XML file in the example contains a root `news` tag with multiple\n`article` tags. Each article has a `title`, `author`, and `content` tag. The\n`content` tag contains one or more paragraphs, which are represented as `p`\ntags.\n\n# Example\n```example\n#let find-child(elem, tag) = {\n  elem.children\n    .find(e => \"tag\" in e and e.tag == tag)\n}\n\n#let article(elem) = {\n  let title = find-child(elem, \"title\")\n  let author = find-child(elem, \"author\")\n  let pars = find-child(elem, \"content\")\n\n  heading(title.children.first())\n  text(10pt, weight: \"medium\")[\n    Published by\n    #author.children.first()\n  ]\n\n  for p in pars.children {\n    if (type(p) == \"dictionary\") {\n      parbreak()\n      p.children.first()\n    }\n  }\n}\n\n#let data = xml(\"example.xml\")\n#for elem in data.first().children {\n  if (type(elem) == \"dictionary\") {\n    article(elem)\n  }\n}\n```"
zh = "从 XML 文件中读取结构化数据。\n\nXML 文件被解析为字典和字符串数组。XML 节点可以是元素或字符串。元素表示为具有以下键的字典：\n\n- `tag`：元素的名称，字符串类型。\n- `attrs`：元素属性的字典，字符串类型。\n- `children`：元素子节点的数组。\n\n示例中的 XML 文件包含一个根 `news` 标签，其中有多个 `article` 标签。每个文章都有一个 `title`、`author` 和 `content` 标签。`content` 标签包含一个或多个段落，表示为 `p` 标签。\n\n# 示例\n```example\n#let find-child(elem, tag) = {\n  elem.children\n    .find(e => \"tag\" in e and e.tag == tag)\n}\n\n#let article(elem) = {\n  let title = find-child(elem, \"title\")\n  let author = find-child(elem, \"author\")\n  let pars = find-child(elem, \"content\")\n\n  heading(title.children.first())\n  text(10pt, weight: \"medium\")[\n    Published by\n    #author.children.first()\n  ]\n\n  for p in pars.children {\n    if (type(p) == \"dictionary\") {\n      parbreak()\n      p.children.first()\n    }\n  }\n}\n\n#let data = xml(\"example.xml\")\n#for elem in data.first().children {\n  if (type(elem) == \"dictionary\") {\n    article(elem)\n  }\n}\n```"

[reference.data-loading.xml.xml.oneliner]
en = "Reads structured data from an XML file."
zh = "从 XML 文件中读取结构化数据。"

[reference.data-loading.xml.xml.source.details]
en = "A [path]($syntax/#paths) to an XML file or raw XML bytes."
zh = "XML 文件的 [路径]($syntax/#paths) 或原始 XML 字节。"

[reference.data-loading.xml.xml.title]
en = "XML"
zh = "XML"

[reference.data-loading.yaml.description]
en = "Documentation for the `yaml` function."
zh = "`yaml` 函数的文档。"

[reference.data-loading.yaml.oneliner]
en = "Reads structured data from a YAML file."
zh = "从 YAML 文件中读取结构化数据。"

[reference.data-loading.yaml.title]
en = "YAML"
zh = "YAML"

[reference.data-loading.yaml.yaml.decode.data.details]
en = "YAML data."
zh = "YAML 数据。"

[reference.data-loading.yaml.yaml.decode.deprecation]
en = "`yaml.decode` is deprecated, directly pass bytes to `yaml` instead"
zh = "`yaml.decode` 已弃用，请直接将字节传递给 `yaml`。"

[reference.data-loading.yaml.yaml.decode.details]
en = "Reads structured data from a YAML string/bytes."
zh = "从 YAML 字符串/字节中读取结构化数据。"

[reference.data-loading.yaml.yaml.decode.oneliner]
en = "Reads structured data from a YAML string/bytes."
zh = "从 YAML 字符串/字节中读取结构化数据。"

[reference.data-loading.yaml.yaml.decode.title]
en = "Decode YAML"
zh = "解码 YAML"

[reference.data-loading.yaml.yaml.details]
en = "Reads structured data from a YAML file.\n\nThe file must contain a valid YAML object or array. YAML mappings will be\nconverted into Typst dictionaries, and YAML sequences will be converted into\nTypst arrays. Strings and booleans will be converted into the Typst\nequivalents, null-values (`null`, `~` or empty ``) will be converted into\n`{none}`, and numbers will be converted to floats or integers depending on\nwhether they are whole numbers. Custom YAML tags are ignored, though the\nloaded value will still be present.\n\nBe aware that integers larger than 2<sup>63</sup>-1 will be converted to\nfloating point numbers, which may give an approximative value.\n\nThe YAML files in the example contain objects with authors as keys,\neach with a sequence of their own submapping with the keys\n\"title\" and \"published\"\n\n# Example\n```example\n#let bookshelf(contents) = {\n  for (author, works) in contents {\n    author\n    for work in works [\n      - #work.title (#work.published)\n    ]\n  }\n}\n\n#bookshelf(\n  yaml(\"scifi-authors.yaml\")\n)\n```"
zh = "从 YAML 文件中读取结构化数据。\n\n文件必须包含有效的 YAML 对象或数组。YAML 映射将被转换为 Typst 字典，YAML 序列将被转换为 Typst 数组。字符串和布尔值将被转换为 Typst 等效值，空值（`null`、`~` 或空 ``）将被转换为 `{none}`，数字将根据是否为整数转换为浮点数或整数。自定义 YAML 标签将被忽略，但加载的值仍然存在。\n\n请注意，大于 2<sup>63</sup>-1 的整数将被转换为浮点数，这可能会导致近似值。\n\n示例中的 YAML 文件包含以作者为键的对象，每个作者都有一个包含键 \"title\" 和 \"published\" 的子映射序列。\n\n# 示例\n```example\n#let bookshelf(contents) = {\n  for (author, works) in contents {\n    author\n    for work in works [\n      - #work.title (#work.published)\n    ]\n  }\n}\n\n#bookshelf(\n  yaml(\"scifi-authors.yaml\")\n)\n```"

[reference.data-loading.yaml.yaml.encode.details]
en = "Encode structured data into a YAML string."
zh = "将结构化数据编码为 YAML 字符串。"

[reference.data-loading.yaml.yaml.encode.oneliner]
en = "Encode structured data into a YAML string."
zh = "将结构化数据编码为 YAML 字符串。"

[reference.data-loading.yaml.yaml.encode.title]
en = "Encode YAML"
zh = "编码 YAML"

[reference.data-loading.yaml.yaml.encode.value.details]
en = "Value to be encoded."
zh = "要编码的值。"

[reference.data-loading.yaml.yaml.oneliner]
en = "Reads structured data from a YAML file."
zh = "从 YAML 文件中读取结构化数据。"

[reference.data-loading.yaml.yaml.source.details]
en = "A [path]($syntax/#paths) to a YAML file or raw YAML bytes."
zh = "YAML 文件的 [路径]($syntax/#paths) 或原始 YAML 字节。"

[reference.data-loading.yaml.yaml.title]
en = "YAML"
zh = "YAML"

[reference.description]
en = "The Typst reference is a systematic and comprehensive guide to the Typst\ntypesetting language.\n"

[reference.foundations.arguments.arguments.arguments.arguments.details]
en = "The arguments to construct."

[reference.foundations.arguments.arguments.arguments.details]
en = "Construct spreadable arguments in place.\n\nThis function behaves like `{let args(..sink) = sink}`.\n\n"

[reference.foundations.arguments.arguments.arguments.oneliner]
en = "Construct spreadable arguments in place."

[reference.foundations.arguments.arguments.arguments.title]
en = "Construct"

[reference.foundations.arguments.arguments.at.default.details]
en = "A default value to return if the key is invalid."

[reference.foundations.arguments.arguments.at.details]
en = "Returns the positional argument at the specified index, or the named\nargument with the specified name.\n\nIf the key is an [integer]($int), this is equivalent to first calling\n[`pos`]($arguments.pos) and then [`array.at`]. If it is a [string]($str),\nthis is equivalent to first calling [`named`]($arguments.named) and then\n[`dictionary.at`]."

[reference.foundations.arguments.arguments.at.key.details]
en = "The index or name of the argument to get."

[reference.foundations.arguments.arguments.at.oneliner]
en = "Returns the positional argument at the specified index, or the named"

[reference.foundations.arguments.arguments.at.title]
en = "At"

[reference.foundations.arguments.arguments.details]
en = "Captured arguments to a function.\n\n# Argument Sinks\nLike built-in functions, custom functions can also take a variable number of\narguments. You can specify an _argument sink_ which collects all excess\narguments as `..sink`. The resulting `sink` value is of the `arguments`\ntype. It exposes methods to access the positional and named arguments.\n\n```example\n#let format(title, ..authors) = {\n  let by = authors\n    .pos()\n    .join(\", \", last: \" and \")\n\n  [*#title* \\ _Written by #by;_]\n}\n\n#format(\"ArtosFlow\", \"Jane\", \"Joe\")\n```\n\n# Spreading\nInversely to an argument sink, you can _spread_ arguments, arrays and\ndictionaries into a function call with the `..spread` operator:\n\n```example\n#let array = (2, 3, 5)\n#calc.min(..array)\n#let dict = (fill: blue)\n#text(..dict)[Hello]\n```"

[reference.foundations.arguments.arguments.named.details]
en = "Returns the captured named arguments as a dictionary."

[reference.foundations.arguments.arguments.named.oneliner]
en = "Returns the captured named arguments as a dictionary."

[reference.foundations.arguments.arguments.named.title]
en = "Named"

[reference.foundations.arguments.arguments.oneliner]
en = "Captured arguments to a function."

[reference.foundations.arguments.arguments.pos.details]
en = "Returns the captured positional arguments as an array."

[reference.foundations.arguments.arguments.pos.oneliner]
en = "Returns the captured positional arguments as an array."

[reference.foundations.arguments.arguments.pos.title]
en = "Positional"

[reference.foundations.arguments.arguments.title]
en = "Arguments"

[reference.foundations.arguments.description]
en = "Documentation for the Arguments type."

[reference.foundations.arguments.oneliner]
en = "Captured arguments to a function."

[reference.foundations.arguments.title]
en = "Arguments"

[reference.foundations.array.array.all.details]
en = "Whether the given function returns `{true}` for all items in the array."

[reference.foundations.array.array.all.oneliner]
en = "Whether the given function returns `{true}` for all items in the array."

[reference.foundations.array.array.all.test.details]
en = "The function to apply to each item. Must return a boolean."

[reference.foundations.array.array.all.title]
en = "All"

[reference.foundations.array.array.any.details]
en = "Whether the given function returns `{true}` for any item in the array."

[reference.foundations.array.array.any.oneliner]
en = "Whether the given function returns `{true}` for any item in the array."

[reference.foundations.array.array.any.test.details]
en = "The function to apply to each item. Must return a boolean."

[reference.foundations.array.array.any.title]
en = "Any"

[reference.foundations.array.array.array.details]
en = "Converts a value to an array.\n\nNote that this function is only intended for conversion of a collection-like\nvalue to an array, not for creation of an array from individual items. Use\nthe array syntax `(1, 2, 3)` (or `(1,)` for a single-element array) instead.\n\n"

[reference.foundations.array.array.array.oneliner]
en = "Converts a value to an array."

[reference.foundations.array.array.array.title]
en = "Construct"

[reference.foundations.array.array.array.value.details]
en = "The value that should be converted to an array."

[reference.foundations.array.array.at.default.details]
en = "A default value to return if the index is out of bounds."

[reference.foundations.array.array.at.details]
en = "Returns the item at the specified index in the array. May be used on the\nleft-hand side of an assignment. Returns the default value if the index\nis out of bounds or fails with an error if no default value was\nspecified."

[reference.foundations.array.array.at.index.details]
en = "The index at which to retrieve the item. If negative, indexes from\nthe back."

[reference.foundations.array.array.at.oneliner]
en = "Returns the item at the specified index in the array. May be used on the"

[reference.foundations.array.array.at.title]
en = "At"

[reference.foundations.array.array.chunks.chunk-size.details]
en = "How many elements each chunk may at most contain."

[reference.foundations.array.array.chunks.details]
en = "Splits an array into non-overlapping chunks, starting at the beginning,\nending with a single remainder chunk.\n\nAll chunks but the last have `chunk-size` elements.\nIf `exact` is set to `{true}`, the remainder is dropped if it\ncontains less than `chunk-size` elements.\n\n"

[reference.foundations.array.array.chunks.exact.details]
en = "Whether to keep the remainder if its size is less than `chunk-size`."

[reference.foundations.array.array.chunks.oneliner]
en = "Splits an array into non-overlapping chunks, starting at the beginning,"

[reference.foundations.array.array.chunks.title]
en = "Chunks"

[reference.foundations.array.array.contains.details]
en = "Whether the array contains the specified value.\n\nThis method also has dedicated syntax: You can write `{2 in (1, 2, 3)}`\ninstead of `{(1, 2, 3).contains(2)}`."

[reference.foundations.array.array.contains.oneliner]
en = "Whether the array contains the specified value."

[reference.foundations.array.array.contains.title]
en = "Contains"

[reference.foundations.array.array.contains.value.details]
en = "The value to search for."

[reference.foundations.array.array.dedup.details]
en = "Deduplicates all items in the array.\n\nReturns a new array with all duplicate items removed. Only the first\nelement of each duplicate is kept.\n\n"

[reference.foundations.array.array.dedup.key.details]
en = "If given, applies this function to the elements in the array to\ndetermine the keys to deduplicate by."

[reference.foundations.array.array.dedup.oneliner]
en = "Deduplicates all items in the array."

[reference.foundations.array.array.dedup.title]
en = "Deduplicate"

[reference.foundations.array.array.details]
en = "A sequence of values.\n\nYou can construct an array by enclosing a comma-separated sequence of values\nin parentheses. The values do not have to be of the same type.\n\nYou can access and update array items with the `.at()` method. Indices are\nzero-based and negative indices wrap around to the end of the array. You can\niterate over an array using a [for loop]($scripting/#loops). Arrays can be\nadded together with the `+` operator, [joined together]($scripting/#blocks)\nand multiplied with integers.\n\n**Note:** An array of length one needs a trailing comma, as in `{(1,)}`.\nThis is to disambiguate from a simple parenthesized expressions like `{(1 +\n2) * 3}`. An empty array is written as `{()}`.\n\n# Example\n```example\n#let values = (1, 7, 4, -3, 2)\n\n#values.at(0) \\\n#(values.at(0) = 3)\n#values.at(-1) \\\n#values.find(calc.even) \\\n#values.filter(calc.odd) \\\n#values.map(calc.abs) \\\n#values.rev() \\\n#(1, (2, 3)).flatten() \\\n#((\"A\", \"B\", \"C\")\n    .join(\", \", last: \" and \"))\n```"

[reference.foundations.array.array.enumerate.details]
en = "Returns a new array with the values alongside their indices.\n\nThe returned array consists of `(index, value)` pairs in the form of\nlength-2 arrays. These can be [destructured]($scripting/#bindings) with\na let binding or for loop."

[reference.foundations.array.array.enumerate.oneliner]
en = "Returns a new array with the values alongside their indices."

[reference.foundations.array.array.enumerate.start.details]
en = "The index returned for the first pair of the returned list."

[reference.foundations.array.array.enumerate.title]
en = "Enumerate"

[reference.foundations.array.array.filter.details]
en = "Produces a new array with only the items from the original one for which\nthe given function returns true."

[reference.foundations.array.array.filter.oneliner]
en = "Produces a new array with only the items from the original one for which"

[reference.foundations.array.array.filter.test.details]
en = "The function to apply to each item. Must return a boolean."

[reference.foundations.array.array.filter.title]
en = "Filter"

[reference.foundations.array.array.find.details]
en = "Searches for an item for which the given function returns `{true}` and\nreturns the first match or `{none}` if there is no match."

[reference.foundations.array.array.find.oneliner]
en = "Searches for an item for which the given function returns `{true}` and"

[reference.foundations.array.array.find.searcher.details]
en = "The function to apply to each item. Must return a boolean."

[reference.foundations.array.array.find.title]
en = "Find"

[reference.foundations.array.array.first.details]
en = "Returns the first item in the array. May be used on the left-hand side\nof an assignment. Fails with an error if the array is empty."

[reference.foundations.array.array.first.oneliner]
en = "Returns the first item in the array. May be used on the left-hand side"

[reference.foundations.array.array.first.title]
en = "First"

[reference.foundations.array.array.flatten.details]
en = "Combine all nested arrays into a single flat one."

[reference.foundations.array.array.flatten.oneliner]
en = "Combine all nested arrays into a single flat one."

[reference.foundations.array.array.flatten.title]
en = "Flatten"

[reference.foundations.array.array.fold.details]
en = "Folds all items into a single value using an accumulator function."

[reference.foundations.array.array.fold.folder.details]
en = "The folding function. Must have two parameters: One for the\naccumulated value and one for an item."

[reference.foundations.array.array.fold.init.details]
en = "The initial value to start with."

[reference.foundations.array.array.fold.oneliner]
en = "Folds all items into a single value using an accumulator function."

[reference.foundations.array.array.fold.title]
en = "Fold"

[reference.foundations.array.array.insert.details]
en = "Inserts a value into the array at the specified index, shifting all\nsubsequent elements to the right. Fails with an error if the index is\nout of bounds.\n\nTo replace an element of an array, use [`at`]($array.at)."

[reference.foundations.array.array.insert.index.details]
en = "The index at which to insert the item. If negative, indexes from\nthe back."

[reference.foundations.array.array.insert.oneliner]
en = "Inserts a value into the array at the specified index, shifting all"

[reference.foundations.array.array.insert.title]
en = "Insert"

[reference.foundations.array.array.insert.value.details]
en = "The value to insert into the array."

[reference.foundations.array.array.intersperse.details]
en = "Returns an array with a copy of the separator value placed between\nadjacent elements."

[reference.foundations.array.array.intersperse.oneliner]
en = "Returns an array with a copy of the separator value placed between"

[reference.foundations.array.array.intersperse.separator.details]
en = "The value that will be placed between each adjacent element."

[reference.foundations.array.array.intersperse.title]
en = "Intersperse"

[reference.foundations.array.array.join.details]
en = "Combine all items in the array into one."

[reference.foundations.array.array.join.last.details]
en = "An alternative separator between the last two items."

[reference.foundations.array.array.join.oneliner]
en = "Combine all items in the array into one."

[reference.foundations.array.array.join.separator.details]
en = "A value to insert between each item of the array."

[reference.foundations.array.array.join.title]
en = "Join"

[reference.foundations.array.array.last.details]
en = "Returns the last item in the array. May be used on the left-hand side of\nan assignment. Fails with an error if the array is empty."

[reference.foundations.array.array.last.oneliner]
en = "Returns the last item in the array. May be used on the left-hand side of"

[reference.foundations.array.array.last.title]
en = "Last"

[reference.foundations.array.array.len.details]
en = "The number of values in the array."

[reference.foundations.array.array.len.oneliner]
en = "The number of values in the array."

[reference.foundations.array.array.len.title]
en = "Length"

[reference.foundations.array.array.map.details]
en = "Produces a new array in which all items from the original one were\ntransformed with the given function."

[reference.foundations.array.array.map.mapper.details]
en = "The function to apply to each item."

[reference.foundations.array.array.map.oneliner]
en = "Produces a new array in which all items from the original one were"

[reference.foundations.array.array.map.title]
en = "Map"

[reference.foundations.array.array.oneliner]
en = "A sequence of values."

[reference.foundations.array.array.pop.details]
en = "Removes the last item from the array and returns it. Fails with an error\nif the array is empty."

[reference.foundations.array.array.pop.oneliner]
en = "Removes the last item from the array and returns it. Fails with an error"

[reference.foundations.array.array.pop.title]
en = "Pop"

[reference.foundations.array.array.position.details]
en = "Searches for an item for which the given function returns `{true}` and\nreturns the index of the first match or `{none}` if there is no match."

[reference.foundations.array.array.position.oneliner]
en = "Searches for an item for which the given function returns `{true}` and"

[reference.foundations.array.array.position.searcher.details]
en = "The function to apply to each item. Must return a boolean."

[reference.foundations.array.array.position.title]
en = "Position"

[reference.foundations.array.array.product.default.details]
en = "What to return if the array is empty. Must be set if the array can\nbe empty."

[reference.foundations.array.array.product.details]
en = "Calculates the product all items (works for all types that can be\nmultiplied)."

[reference.foundations.array.array.product.oneliner]
en = "Calculates the product all items (works for all types that can be"

[reference.foundations.array.array.product.title]
en = "Product"

[reference.foundations.array.array.push.details]
en = "Adds a value to the end of the array."

[reference.foundations.array.array.push.oneliner]
en = "Adds a value to the end of the array."

[reference.foundations.array.array.push.title]
en = "Push"

[reference.foundations.array.array.push.value.details]
en = "The value to insert at the end of the array."

[reference.foundations.array.array.range.details]
en = "Create an array consisting of a sequence of numbers.\n\nIf you pass just one positional parameter, it is interpreted as the\n`end` of the range. If you pass two, they describe the `start` and `end`\nof the range.\n\nThis function is available both in the array function's scope and\nglobally.\n\n"

[reference.foundations.array.array.range.end.details]
en = "The end of the range (exclusive)."

[reference.foundations.array.array.range.oneliner]
en = "Create an array consisting of a sequence of numbers."

[reference.foundations.array.array.range.start.details]
en = "The start of the range (inclusive)."

[reference.foundations.array.array.range.step.details]
en = "The distance between the generated numbers."

[reference.foundations.array.array.range.title]
en = "Range"

[reference.foundations.array.array.reduce.details]
en = "Reduces the elements to a single one, by repeatedly applying a reducing\noperation.\n\nIf the array is empty, returns `{none}`, otherwise, returns the result\nof the reduction.\n\nThe reducing function is a closure with two arguments: an \"accumulator\",\nand an element.\n\nFor arrays with at least one element, this is the same as [`array.fold`]\nwith the first element of the array as the initial accumulator value,\nfolding every subsequent element into it."

[reference.foundations.array.array.reduce.oneliner]
en = "Reduces the elements to a single one, by repeatedly applying a reducing"

[reference.foundations.array.array.reduce.reducer.details]
en = "The reducing function. Must have two parameters: One for the\naccumulated value and one for an item."

[reference.foundations.array.array.reduce.title]
en = "Reduce"

[reference.foundations.array.array.remove.default.details]
en = "A default value to return if the index is out of bounds."

[reference.foundations.array.array.remove.details]
en = "Removes the value at the specified index from the array and return it."

[reference.foundations.array.array.remove.index.details]
en = "The index at which to remove the item. If negative, indexes from\nthe back."

[reference.foundations.array.array.remove.oneliner]
en = "Removes the value at the specified index from the array and return it."

[reference.foundations.array.array.remove.title]
en = "Remove"

[reference.foundations.array.array.rev.details]
en = "Return a new array with the same items, but in reverse order."

[reference.foundations.array.array.rev.oneliner]
en = "Return a new array with the same items, but in reverse order."

[reference.foundations.array.array.rev.title]
en = "Reverse"

[reference.foundations.array.array.slice.count.details]
en = "The number of items to extract. This is equivalent to passing\n`start + count` as the `end` position. Mutually exclusive with `end`."

[reference.foundations.array.array.slice.details]
en = "Extracts a subslice of the array. Fails with an error if the start or end\nindex is out of bounds."

[reference.foundations.array.array.slice.end.details]
en = "The end index (exclusive). If omitted, the whole slice until the end\nof the array is extracted. If negative, indexes from the back."

[reference.foundations.array.array.slice.oneliner]
en = "Extracts a subslice of the array. Fails with an error if the start or end"

[reference.foundations.array.array.slice.start.details]
en = "The start index (inclusive). If negative, indexes from the back."

[reference.foundations.array.array.slice.title]
en = "Slice"

[reference.foundations.array.array.sorted.details]
en = "Return a sorted version of this array, optionally by a given key\nfunction. The sorting algorithm used is stable.\n\nReturns an error if two values could not be compared or if the key\nfunction (if given) yields an error.\n\nTo sort according to multiple criteria at once, e.g. in case of equality\nbetween some criteria, the key function can return an array. The results\nare in lexicographic order.\n\n"

[reference.foundations.array.array.sorted.key.details]
en = "If given, applies this function to the elements in the array to\ndetermine the keys to sort by."

[reference.foundations.array.array.sorted.oneliner]
en = "Return a sorted version of this array, optionally by a given key"

[reference.foundations.array.array.sorted.title]
en = "Sorted"

[reference.foundations.array.array.split.at.details]
en = "The value to split at."

[reference.foundations.array.array.split.details]
en = "Split the array at occurrences of the specified value."

[reference.foundations.array.array.split.oneliner]
en = "Split the array at occurrences of the specified value."

[reference.foundations.array.array.split.title]
en = "Split"

[reference.foundations.array.array.sum.default.details]
en = "What to return if the array is empty. Must be set if the array can\nbe empty."

[reference.foundations.array.array.sum.details]
en = "Sums all items (works for all types that can be added)."

[reference.foundations.array.array.sum.oneliner]
en = "Sums all items (works for all types that can be added)."

[reference.foundations.array.array.sum.title]
en = "Sum"

[reference.foundations.array.array.title]
en = "Array"

[reference.foundations.array.array.to-dict.details]
en = "Converts an array of pairs into a dictionary.\nThe first value of each pair is the key, the second the value.\n\nIf the same key occurs multiple times, the last value is selected.\n\n"

[reference.foundations.array.array.to-dict.oneliner]
en = "Converts an array of pairs into a dictionary."

[reference.foundations.array.array.to-dict.title]
en = "To Dict"

[reference.foundations.array.array.windows.details]
en = "Returns sliding windows of `window-size` elements over an array.\n\nIf the array length is less than `window-size`, this will return an empty array.\n\n"

[reference.foundations.array.array.windows.oneliner]
en = "Returns sliding windows of `window-size` elements over an array."

[reference.foundations.array.array.windows.title]
en = "Windows"

[reference.foundations.array.array.windows.window-size.details]
en = "How many elements each window will contain."

[reference.foundations.array.array.zip.details]
en = "Zips the array with other arrays.\n\nReturns an array of arrays, where the `i`th inner array contains all the\n`i`th elements from each original array.\n\nIf the arrays to be zipped have different lengths, they are zipped up to\nthe last element of the shortest array and all remaining elements are\nignored.\n\nThis function is variadic, meaning that you can zip multiple arrays\ntogether at once: `{(1, 2).zip((\"A\", \"B\"), (10, 20))}` yields\n`{((1, \"A\", 10), (2, \"B\", 20))}`."

[reference.foundations.array.array.zip.exact.details]
en = "Whether all arrays have to have the same length.\nFor example, `{(1, 2).zip((1, 2, 3), exact: true)}` produces an\nerror."

[reference.foundations.array.array.zip.oneliner]
en = "Zips the array with other arrays."

[reference.foundations.array.array.zip.others.details]
en = "The arrays to zip with."

[reference.foundations.array.array.zip.title]
en = "Zip"

[reference.foundations.array.description]
en = "Documentation for the Array type."

[reference.foundations.array.oneliner]
en = "A sequence of values."

[reference.foundations.array.title]
en = "Array"

[reference.foundations.assert.assert.condition.details]
en = "The condition that must be true for the assertion to pass."

[reference.foundations.assert.assert.details]
en = "Ensures that a condition is fulfilled.\n\nFails with an error if the condition is not fulfilled. Does not\nproduce any output in the document.\n\nIf you wish to test equality between two values, see\n[`assert.eq`]($assert.eq) and [`assert.ne`]($assert.ne).\n\n# Example\n```typ\n#assert(1 < 2, message: \"math broke\")\n```"

[reference.foundations.assert.assert.eq.details]
en = "Ensures that two values are equal.\n\nFails with an error if the first value is not equal to the second. Does not\nproduce any output in the document.\n\n"

[reference.foundations.assert.assert.eq.left.details]
en = "The first value to compare."

[reference.foundations.assert.assert.eq.message.details]
en = "An optional message to display on error instead of the representations\nof the compared values."

[reference.foundations.assert.assert.eq.oneliner]
en = "Ensures that two values are equal."

[reference.foundations.assert.assert.eq.right.details]
en = "The second value to compare."

[reference.foundations.assert.assert.eq.title]
en = "Assert Equal"

[reference.foundations.assert.assert.message.details]
en = "The error message when the assertion fails."

[reference.foundations.assert.assert.ne.details]
en = "Ensures that two values are not equal.\n\nFails with an error if the first value is equal to the second. Does not\nproduce any output in the document.\n\n"

[reference.foundations.assert.assert.ne.left.details]
en = "The first value to compare."

[reference.foundations.assert.assert.ne.message.details]
en = "An optional message to display on error instead of the representations\nof the compared values."

[reference.foundations.assert.assert.ne.oneliner]
en = "Ensures that two values are not equal."

[reference.foundations.assert.assert.ne.right.details]
en = "The second value to compare."

[reference.foundations.assert.assert.ne.title]
en = "Assert Not Equal"

[reference.foundations.assert.assert.oneliner]
en = "Ensures that a condition is fulfilled."

[reference.foundations.assert.assert.title]
en = "Assert"

[reference.foundations.assert.description]
en = "Documentation for the `assert` function."

[reference.foundations.assert.oneliner]
en = "Ensures that a condition is fulfilled."

[reference.foundations.assert.title]
en = "Assert"

[reference.foundations.auto.auto.details]
en = "A value that indicates a smart default.\n\nThe auto type has exactly one value: `{auto}`.\n\nParameters that support the `{auto}` value have some smart default or\ncontextual behaviour. A good example is the [text direction]($text.dir)\nparameter. Setting it to `{auto}` lets Typst automatically determine the\ndirection from the [text language]($text.lang)."

[reference.foundations.auto.auto.oneliner]
en = "A value that indicates a smart default."

[reference.foundations.auto.auto.title]
en = "Auto"

[reference.foundations.auto.description]
en = "Documentation for the Auto type."

[reference.foundations.auto.oneliner]
en = "A value that indicates a smart default."

[reference.foundations.auto.title]
en = "Auto"

[reference.foundations.bool.bool.details]
en = "A type with two states.\n\nThe boolean type has two values: `{true}` and `{false}`. It denotes whether\nsomething is active or enabled.\n\n# Example\n```example\n#false \\\n#true \\\n#(1 < 2)\n```"

[reference.foundations.bool.bool.oneliner]
en = "A type with two states."

[reference.foundations.bool.bool.title]
en = "Boolean"

[reference.foundations.bool.description]
en = "Documentation for the Boolean type."

[reference.foundations.bool.oneliner]
en = "A type with two states."

[reference.foundations.bool.title]
en = "Boolean"

[reference.foundations.bytes.bytes.at.default.details]
en = "A default value to return if the index is out of bounds."

[reference.foundations.bytes.bytes.at.details]
en = "Returns the byte at the specified index. Returns the default value if\nthe index is out of bounds or fails with an error if no default value\nwas specified."

[reference.foundations.bytes.bytes.at.index.details]
en = "The index at which to retrieve the byte."

[reference.foundations.bytes.bytes.at.oneliner]
en = "Returns the byte at the specified index. Returns the default value if"

[reference.foundations.bytes.bytes.at.title]
en = "At"

[reference.foundations.bytes.bytes.bytes.details]
en = "Converts a value to bytes.\n\n- Strings are encoded in UTF-8.\n- Arrays of integers between `{0}` and `{255}` are converted directly. The\n  dedicated byte representation is much more efficient than the array\n  representation and thus typically used for large byte buffers (e.g. image\n  data).\n\n"

[reference.foundations.bytes.bytes.bytes.oneliner]
en = "Converts a value to bytes."

[reference.foundations.bytes.bytes.bytes.title]
en = "Construct"

[reference.foundations.bytes.bytes.bytes.value.details]
en = "The value that should be converted to bytes."

[reference.foundations.bytes.bytes.details]
en = "A sequence of bytes.\n\nThis is conceptually similar to an array of [integers]($int) between `{0}`\nand `{255}`, but represented much more efficiently. You can iterate over it\nusing a [for loop]($scripting/#loops).\n\nYou can convert\n- a [string]($str) or an [array] of integers to bytes with the [`bytes`]\n  constructor\n- bytes to a string with the [`str`] constructor, with UTF-8 encoding\n- bytes to an array of integers with the [`array`] constructor\n\nWhen [reading]($read) data from a file, you can decide whether to load it\nas a string or as raw bytes.\n\n```example\n#bytes((123, 160, 22, 0)) \\\n#bytes(\"Hello 😃\")\n\n#let data = read(\n  \"rhino.png\",\n  encoding: none,\n)\n\n// Magic bytes.\n#array(data.slice(0, 4)) \\\n#str(data.slice(1, 4))\n```"

[reference.foundations.bytes.bytes.len.details]
en = "The length in bytes."

[reference.foundations.bytes.bytes.len.oneliner]
en = "The length in bytes."

[reference.foundations.bytes.bytes.len.title]
en = "Length"

[reference.foundations.bytes.bytes.oneliner]
en = "A sequence of bytes."

[reference.foundations.bytes.bytes.slice.count.details]
en = "The number of items to extract. This is equivalent to passing\n`start + count` as the `end` position. Mutually exclusive with\n`end`."

[reference.foundations.bytes.bytes.slice.details]
en = "Extracts a subslice of the bytes. Fails with an error if the start or\nend index is out of bounds."

[reference.foundations.bytes.bytes.slice.end.details]
en = "The end index (exclusive). If omitted, the whole slice until the end\nis extracted."

[reference.foundations.bytes.bytes.slice.oneliner]
en = "Extracts a subslice of the bytes. Fails with an error if the start or"

[reference.foundations.bytes.bytes.slice.start.details]
en = "The start index (inclusive)."

[reference.foundations.bytes.bytes.slice.title]
en = "Slice"

[reference.foundations.bytes.bytes.title]
en = "Bytes"

[reference.foundations.bytes.description]
en = "Documentation for the Bytes type."

[reference.foundations.bytes.oneliner]
en = "A sequence of bytes."

[reference.foundations.bytes.title]
en = "Bytes"

[reference.foundations.calc.calc.abs.details]
en = "Calculates the absolute value of a numeric value.\n\n"

[reference.foundations.calc.calc.abs.oneliner]
en = "Calculates the absolute value of a numeric value."

[reference.foundations.calc.calc.abs.title]
en = "Absolute"

[reference.foundations.calc.calc.abs.value.details]
en = "The value whose absolute value to calculate."

[reference.foundations.calc.calc.acos.details]
en = "Calculates the arccosine of a number.\n\n"

[reference.foundations.calc.calc.acos.oneliner]
en = "Calculates the arccosine of a number."

[reference.foundations.calc.calc.acos.title]
en = "Arccosine"

[reference.foundations.calc.calc.acos.value.details]
en = "The number whose arcsine to calculate. Must be between -1 and 1."

[reference.foundations.calc.calc.asin.details]
en = "Calculates the arcsine of a number.\n\n"

[reference.foundations.calc.calc.asin.oneliner]
en = "Calculates the arcsine of a number."

[reference.foundations.calc.calc.asin.title]
en = "Arcsine"

[reference.foundations.calc.calc.asin.value.details]
en = "The number whose arcsine to calculate. Must be between -1 and 1."

[reference.foundations.calc.calc.atan.details]
en = "Calculates the arctangent of a number.\n\n"

[reference.foundations.calc.calc.atan.oneliner]
en = "Calculates the arctangent of a number."

[reference.foundations.calc.calc.atan.title]
en = "Arctangent"

[reference.foundations.calc.calc.atan.value.details]
en = "The number whose arctangent to calculate."

[reference.foundations.calc.calc.atan2.details]
en = "Calculates the four-quadrant arctangent of a coordinate.\n\nThe arguments are `(x, y)`, not `(y, x)`.\n\n"

[reference.foundations.calc.calc.atan2.oneliner]
en = "Calculates the four-quadrant arctangent of a coordinate."

[reference.foundations.calc.calc.atan2.title]
en = "Four-quadrant Arctangent"

[reference.foundations.calc.calc.atan2.x.details]
en = "The X coordinate."

[reference.foundations.calc.calc.atan2.y.details]
en = "The Y coordinate."

[reference.foundations.calc.calc.binom.details]
en = "Calculates a binomial coefficient.\n\nReturns the `k`-combination of `n`, or the number of ways to choose `k`\nitems from a set of `n` without regard to order.\n\n"

[reference.foundations.calc.calc.binom.k.details]
en = "The lower coefficient. Must be non-negative."

[reference.foundations.calc.calc.binom.n.details]
en = "The upper coefficient. Must be non-negative."

[reference.foundations.calc.calc.binom.oneliner]
en = "Calculates a binomial coefficient."

[reference.foundations.calc.calc.binom.title]
en = "Binomial"

[reference.foundations.calc.calc.ceil.details]
en = "Rounds a number up to the nearest integer.\n\nIf the number is already an integer, it is returned unchanged.\n\nNote that this function will always return an [integer]($int), and will\nerror if the resulting [`float`] or [`decimal`] is larger than the maximum\n64-bit signed integer or smaller than the minimum for that type.\n\n"

[reference.foundations.calc.calc.ceil.oneliner]
en = "Rounds a number up to the nearest integer."

[reference.foundations.calc.calc.ceil.title]
en = "Ceil"

[reference.foundations.calc.calc.ceil.value.details]
en = "The number to round up."

[reference.foundations.calc.calc.clamp.details]
en = "Clamps a number between a minimum and maximum value.\n\n"

[reference.foundations.calc.calc.clamp.max.details]
en = "The inclusive maximum value."

[reference.foundations.calc.calc.clamp.min.details]
en = "The inclusive minimum value."

[reference.foundations.calc.calc.clamp.oneliner]
en = "Clamps a number between a minimum and maximum value."

[reference.foundations.calc.calc.clamp.title]
en = "Clamp"

[reference.foundations.calc.calc.clamp.value.details]
en = "The number to clamp."

[reference.foundations.calc.calc.cos.angle.details]
en = "The angle whose cosine to calculate."

[reference.foundations.calc.calc.cos.details]
en = "Calculates the cosine of an angle.\n\nWhen called with an integer or a float, they will be interpreted as\nradians.\n\n"

[reference.foundations.calc.calc.cos.oneliner]
en = "Calculates the cosine of an angle."

[reference.foundations.calc.calc.cos.title]
en = "Cosine"

[reference.foundations.calc.calc.cosh.details]
en = "Calculates the hyperbolic cosine of a hyperbolic angle.\n\n"

[reference.foundations.calc.calc.cosh.oneliner]
en = "Calculates the hyperbolic cosine of a hyperbolic angle."

[reference.foundations.calc.calc.cosh.title]
en = "Hyperbolic Cosine"

[reference.foundations.calc.calc.cosh.value.details]
en = "The hyperbolic angle whose hyperbolic cosine to calculate."

[reference.foundations.calc.calc.details]
en = "Module for calculations and processing of numeric values.\n\nThese definitions are part of the `calc` module and not imported by default.\nIn addition to the functions listed below, the `calc` module also defines\nthe constants `pi`, `tau`, `e`, and `inf`.\n"

[reference.foundations.calc.calc.div-euclid.details]
en = "Performs euclidean division of two numbers.\n\nThe result of this computation is that of a division rounded to the integer\n`{n}` such that the dividend is greater than or equal to `{n}` times the divisor.\n\n"

[reference.foundations.calc.calc.div-euclid.dividend.details]
en = "The dividend of the division."

[reference.foundations.calc.calc.div-euclid.divisor.details]
en = "The divisor of the division."

[reference.foundations.calc.calc.div-euclid.oneliner]
en = "Performs euclidean division of two numbers."

[reference.foundations.calc.calc.div-euclid.title]
en = "Euclidean Division"

[reference.foundations.calc.calc.even.details]
en = "Determines whether an integer is even.\n\n"

[reference.foundations.calc.calc.even.oneliner]
en = "Determines whether an integer is even."

[reference.foundations.calc.calc.even.title]
en = "Even"

[reference.foundations.calc.calc.even.value.details]
en = "The number to check for evenness."

[reference.foundations.calc.calc.exp.details]
en = "Raises a value to some exponent of e.\n\n"

[reference.foundations.calc.calc.exp.exponent.details]
en = "The exponent of the power."

[reference.foundations.calc.calc.exp.oneliner]
en = "Raises a value to some exponent of e."

[reference.foundations.calc.calc.exp.title]
en = "Exponential"

[reference.foundations.calc.calc.fact.details]
en = "Calculates the factorial of a number.\n\n"

[reference.foundations.calc.calc.fact.number.details]
en = "The number whose factorial to calculate. Must be non-negative."

[reference.foundations.calc.calc.fact.oneliner]
en = "Calculates the factorial of a number."

[reference.foundations.calc.calc.fact.title]
en = "Factorial"

[reference.foundations.calc.calc.floor.details]
en = "Rounds a number down to the nearest integer.\n\nIf the number is already an integer, it is returned unchanged.\n\nNote that this function will always return an [integer]($int), and will\nerror if the resulting [`float`] or [`decimal`] is larger than the maximum\n64-bit signed integer or smaller than the minimum for that type.\n\n"

[reference.foundations.calc.calc.floor.oneliner]
en = "Rounds a number down to the nearest integer."

[reference.foundations.calc.calc.floor.title]
en = "Floor"

[reference.foundations.calc.calc.floor.value.details]
en = "The number to round down."

[reference.foundations.calc.calc.fract.details]
en = "Returns the fractional part of a number.\n\nIf the number is an integer, returns `0`.\n\n"

[reference.foundations.calc.calc.fract.oneliner]
en = "Returns the fractional part of a number."

[reference.foundations.calc.calc.fract.title]
en = "Fractional"

[reference.foundations.calc.calc.fract.value.details]
en = "The number to truncate."

[reference.foundations.calc.calc.gcd.a.details]
en = "The first integer."

[reference.foundations.calc.calc.gcd.b.details]
en = "The second integer."

[reference.foundations.calc.calc.gcd.details]
en = "Calculates the greatest common divisor of two integers.\n\n"

[reference.foundations.calc.calc.gcd.oneliner]
en = "Calculates the greatest common divisor of two integers."

[reference.foundations.calc.calc.gcd.title]
en = "Greatest Common Divisor"

[reference.foundations.calc.calc.lcm.a.details]
en = "The first integer."

[reference.foundations.calc.calc.lcm.b.details]
en = "The second integer."

[reference.foundations.calc.calc.lcm.details]
en = "Calculates the least common multiple of two integers.\n\n"

[reference.foundations.calc.calc.lcm.oneliner]
en = "Calculates the least common multiple of two integers."

[reference.foundations.calc.calc.lcm.title]
en = "Least Common Multiple"

[reference.foundations.calc.calc.ln.details]
en = "Calculates the natural logarithm of a number.\n\n"

[reference.foundations.calc.calc.ln.oneliner]
en = "Calculates the natural logarithm of a number."

[reference.foundations.calc.calc.ln.title]
en = "Natural Logarithm"

[reference.foundations.calc.calc.ln.value.details]
en = "The number whose logarithm to calculate. Must be strictly positive."

[reference.foundations.calc.calc.log.base.details]
en = "The base of the logarithm. May not be zero."

[reference.foundations.calc.calc.log.details]
en = "Calculates the logarithm of a number.\n\nIf the base is not specified, the logarithm is calculated in base 10.\n\n"

[reference.foundations.calc.calc.log.oneliner]
en = "Calculates the logarithm of a number."

[reference.foundations.calc.calc.log.title]
en = "Logarithm"

[reference.foundations.calc.calc.log.value.details]
en = "The number whose logarithm to calculate. Must be strictly positive."

[reference.foundations.calc.calc.max.details]
en = "Determines the maximum of a sequence of values.\n\n"

[reference.foundations.calc.calc.max.oneliner]
en = "Determines the maximum of a sequence of values."

[reference.foundations.calc.calc.max.title]
en = "Maximum"

[reference.foundations.calc.calc.max.values.details]
en = "The sequence of values from which to extract the maximum.\nMust not be empty."

[reference.foundations.calc.calc.min.details]
en = "Determines the minimum of a sequence of values.\n\n"

[reference.foundations.calc.calc.min.oneliner]
en = "Determines the minimum of a sequence of values."

[reference.foundations.calc.calc.min.title]
en = "Minimum"

[reference.foundations.calc.calc.min.values.details]
en = "The sequence of values from which to extract the minimum.\nMust not be empty."

[reference.foundations.calc.calc.norm.details]
en = "Calculates the p-norm of a sequence of values.\n\n"

[reference.foundations.calc.calc.norm.oneliner]
en = "Calculates the p-norm of a sequence of values."

[reference.foundations.calc.calc.norm.p.details]
en = "The p value to calculate the p-norm of."

[reference.foundations.calc.calc.norm.title]
en = "𝑝-Norm"

[reference.foundations.calc.calc.norm.values.details]
en = "The sequence of values from which to calculate the p-norm.\nReturns `0.0` if empty."

[reference.foundations.calc.calc.odd.details]
en = "Determines whether an integer is odd.\n\n"

[reference.foundations.calc.calc.odd.oneliner]
en = "Determines whether an integer is odd."

[reference.foundations.calc.calc.odd.title]
en = "Odd"

[reference.foundations.calc.calc.odd.value.details]
en = "The number to check for oddness."

[reference.foundations.calc.calc.perm.base.details]
en = "The base number. Must be non-negative."

[reference.foundations.calc.calc.perm.details]
en = "Calculates a permutation.\n\nReturns the `k`-permutation of `n`, or the number of ways to choose `k`\nitems from a set of `n` with regard to order.\n\n"

[reference.foundations.calc.calc.perm.numbers.details]
en = "The number of permutations. Must be non-negative."

[reference.foundations.calc.calc.perm.oneliner]
en = "Calculates a permutation."

[reference.foundations.calc.calc.perm.title]
en = "Permutation"

[reference.foundations.calc.calc.pow.base.details]
en = "The base of the power.\n\nIf this is a [`decimal`], the exponent can only be an [integer]($int)."

[reference.foundations.calc.calc.pow.details]
en = "Raises a value to some exponent.\n\n"

[reference.foundations.calc.calc.pow.exponent.details]
en = "The exponent of the power."

[reference.foundations.calc.calc.pow.oneliner]
en = "Raises a value to some exponent."

[reference.foundations.calc.calc.pow.title]
en = "Power"

[reference.foundations.calc.calc.quo.details]
en = "Calculates the quotient (floored division) of two numbers.\n\nNote that this function will always return an [integer]($int), and will\nerror if the resulting [`float`] or [`decimal`] is larger than the maximum\n64-bit signed integer or smaller than the minimum for that type.\n\n"

[reference.foundations.calc.calc.quo.dividend.details]
en = "The dividend of the quotient."

[reference.foundations.calc.calc.quo.divisor.details]
en = "The divisor of the quotient."

[reference.foundations.calc.calc.quo.oneliner]
en = "Calculates the quotient (floored division) of two numbers."

[reference.foundations.calc.calc.quo.title]
en = "Quotient"

[reference.foundations.calc.calc.rem-euclid.details]
en = "This calculates the least nonnegative remainder of a division.\n\nWarning: Due to a floating point round-off error, the remainder may equal\nthe absolute value of the divisor if the dividend is much smaller in\nmagnitude than the divisor and the dividend is negative. This only applies\nfor floating point inputs.\n\nIn addition, this can error if given a [`decimal`] input and the dividend is\ntoo small in magnitude compared to the divisor.\n\n"

[reference.foundations.calc.calc.rem-euclid.dividend.details]
en = "The dividend of the remainder."

[reference.foundations.calc.calc.rem-euclid.divisor.details]
en = "The divisor of the remainder."

[reference.foundations.calc.calc.rem-euclid.oneliner]
en = "This calculates the least nonnegative remainder of a division."

[reference.foundations.calc.calc.rem-euclid.title]
en = "Euclidean Remainder"

[reference.foundations.calc.calc.rem.details]
en = "Calculates the remainder of two numbers.\n\nThe value `calc.rem(x, y)` always has the same sign as `x`, and is smaller\nin magnitude than `y`.\n\nThis can error if given a [`decimal`] input and the dividend is too small in\nmagnitude compared to the divisor.\n\n"

[reference.foundations.calc.calc.rem.dividend.details]
en = "The dividend of the remainder."

[reference.foundations.calc.calc.rem.divisor.details]
en = "The divisor of the remainder."

[reference.foundations.calc.calc.rem.oneliner]
en = "Calculates the remainder of two numbers."

[reference.foundations.calc.calc.rem.title]
en = "Remainder"

[reference.foundations.calc.calc.root.details]
en = "Calculates the real nth root of a number.\n\nIf the number is negative, then n must be odd.\n\n"

[reference.foundations.calc.calc.root.index.details]
en = "Which root of the radicand to take"

[reference.foundations.calc.calc.root.oneliner]
en = "Calculates the real nth root of a number."

[reference.foundations.calc.calc.root.radicand.details]
en = "The expression to take the root of"

[reference.foundations.calc.calc.root.title]
en = "Root"

[reference.foundations.calc.calc.round.details]
en = "Rounds a number to the nearest integer away from zero.\n\nOptionally, a number of decimal places can be specified.\n\nIf the number of digits is negative, its absolute value will indicate the\namount of significant integer digits to remove before the decimal point.\n\nNote that this function will return the same type as the operand. That is,\napplying `round` to a [`float`] will return a `float`, and to a [`decimal`],\nanother `decimal`. You may explicitly convert the output of this function to\nan integer with [`int`], but note that such a conversion will error if the\n`float` or `decimal` is larger than the maximum 64-bit signed integer or\nsmaller than the minimum integer.\n\nIn addition, this function can error if there is an attempt to round beyond\nthe maximum or minimum integer or `decimal`. If the number is a `float`,\nsuch an attempt will cause `{float.inf}` or `{-float.inf}` to be returned\nfor maximum and minimum respectively.\n\n"

[reference.foundations.calc.calc.round.digits.details]
en = "If positive, the number of decimal places.\n\nIf negative, the number of significant integer digits that should be\nremoved before the decimal point."

[reference.foundations.calc.calc.round.oneliner]
en = "Rounds a number to the nearest integer away from zero."

[reference.foundations.calc.calc.round.title]
en = "Round"

[reference.foundations.calc.calc.round.value.details]
en = "The number to round."

[reference.foundations.calc.calc.sin.angle.details]
en = "The angle whose sine to calculate."

[reference.foundations.calc.calc.sin.details]
en = "Calculates the sine of an angle.\n\nWhen called with an integer or a float, they will be interpreted as\nradians.\n\n"

[reference.foundations.calc.calc.sin.oneliner]
en = "Calculates the sine of an angle."

[reference.foundations.calc.calc.sin.title]
en = "Sine"

[reference.foundations.calc.calc.sinh.details]
en = "Calculates the hyperbolic sine of a hyperbolic angle.\n\n"

[reference.foundations.calc.calc.sinh.oneliner]
en = "Calculates the hyperbolic sine of a hyperbolic angle."

[reference.foundations.calc.calc.sinh.title]
en = "Hyperbolic Sine"

[reference.foundations.calc.calc.sinh.value.details]
en = "The hyperbolic angle whose hyperbolic sine to calculate."

[reference.foundations.calc.calc.sqrt.details]
en = "Calculates the square root of a number.\n\n"

[reference.foundations.calc.calc.sqrt.oneliner]
en = "Calculates the square root of a number."

[reference.foundations.calc.calc.sqrt.title]
en = "Square Root"

[reference.foundations.calc.calc.sqrt.value.details]
en = "The number whose square root to calculate. Must be non-negative."

[reference.foundations.calc.calc.tan.angle.details]
en = "The angle whose tangent to calculate."

[reference.foundations.calc.calc.tan.details]
en = "Calculates the tangent of an angle.\n\nWhen called with an integer or a float, they will be interpreted as\nradians.\n\n"

[reference.foundations.calc.calc.tan.oneliner]
en = "Calculates the tangent of an angle."

[reference.foundations.calc.calc.tan.title]
en = "Tangent"

[reference.foundations.calc.calc.tanh.details]
en = "Calculates the hyperbolic tangent of an hyperbolic angle.\n\n"

[reference.foundations.calc.calc.tanh.oneliner]
en = "Calculates the hyperbolic tangent of an hyperbolic angle."

[reference.foundations.calc.calc.tanh.title]
en = "Hyperbolic Tangent"

[reference.foundations.calc.calc.tanh.value.details]
en = "The hyperbolic angle whose hyperbolic tangent to calculate."

[reference.foundations.calc.calc.title]
en = "Calculation"

[reference.foundations.calc.calc.trunc.details]
en = "Returns the integer part of a number.\n\nIf the number is already an integer, it is returned unchanged.\n\nNote that this function will always return an [integer]($int), and will\nerror if the resulting [`float`] or [`decimal`] is larger than the maximum\n64-bit signed integer or smaller than the minimum for that type.\n\n"

[reference.foundations.calc.calc.trunc.oneliner]
en = "Returns the integer part of a number."

[reference.foundations.calc.calc.trunc.title]
en = "Truncate"

[reference.foundations.calc.calc.trunc.value.details]
en = "The number to truncate."

[reference.foundations.calc.description]
en = "Documentation for the calc functions."

[reference.foundations.calc.oneliner]
en = "Module for calculations and processing of numeric values."

[reference.foundations.calc.title]
en = "Calculation"

[reference.foundations.content.content.at.default.details]
en = "A default value to return if the field does not exist."

[reference.foundations.content.content.at.details]
en = "Access the specified field on the content. Returns the default value if\nthe field does not exist or fails with an error if no default value was\nspecified."

[reference.foundations.content.content.at.field.details]
en = "The field to access."

[reference.foundations.content.content.at.oneliner]
en = "Access the specified field on the content. Returns the default value if"

[reference.foundations.content.content.at.title]
en = "At"

[reference.foundations.content.content.details]
en = "A piece of document content.\n\nThis type is at the heart of Typst. All markup you write and most\n[functions]($function) you call produce content values. You can create a\ncontent value by enclosing markup in square brackets. This is also how you\npass content to functions.\n\n# Example\n```example\nType of *Hello!* is\n#type([*Hello!*])\n```\n\nContent can be added with the `+` operator,\n[joined together]($scripting/#blocks) and multiplied with integers. Wherever\ncontent is expected, you can also pass a [string]($str) or `{none}`.\n\n# Representation\nContent consists of elements with fields. When constructing an element with\nits _element function,_ you provide these fields as arguments and when you\nhave a content value, you can access its fields with [field access\nsyntax]($scripting/#field-access).\n\nSome fields are required: These must be provided when constructing an\nelement and as a consequence, they are always available through field access\non content of that type. Required fields are marked as such in the\ndocumentation.\n\nMost fields are optional: Like required fields, they can be passed to the\nelement function to configure them for a single element. However, these can\nalso be configured with [set rules]($styling/#set-rules) to apply them to\nall elements within a scope. Optional fields are only available with field\naccess syntax when they were explicitly passed to the element function, not\nwhen they result from a set rule.\n\nEach element has a default appearance. However, you can also completely\ncustomize its appearance with a [show rule]($styling/#show-rules). The show\nrule is passed the element. It can access the element's field and produce\narbitrary content from it.\n\nIn the web app, you can hover over a content variable to see exactly which\nelements the content is composed of and what fields they have.\nAlternatively, you can inspect the output of the [`repr`] function."

[reference.foundations.content.content.fields.details]
en = "Returns the fields of this content.\n\n"

[reference.foundations.content.content.fields.oneliner]
en = "Returns the fields of this content."

[reference.foundations.content.content.fields.title]
en = "Fields"

[reference.foundations.content.content.func.details]
en = "The content's element function. This function can be used to create the element\ncontained in this content. It can be used in set and show rules for the\nelement. Can be compared with global functions to check whether you have\na specific\nkind of element."

[reference.foundations.content.content.func.oneliner]
en = "The content's element function. This function can be used to create the element"

[reference.foundations.content.content.func.title]
en = "Func"

[reference.foundations.content.content.has.details]
en = "Whether the content has the specified field."

[reference.foundations.content.content.has.field.details]
en = "The field to look for."

[reference.foundations.content.content.has.oneliner]
en = "Whether the content has the specified field."

[reference.foundations.content.content.has.title]
en = "Has"

[reference.foundations.content.content.location.details]
en = "The location of the content. This is only available on content returned\nby [query] or provided by a [show rule]($reference/styling/#show-rules),\nfor other content it will be `{none}`. The resulting location can be\nused with [counters]($counter), [state] and [queries]($query)."

[reference.foundations.content.content.location.oneliner]
en = "The location of the content. This is only available on content returned"

[reference.foundations.content.content.location.title]
en = "Location"

[reference.foundations.content.content.oneliner]
en = "A piece of document content."

[reference.foundations.content.content.title]
en = "Content"

[reference.foundations.content.description]
en = "Documentation for the Content type."

[reference.foundations.content.oneliner]
en = "A piece of document content."

[reference.foundations.content.title]
en = "Content"

[reference.foundations.datetime.datetime.datetime.day.details]
en = "The day of the datetime."

[reference.foundations.datetime.datetime.datetime.details]
en = "Creates a new datetime.\n\nYou can specify the [datetime] using a year, month, day, hour, minute,\nand second.\n\n_Note_: Depending on which components of the datetime you specify, Typst\nwill store it in one of the following three ways:\n* If you specify year, month and day, Typst will store just a date.\n* If you specify hour, minute and second, Typst will store just a time.\n* If you specify all of year, month, day, hour, minute and second, Typst\n  will store a full datetime.\n\nDepending on how it is stored, the [`display`]($datetime.display) method\nwill choose a different formatting by default.\n\n"

[reference.foundations.datetime.datetime.datetime.hour.details]
en = "The hour of the datetime."

[reference.foundations.datetime.datetime.datetime.minute.details]
en = "The minute of the datetime."

[reference.foundations.datetime.datetime.datetime.month.details]
en = "The month of the datetime."

[reference.foundations.datetime.datetime.datetime.oneliner]
en = "Creates a new datetime."

[reference.foundations.datetime.datetime.datetime.second.details]
en = "The second of the datetime."

[reference.foundations.datetime.datetime.datetime.title]
en = "Construct"

[reference.foundations.datetime.datetime.datetime.year.details]
en = "The year of the datetime."

[reference.foundations.datetime.datetime.day.details]
en = "The day if it was specified, or `{none}` for times without a date."

[reference.foundations.datetime.datetime.day.oneliner]
en = "The day if it was specified, or `{none}` for times without a date."

[reference.foundations.datetime.datetime.day.title]
en = "Day"

[reference.foundations.datetime.datetime.details]
en = "Represents a date, a time, or a combination of both.\n\nCan be created by either specifying a custom datetime using this type's\nconstructor function or getting the current date with\n[`datetime.today`]($datetime.today).\n\n# Example\n```example\n#let date = datetime(\n  year: 2020,\n  month: 10,\n  day: 4,\n)\n\n#date.display() \\\n#date.display(\n  \"y:[year repr:last_two]\"\n)\n\n#let time = datetime(\n  hour: 18,\n  minute: 2,\n  second: 23,\n)\n\n#time.display() \\\n#time.display(\n  \"h:[hour repr:12][period]\"\n)\n```\n\n# Datetime and Duration\nYou can get a [duration] by subtracting two datetime:\n```example\n#let first-of-march = datetime(day: 1, month: 3, year: 2024)\n#let first-of-jan = datetime(day: 1, month: 1, year: 2024)\n#let distance = first-of-march - first-of-jan\n#distance.hours()\n```\n\nYou can also add/subtract a datetime and a duration to retrieve a new,\noffset datetime:\n```example\n#let date = datetime(day: 1, month: 3, year: 2024)\n#let two-days = duration(days: 2)\n#let two-days-earlier = date - two-days\n#let two-days-later = date + two-days\n\n#date.display() \\\n#two-days-earlier.display() \\\n#two-days-later.display()\n```\n\n# Format\nYou can specify a customized formatting using the\n[`display`]($datetime.display) method. The format of a datetime is\nspecified by providing _components_ with a specified number of _modifiers_.\nA component represents a certain part of the datetime that you want to\ndisplay, and with the help of modifiers you can define how you want to\ndisplay that component. In order to display a component, you wrap the name\nof the component in square brackets (e.g. `[[year]]` will display the year).\nIn order to add modifiers, you add a space after the component name followed\nby the name of the modifier, a colon and the value of the modifier (e.g.\n`[[month repr:short]]` will display the short representation of the month).\n\nThe possible combination of components and their respective modifiers is as\nfollows:\n\n- `year`: Displays the year of the datetime.\n  - `padding`: Can be either `zero`, `space` or `none`. Specifies how the\n    year is padded.\n  - `repr` Can be either `full` in which case the full year is displayed or\n    `last_two` in which case only the last two digits are displayed.\n  - `sign`: Can be either `automatic` or `mandatory`. Specifies when the\n    sign should be displayed.\n- `month`: Displays the month of the datetime.\n  - `padding`: Can be either `zero`, `space` or `none`. Specifies how the\n    month is padded.\n  - `repr`: Can be either `numerical`, `long` or `short`. Specifies if the\n    month should be displayed as a number or a word. Unfortunately, when\n    choosing the word representation, it can currently only display the\n    English version. In the future, it is planned to support localization.\n- `day`: Displays the day of the datetime.\n  - `padding`: Can be either `zero`, `space` or `none`. Specifies how the\n    day is padded.\n- `week_number`: Displays the week number of the datetime.\n  - `padding`: Can be either `zero`, `space` or `none`. Specifies how the\n    week number is padded.\n  - `repr`: Can be either `ISO`, `sunday` or `monday`. In the case of `ISO`,\n     week numbers are between 1 and 53, while the other ones are between 0\n     and 53.\n- `weekday`: Displays the weekday of the date.\n  - `repr` Can be either `long`, `short`, `sunday` or `monday`. In the case\n    of `long` and `short`, the corresponding English name will be displayed\n    (same as for the month, other languages are currently not supported). In\n    the case of `sunday` and `monday`, the numerical value will be displayed\n    (assuming Sunday and Monday as the first day of the week, respectively).\n  - `one_indexed`: Can be either `true` or `false`. Defines whether the\n    numerical representation of the week starts with 0 or 1.\n- `hour`: Displays the hour of the date.\n  - `padding`: Can be either `zero`, `space` or `none`. Specifies how the\n    hour is padded.\n  - `repr`: Can be either `24` or `12`. Changes whether the hour is\n    displayed in the 24-hour or 12-hour format.\n- `period`: The AM/PM part of the hour\n  - `case`: Can be `lower` to display it in lower case and `upper` to\n    display it in upper case.\n- `minute`: Displays the minute of the date.\n  - `padding`: Can be either `zero`, `space` or `none`. Specifies how the\n    minute is padded.\n- `second`: Displays the second of the date.\n  - `padding`: Can be either `zero`, `space` or `none`. Specifies how the\n    second is padded.\n\nKeep in mind that not always all components can be used. For example, if you\ncreate a new datetime with `{datetime(year: 2023, month: 10, day: 13)}`, it\nwill be stored as a plain date internally, meaning that you cannot use\ncomponents such as `hour` or `minute`, which would only work on datetimes\nthat have a specified time."

[reference.foundations.datetime.datetime.display.details]
en = "Displays the datetime in a specified format.\n\nDepending on whether you have defined just a date, a time or both, the\ndefault format will be different. If you specified a date, it will be\n`[[year]-[month]-[day]]`. If you specified a time, it will be\n`[[hour]:[minute]:[second]]`. In the case of a datetime, it will be\n`[[year]-[month]-[day] [hour]:[minute]:[second]]`.\n\nSee the [format syntax]($datetime/#format) for more information."

[reference.foundations.datetime.datetime.display.oneliner]
en = "Displays the datetime in a specified format."

[reference.foundations.datetime.datetime.display.pattern.details]
en = "The format used to display the datetime."

[reference.foundations.datetime.datetime.display.title]
en = "Display"

[reference.foundations.datetime.datetime.hour.details]
en = "The hour if it was specified, or `{none}` for dates without a time."

[reference.foundations.datetime.datetime.hour.oneliner]
en = "The hour if it was specified, or `{none}` for dates without a time."

[reference.foundations.datetime.datetime.hour.title]
en = "Hour"

[reference.foundations.datetime.datetime.minute.details]
en = "The minute if it was specified, or `{none}` for dates without a time."

[reference.foundations.datetime.datetime.minute.oneliner]
en = "The minute if it was specified, or `{none}` for dates without a time."

[reference.foundations.datetime.datetime.minute.title]
en = "Minute"

[reference.foundations.datetime.datetime.month.details]
en = "The month if it was specified, or `{none}` for times without a date."

[reference.foundations.datetime.datetime.month.oneliner]
en = "The month if it was specified, or `{none}` for times without a date."

[reference.foundations.datetime.datetime.month.title]
en = "Month"

[reference.foundations.datetime.datetime.oneliner]
en = "Represents a date, a time, or a combination of both."

[reference.foundations.datetime.datetime.ordinal.details]
en = "The ordinal (day of the year), or `{none}` for times without a date."

[reference.foundations.datetime.datetime.ordinal.oneliner]
en = "The ordinal (day of the year), or `{none}` for times without a date."

[reference.foundations.datetime.datetime.ordinal.title]
en = "Ordinal"

[reference.foundations.datetime.datetime.second.details]
en = "The second if it was specified, or `{none}` for dates without a time."

[reference.foundations.datetime.datetime.second.oneliner]
en = "The second if it was specified, or `{none}` for dates without a time."

[reference.foundations.datetime.datetime.second.title]
en = "Second"

[reference.foundations.datetime.datetime.title]
en = "Datetime"

[reference.foundations.datetime.datetime.today.details]
en = "Returns the current date.\n\n"

[reference.foundations.datetime.datetime.today.offset.details]
en = "An offset to apply to the current UTC date. If set to `{auto}`, the\noffset will be the local offset."

[reference.foundations.datetime.datetime.today.oneliner]
en = "Returns the current date."

[reference.foundations.datetime.datetime.today.title]
en = "Today"

[reference.foundations.datetime.datetime.weekday.details]
en = "The weekday (counting Monday as 1) or `{none}` for times without a date."

[reference.foundations.datetime.datetime.weekday.oneliner]
en = "The weekday (counting Monday as 1) or `{none}` for times without a date."

[reference.foundations.datetime.datetime.weekday.title]
en = "Weekday"

[reference.foundations.datetime.datetime.year.details]
en = "The year if it was specified, or `{none}` for times without a date."

[reference.foundations.datetime.datetime.year.oneliner]
en = "The year if it was specified, or `{none}` for times without a date."

[reference.foundations.datetime.datetime.year.title]
en = "Year"

[reference.foundations.datetime.description]
en = "Documentation for the Datetime type."

[reference.foundations.datetime.oneliner]
en = "Represents a date, a time, or a combination of both."

[reference.foundations.datetime.title]
en = "Datetime"

[reference.foundations.decimal.decimal.decimal.details]
en = "Converts a value to a `decimal`.\n\nIt is recommended to use a string to construct the decimal number, or an\n[integer]($int) (if desired). The string must contain a number in the\nformat `{\"3.14159\"}` (or `{\"-3.141519\"}` for negative numbers). The\nfractional digits are fully preserved; if that's not possible due to the\nlimit of significant digits (around 28 to 29) having been reached, an\nerror is raised as the given decimal number wouldn't be representable.\n\nWhile this constructor can be used with [floating-point numbers]($float)\nto cast them to `decimal`, doing so is **discouraged** as **this cast is\ninherently imprecise.** It is easy to accidentally perform this cast by\nwriting `{decimal(1.234)}` (note the lack of double quotes), which is\nwhy Typst will emit a warning in that case. Please write\n`{decimal(\"1.234\")}` instead for that particular case (initialization of\na constant decimal). Also note that floats that are NaN or infinite\ncannot be cast to decimals and will raise an error.\n\n"

[reference.foundations.decimal.decimal.decimal.oneliner]
en = "Converts a value to a `decimal`."

[reference.foundations.decimal.decimal.decimal.title]
en = "Construct"

[reference.foundations.decimal.decimal.decimal.value.details]
en = "The value that should be converted to a decimal."

[reference.foundations.decimal.decimal.details]
en = "A fixed-point decimal number type.\n\nThis type should be used for precise arithmetic operations on numbers\nrepresented in base 10. A typical use case is representing currency.\n\n# Example\n```example\nDecimal: #(decimal(\"0.1\") + decimal(\"0.2\")) \\\nFloat: #(0.1 + 0.2)\n```\n\n# Construction and casts\nTo create a decimal number, use the `{decimal(string)}` constructor, such as\nin `{decimal(\"3.141592653\")}` **(note the double quotes!)**. This\nconstructor preserves all given fractional digits, provided they are\nrepresentable as per the limits specified below (otherwise, an error is\nraised).\n\nYou can also convert any [integer]($int) to a decimal with the\n`{decimal(int)}` constructor, e.g. `{decimal(59)}`. However, note that\nconstructing a decimal from a [floating-point number]($float), while\nsupported, **is an imprecise conversion and therefore discouraged.** A\nwarning will be raised if Typst detects that there was an accidental `float`\nto `decimal` cast through its constructor, e.g. if writing `{decimal(3.14)}`\n(note the lack of double quotes, indicating this is an accidental `float`\ncast and therefore imprecise). It is recommended to use strings for\nconstant decimal values instead (e.g. `{decimal(\"3.14\")}`).\n\nThe precision of a `float` to `decimal` cast can be slightly improved by\nrounding the result to 15 digits with [`calc.round`]($calc.round), but there\nare still no precision guarantees for that kind of conversion.\n\n# Operations\nBasic arithmetic operations are supported on two decimals and on pairs of\ndecimals and integers.\n\nBuilt-in operations between `float` and `decimal` are not supported in order\nto guard against accidental loss of precision. They will raise an error\ninstead.\n\nCertain `calc` functions, such as trigonometric functions and power between\ntwo real numbers, are also only supported for `float` (although raising\n`decimal` to integer exponents is supported). You can opt into potentially\nimprecise operations with the `{float(decimal)}` constructor, which casts\nthe `decimal` number into a `float`, allowing for operations without\nprecision guarantees.\n\n# Displaying decimals\nTo display a decimal, simply insert the value into the document. To only\ndisplay a certain number of digits, [round]($calc.round) the decimal first.\nLocalized formatting of decimals and other numbers is not yet supported, but\nplanned for the future.\n\nYou can convert decimals to strings using the [`str`] constructor. This way,\nyou can post-process the displayed representation, e.g. to replace the\nperiod with a comma (as a stand-in for proper built-in localization to\nlanguages that use the comma).\n\n# Precision and limits\nA `decimal` number has a limit of 28 to 29 significant base-10 digits. This\nincludes the sum of digits before and after the decimal point. As such,\nnumbers with more fractional digits have a smaller range. The maximum and\nminimum `decimal` numbers have a value of `{79228162514264337593543950335}`\nand `{-79228162514264337593543950335}` respectively. In contrast with\n[`float`], this type does not support infinity or NaN, so overflowing or\nunderflowing operations will raise an error.\n\nTypical operations between `decimal` numbers, such as addition,\nmultiplication, and [power]($calc.pow) to an integer, will be highly precise\ndue to their fixed-point representation. Note, however, that multiplication\nand division may not preserve all digits in some edge cases: while they are\nconsidered precise, digits past the limits specified above are rounded off\nand lost, so some loss of precision beyond the maximum representable digits\nis possible. Note that this behavior can be observed not only when dividing,\nbut also when multiplying by numbers between 0 and 1, as both operations can\npush a number's fractional digits beyond the limits described above, leading\nto rounding. When those two operations do not surpass the digit limits, they\nare fully precise."

[reference.foundations.decimal.decimal.oneliner]
en = "A fixed-point decimal number type."

[reference.foundations.decimal.decimal.title]
en = "Decimal"

[reference.foundations.decimal.description]
en = "Documentation for the Decimal type."

[reference.foundations.decimal.oneliner]
en = "A fixed-point decimal number type."

[reference.foundations.decimal.title]
en = "Decimal"

[reference.foundations.description]
en = "Documentation for functions related to Foundations in Typst."

[reference.foundations.dictionary.description]
en = "Documentation for the Dictionary type."

[reference.foundations.dictionary.dictionary.at.default.details]
en = "A default value to return if the key is not part of the dictionary."

[reference.foundations.dictionary.dictionary.at.details]
en = "Returns the value associated with the specified key in the dictionary.\nMay be used on the left-hand side of an assignment if the key is already\npresent in the dictionary. Returns the default value if the key is not\npart of the dictionary or fails with an error if no default value was\nspecified."

[reference.foundations.dictionary.dictionary.at.key.details]
en = "The key at which to retrieve the item."

[reference.foundations.dictionary.dictionary.at.oneliner]
en = "Returns the value associated with the specified key in the dictionary."

[reference.foundations.dictionary.dictionary.at.title]
en = "At"

[reference.foundations.dictionary.dictionary.details]
en = "A map from string keys to values.\n\nYou can construct a dictionary by enclosing comma-separated `key: value`\npairs in parentheses. The values do not have to be of the same type. Since\nempty parentheses already yield an empty array, you have to use the special\n`(:)` syntax to create an empty dictionary.\n\nA dictionary is conceptually similar to an array, but it is indexed by\nstrings instead of integers. You can access and create dictionary entries\nwith the `.at()` method. If you know the key statically, you can\nalternatively use [field access notation]($scripting/#fields) (`.key`) to\naccess the value. Dictionaries can be added with the `+` operator and\n[joined together]($scripting/#blocks). To check whether a key is present in\nthe dictionary, use the `in` keyword.\n\nYou can iterate over the pairs in a dictionary using a [for\nloop]($scripting/#loops). This will iterate in the order the pairs were\ninserted / declared.\n\n# Example\n```example\n#let dict = (\n  name: \"Typst\",\n  born: 2019,\n)\n\n#dict.name \\\n#(dict.launch = 20)\n#dict.len() \\\n#dict.keys() \\\n#dict.values() \\\n#dict.at(\"born\") \\\n#dict.insert(\"city\", \"Berlin \")\n#(\"name\" in dict)\n```"

[reference.foundations.dictionary.dictionary.dictionary.details]
en = "Converts a value into a dictionary.\n\nNote that this function is only intended for conversion of a\ndictionary-like value to a dictionary, not for creation of a dictionary\nfrom individual pairs. Use the dictionary syntax `(key: value)` instead.\n\n"

[reference.foundations.dictionary.dictionary.dictionary.oneliner]
en = "Converts a value into a dictionary."

[reference.foundations.dictionary.dictionary.dictionary.title]
en = "Construct"

[reference.foundations.dictionary.dictionary.dictionary.value.details]
en = "The value that should be converted to a dictionary."

[reference.foundations.dictionary.dictionary.insert.details]
en = "Inserts a new pair into the dictionary. If the dictionary already\ncontains this key, the value is updated."

[reference.foundations.dictionary.dictionary.insert.key.details]
en = "The key of the pair that should be inserted."

[reference.foundations.dictionary.dictionary.insert.oneliner]
en = "Inserts a new pair into the dictionary. If the dictionary already"

[reference.foundations.dictionary.dictionary.insert.title]
en = "Insert"

[reference.foundations.dictionary.dictionary.insert.value.details]
en = "The value of the pair that should be inserted."

[reference.foundations.dictionary.dictionary.keys.details]
en = "Returns the keys of the dictionary as an array in insertion order."

[reference.foundations.dictionary.dictionary.keys.oneliner]
en = "Returns the keys of the dictionary as an array in insertion order."

[reference.foundations.dictionary.dictionary.keys.title]
en = "Keys"

[reference.foundations.dictionary.dictionary.len.details]
en = "The number of pairs in the dictionary."

[reference.foundations.dictionary.dictionary.len.oneliner]
en = "The number of pairs in the dictionary."

[reference.foundations.dictionary.dictionary.len.title]
en = "Length"

[reference.foundations.dictionary.dictionary.oneliner]
en = "A map from string keys to values."

[reference.foundations.dictionary.dictionary.pairs.details]
en = "Returns the keys and values of the dictionary as an array of pairs. Each\npair is represented as an array of length two."

[reference.foundations.dictionary.dictionary.pairs.oneliner]
en = "Returns the keys and values of the dictionary as an array of pairs. Each"

[reference.foundations.dictionary.dictionary.pairs.title]
en = "Pairs"

[reference.foundations.dictionary.dictionary.remove.default.details]
en = "A default value to return if the key does not exist."

[reference.foundations.dictionary.dictionary.remove.details]
en = "Removes a pair from the dictionary by key and return the value."

[reference.foundations.dictionary.dictionary.remove.key.details]
en = "The key of the pair to remove."

[reference.foundations.dictionary.dictionary.remove.oneliner]
en = "Removes a pair from the dictionary by key and return the value."

[reference.foundations.dictionary.dictionary.remove.title]
en = "Remove"

[reference.foundations.dictionary.dictionary.title]
en = "Dictionary"

[reference.foundations.dictionary.dictionary.values.details]
en = "Returns the values of the dictionary as an array in insertion order."

[reference.foundations.dictionary.dictionary.values.oneliner]
en = "Returns the values of the dictionary as an array in insertion order."

[reference.foundations.dictionary.dictionary.values.title]
en = "Values"

[reference.foundations.dictionary.oneliner]
en = "A map from string keys to values."

[reference.foundations.dictionary.title]
en = "Dictionary"

[reference.foundations.duration.description]
en = "Documentation for the Duration type."

[reference.foundations.duration.duration.days.details]
en = "The duration expressed in days.\n\nThis function returns the total duration represented in days as a\nfloating-point number rather than the second component of the duration."

[reference.foundations.duration.duration.days.oneliner]
en = "The duration expressed in days."

[reference.foundations.duration.duration.days.title]
en = "Days"

[reference.foundations.duration.duration.details]
en = "Represents a positive or negative span of time."

[reference.foundations.duration.duration.duration.days.details]
en = "The number of days."

[reference.foundations.duration.duration.duration.details]
en = "Creates a new duration.\n\nYou can specify the [duration] using weeks, days, hours, minutes and\nseconds. You can also get a duration by subtracting two\n[datetimes]($datetime).\n\n"

[reference.foundations.duration.duration.duration.hours.details]
en = "The number of hours."

[reference.foundations.duration.duration.duration.minutes.details]
en = "The number of minutes."

[reference.foundations.duration.duration.duration.oneliner]
en = "Creates a new duration."

[reference.foundations.duration.duration.duration.seconds.details]
en = "The number of seconds."

[reference.foundations.duration.duration.duration.title]
en = "Construct"

[reference.foundations.duration.duration.duration.weeks.details]
en = "The number of weeks."

[reference.foundations.duration.duration.hours.details]
en = "The duration expressed in hours.\n\nThis function returns the total duration represented in hours as a\nfloating-point number rather than the second component of the duration."

[reference.foundations.duration.duration.hours.oneliner]
en = "The duration expressed in hours."

[reference.foundations.duration.duration.hours.title]
en = "Hours"

[reference.foundations.duration.duration.minutes.details]
en = "The duration expressed in minutes.\n\nThis function returns the total duration represented in minutes as a\nfloating-point number rather than the second component of the duration."

[reference.foundations.duration.duration.minutes.oneliner]
en = "The duration expressed in minutes."

[reference.foundations.duration.duration.minutes.title]
en = "Minutes"

[reference.foundations.duration.duration.oneliner]
en = "Represents a positive or negative span of time."

[reference.foundations.duration.duration.seconds.details]
en = "The duration expressed in seconds.\n\nThis function returns the total duration represented in seconds as a\nfloating-point number rather than the second component of the duration."

[reference.foundations.duration.duration.seconds.oneliner]
en = "The duration expressed in seconds."

[reference.foundations.duration.duration.seconds.title]
en = "Seconds"

[reference.foundations.duration.duration.title]
en = "Duration"

[reference.foundations.duration.duration.weeks.details]
en = "The duration expressed in weeks.\n\nThis function returns the total duration represented in weeks as a\nfloating-point number rather than the second component of the duration."

[reference.foundations.duration.duration.weeks.oneliner]
en = "The duration expressed in weeks."

[reference.foundations.duration.duration.weeks.title]
en = "Weeks"

[reference.foundations.duration.oneliner]
en = "Represents a positive or negative span of time."

[reference.foundations.duration.title]
en = "Duration"

[reference.foundations.eval.description]
en = "Documentation for the `eval` function."

[reference.foundations.eval.eval.details]
en = "Evaluates a string as Typst code.\n\nThis function should only be used as a last resort.\n\n# Example\n```example\n#eval(\"1 + 1\") \\\n#eval(\"(1, 2, 3, 4)\").len() \\\n#eval(\"*Markup!*\", mode: \"markup\") \\\n```"

[reference.foundations.eval.eval.mode.details]
en = "The [syntactical mode]($reference/syntax/#modes) in which the string is\nparsed.\n\n"

[reference.foundations.eval.eval.oneliner]
en = "Evaluates a string as Typst code."

[reference.foundations.eval.eval.scope.details]
en = "A scope of definitions that are made available.\n\n"

[reference.foundations.eval.eval.source.details]
en = "A string of Typst code to evaluate."

[reference.foundations.eval.eval.title]
en = "Evaluate"

[reference.foundations.eval.oneliner]
en = "Evaluates a string as Typst code."

[reference.foundations.eval.title]
en = "Evaluate"

[reference.foundations.float.description]
en = "Documentation for the Float type."

[reference.foundations.float.float.details]
en = "A floating-point number.\n\nA limited-precision representation of a real number. Typst uses 64 bits to\nstore floats. Wherever a float is expected, you can also pass an\n[integer]($int).\n\nYou can convert a value to a float with this type's constructor.\n\nNaN and positive infinity are available as `{float.nan}` and `{float.inf}`\nrespectively.\n\n# Example\n```example\n#3.14 \\\n#1e4 \\\n#(10 / 4)\n```"

[reference.foundations.float.float.float.details]
en = "Converts a value to a float.\n\n- Booleans are converted to `0.0` or `1.0`.\n- Integers are converted to the closest 64-bit float. For integers with\n  absolute value less than `{calc.pow(2, 53)}`, this conversion is\n  exact.\n- Ratios are divided by 100%.\n- Strings are parsed in base 10 to the closest 64-bit float. Exponential\n  notation is supported.\n\n"

[reference.foundations.float.float.float.oneliner]
en = "Converts a value to a float."

[reference.foundations.float.float.float.title]
en = "Construct"

[reference.foundations.float.float.float.value.details]
en = "The value that should be converted to a float."

[reference.foundations.float.float.from-bytes.bytes.details]
en = "The bytes that should be converted to a float.\n\nMust have a length of either 4 or 8. The bytes are then\ninterpreted in [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754)'s\nbinary32 (single-precision) or binary64 (double-precision) format\ndepending on the length of the bytes."

[reference.foundations.float.float.from-bytes.details]
en = "Interprets bytes as a float.\n\n"

[reference.foundations.float.float.from-bytes.endian.details]
en = "The endianness of the conversion."

[reference.foundations.float.float.from-bytes.oneliner]
en = "Interprets bytes as a float."

[reference.foundations.float.float.from-bytes.title]
en = "From Bytes"

[reference.foundations.float.float.is-infinite.details]
en = "Checks if a float is infinite.\n\nFloats can represent positive infinity and negative infinity. This\nfunction returns `{true}` if the float is an infinity.\n\n"

[reference.foundations.float.float.is-infinite.oneliner]
en = "Checks if a float is infinite."

[reference.foundations.float.float.is-infinite.title]
en = "Is Infinite"

[reference.foundations.float.float.is-nan.details]
en = "Checks if a float is not a number.\n\nIn IEEE 754, more than one bit pattern represents a NaN. This function\nreturns `true` if the float is any of those bit patterns.\n\n"

[reference.foundations.float.float.is-nan.oneliner]
en = "Checks if a float is not a number."

[reference.foundations.float.float.is-nan.title]
en = "Is Nan"

[reference.foundations.float.float.oneliner]
en = "A floating-point number."

[reference.foundations.float.float.signum.details]
en = "Calculates the sign of a floating point number.\n\n- If the number is positive (including `{+0.0}`), returns `{1.0}`.\n- If the number is negative (including `{-0.0}`), returns `{-1.0}`.\n- If the number is NaN, returns `{float.nan}`.\n\n"

[reference.foundations.float.float.signum.oneliner]
en = "Calculates the sign of a floating point number."

[reference.foundations.float.float.signum.title]
en = "Signum"

[reference.foundations.float.float.title]
en = "Float"

[reference.foundations.float.float.to-bytes.details]
en = "Converts a float to bytes.\n\n"

[reference.foundations.float.float.to-bytes.endian.details]
en = "The endianness of the conversion."

[reference.foundations.float.float.to-bytes.oneliner]
en = "Converts a float to bytes."

[reference.foundations.float.float.to-bytes.size.details]
en = "The size of the resulting bytes.\n\nThis must be either 4 or 8. The call will return the\nrepresentation of this float in either\n[IEEE 754](https://en.wikipedia.org/wiki/IEEE_754)'s binary32\n(single-precision) or binary64 (double-precision) format\ndepending on the provided size."

[reference.foundations.float.float.to-bytes.title]
en = "To Bytes"

[reference.foundations.float.oneliner]
en = "A floating-point number."

[reference.foundations.float.title]
en = "Float"

[reference.foundations.foundations.details]
en = "Foundational types and functions.\n\nHere, you'll find documentation for basic data types like [integers]($int) and\n[strings]($str) as well as details about core computational functions.\n"

[reference.foundations.foundations.title]
en = "Foundations"

[reference.foundations.function.description]
en = "Documentation for the Function type."

[reference.foundations.function.function.details]
en = "A mapping from argument values to a return value.\n\nYou can call a function by writing a comma-separated list of function\n_arguments_ enclosed in parentheses directly after the function name.\nAdditionally, you can pass any number of trailing content blocks arguments\nto a function _after_ the normal argument list. If the normal argument list\nwould become empty, it can be omitted. Typst supports positional and named\narguments. The former are identified by position and type, while the latter\nare written as `name: value`.\n\nWithin math mode, function calls have special behaviour. See the\n[math documentation]($category/math) for more details.\n\n# Example\n```example\n// Call a function.\n#list([A], [B])\n\n// Named arguments and trailing\n// content blocks.\n#enum(start: 2)[A][B]\n\n// Version without parentheses.\n#list[A][B]\n```\n\nFunctions are a fundamental building block of Typst. Typst provides\nfunctions for a variety of typesetting tasks. Moreover, the markup you write\nis backed by functions and all styling happens through functions. This\nreference lists all available functions and how you can use them. Please\nalso refer to the documentation about [set]($styling/#set-rules) and\n[show]($styling/#show-rules) rules to learn about additional ways you can\nwork with functions in Typst.\n\n# Element functions\nSome functions are associated with _elements_ like [headings]($heading) or\n[tables]($table). When called, these create an element of their respective\nkind. In contrast to normal functions, they can further be used in [set\nrules]($styling/#set-rules), [show rules]($styling/#show-rules), and\n[selectors]($selector).\n\n# Function scopes\nFunctions can hold related definitions in their own scope, similar to a\n[module]($scripting/#modules). Examples of this are\n[`assert.eq`]($assert.eq) or [`list.item`]($list.item). However, this\nfeature is currently only available for built-in functions.\n\n# Defining functions\nYou can define your own function with a [let binding]($scripting/#bindings)\nthat has a parameter list after the binding's name. The parameter list can\ncontain mandatory positional parameters, named parameters with default\nvalues and [argument sinks]($arguments).\n\nThe right-hand side of a function binding is the function body, which can be\na block or any other expression. It defines the function's return value and\ncan depend on the parameters. If the function body is a [code\nblock]($scripting/#blocks), the return value is the result of joining the\nvalues of each expression in the block.\n\nWithin a function body, the `return` keyword can be used to exit early and\noptionally specify a return value. If no explicit return value is given, the\nbody evaluates to the result of joining all expressions preceding the\n`return`.\n\nFunctions that don't return any meaningful value return [`none`] instead.\nThe return type of such functions is not explicitly specified in the\ndocumentation. (An example of this is [`array.push`]).\n\n```example\n#let alert(body, fill: red) = {\n  set text(white)\n  set align(center)\n  rect(\n    fill: fill,\n    inset: 8pt,\n    radius: 4pt,\n    [*Warning:\\ #body*],\n  )\n}\n\n#alert[\n  Danger is imminent!\n]\n\n#alert(fill: blue)[\n  KEEP OFF TRACKS\n]\n```\n\n# Importing functions\nFunctions can be imported from one file ([`module`]($scripting/#modules)) into\nanother using `{import}`. For example, assume that we have defined the `alert`\nfunction from the previous example in a file called `foo.typ`. We can import\nit into another file by writing `{import \"foo.typ\": alert}`.\n\n# Unnamed functions { #unnamed }\nYou can also created an unnamed function without creating a binding by\nspecifying a parameter list followed by `=>` and the function body. If your\nfunction has just one parameter, the parentheses around the parameter list\nare optional. Unnamed functions are mainly useful for show rules, but also\nfor settable properties that take functions like the page function's\n[`footer`]($page.footer) property.\n\n```example\n#show \"once?\": it => [#it #it]\nonce?\n```\n\n# Note on function purity\nIn Typst, all functions are _pure._ This means that for the same\narguments, they always return the same result. They cannot \"remember\" things to\nproduce another value when they are called a second time.\n\nThe only exception are built-in methods like\n[`array.push(value)`]($array.push). These can modify the values they are\ncalled on."

[reference.foundations.function.function.oneliner]
en = "A mapping from argument values to a return value."

[reference.foundations.function.function.title]
en = "Function"

[reference.foundations.function.function.where.details]
en = "Returns a selector that filters for elements belonging to this function\nwhose fields have the values of the given arguments.\n\n"

[reference.foundations.function.function.where.fields.details]
en = "The fields to filter for."

[reference.foundations.function.function.where.oneliner]
en = "Returns a selector that filters for elements belonging to this function"

[reference.foundations.function.function.where.title]
en = "Where"

[reference.foundations.function.function.with.arguments.details]
en = "The arguments to apply to the function."

[reference.foundations.function.function.with.details]
en = "Returns a new function that has the given arguments pre-applied."

[reference.foundations.function.function.with.oneliner]
en = "Returns a new function that has the given arguments pre-applied."

[reference.foundations.function.function.with.title]
en = "With"

[reference.foundations.function.oneliner]
en = "A mapping from argument values to a return value."

[reference.foundations.function.title]
en = "Function"

[reference.foundations.int.description]
en = "Documentation for the Integer type."

[reference.foundations.int.int.bit-and.details]
en = "Calculates the bitwise AND between two integers.\n\nFor the purposes of this function, the operands are treated as signed\nintegers of 64 bits.\n\n"

[reference.foundations.int.int.bit-and.oneliner]
en = "Calculates the bitwise AND between two integers."

[reference.foundations.int.int.bit-and.rhs.details]
en = "The right-hand operand of the bitwise AND."

[reference.foundations.int.int.bit-and.title]
en = "Bitwise AND"

[reference.foundations.int.int.bit-lshift.details]
en = "Shifts the operand's bits to the left by the specified amount.\n\nFor the purposes of this function, the operand is treated as a signed\ninteger of 64 bits. An error will occur if the result is too large to\nfit in a 64-bit integer.\n\n"

[reference.foundations.int.int.bit-lshift.oneliner]
en = "Shifts the operand's bits to the left by the specified amount."

[reference.foundations.int.int.bit-lshift.shift.details]
en = "The amount of bits to shift. Must not be negative."

[reference.foundations.int.int.bit-lshift.title]
en = "Bitwise Left Shift"

[reference.foundations.int.int.bit-not.details]
en = "Calculates the bitwise NOT of an integer.\n\nFor the purposes of this function, the operand is treated as a signed\ninteger of 64 bits.\n\n"

[reference.foundations.int.int.bit-not.oneliner]
en = "Calculates the bitwise NOT of an integer."

[reference.foundations.int.int.bit-not.title]
en = "Bitwise NOT"

[reference.foundations.int.int.bit-or.details]
en = "Calculates the bitwise OR between two integers.\n\nFor the purposes of this function, the operands are treated as signed\nintegers of 64 bits.\n\n"

[reference.foundations.int.int.bit-or.oneliner]
en = "Calculates the bitwise OR between two integers."

[reference.foundations.int.int.bit-or.rhs.details]
en = "The right-hand operand of the bitwise OR."

[reference.foundations.int.int.bit-or.title]
en = "Bitwise OR"

[reference.foundations.int.int.bit-rshift.details]
en = "Shifts the operand's bits to the right by the specified amount.\nPerforms an arithmetic shift by default (extends the sign bit to the left,\nsuch that negative numbers stay negative), but that can be changed by the\n`logical` parameter.\n\nFor the purposes of this function, the operand is treated as a signed\ninteger of 64 bits.\n\n"

[reference.foundations.int.int.bit-rshift.logical.details]
en = "Toggles whether a logical (unsigned) right shift should be performed\ninstead of arithmetic right shift.\nIf this is `{true}`, negative operands will not preserve their sign\nbit, and bits which appear to the left after the shift will be\n`{0}`. This parameter has no effect on non-negative operands."

[reference.foundations.int.int.bit-rshift.oneliner]
en = "Shifts the operand's bits to the right by the specified amount."

[reference.foundations.int.int.bit-rshift.shift.details]
en = "The amount of bits to shift. Must not be negative.\n\nShifts larger than 63 are allowed and will cause the return value to\nsaturate. For non-negative numbers, the return value saturates at\n`{0}`, while, for negative numbers, it saturates at `{-1}` if\n`logical` is set to `{false}`, or `{0}` if it is `{true}`. This\nbehavior is consistent with just applying this operation multiple\ntimes. Therefore, the shift will always succeed."

[reference.foundations.int.int.bit-rshift.title]
en = "Bitwise Right Shift"

[reference.foundations.int.int.bit-xor.details]
en = "Calculates the bitwise XOR between two integers.\n\nFor the purposes of this function, the operands are treated as signed\nintegers of 64 bits.\n\n"

[reference.foundations.int.int.bit-xor.oneliner]
en = "Calculates the bitwise XOR between two integers."

[reference.foundations.int.int.bit-xor.rhs.details]
en = "The right-hand operand of the bitwise XOR."

[reference.foundations.int.int.bit-xor.title]
en = "Bitwise XOR"

[reference.foundations.int.int.details]
en = "A whole number.\n\nThe number can be negative, zero, or positive. As Typst uses 64 bits to\nstore integers, integers cannot be smaller than `{-9223372036854775808}` or\nlarger than `{9223372036854775807}`. Integer literals are always positive,\nso a negative integer such as `{-1}` is semantically the negation `-` of the\npositive literal `1`. A positive integer greater than the maximum value and\na negative integer less than or equal to the minimum value cannot be\nrepresented as an integer literal, and are instead parsed as a `{float}`.\nThe minimum integer value can still be obtained through integer arithmetic.\n\nThe number can also be specified as hexadecimal, octal, or binary by\nstarting it with a zero followed by either `x`, `o`, or `b`.\n\nYou can convert a value to an integer with this type's constructor.\n\n# Example\n```example\n#(1 + 2) \\\n#(2 - 5) \\\n#(3 + 4 < 8)\n\n#0xff \\\n#0o10 \\\n#0b1001\n```"

[reference.foundations.int.int.from-bytes.bytes.details]
en = "The bytes that should be converted to an integer.\n\nMust be of length at most 8 so that the result fits into a 64-bit\nsigned integer."

[reference.foundations.int.int.from-bytes.details]
en = "Converts bytes to an integer.\n\n"

[reference.foundations.int.int.from-bytes.endian.details]
en = "The endianness of the conversion."

[reference.foundations.int.int.from-bytes.oneliner]
en = "Converts bytes to an integer."

[reference.foundations.int.int.from-bytes.signed.details]
en = "Whether the bytes should be treated as a signed integer. If this is\n`{true}` and the most significant bit is set, the resulting number\nwill negative."

[reference.foundations.int.int.from-bytes.title]
en = "From Bytes"

[reference.foundations.int.int.int.details]
en = "Converts a value to an integer. Raises an error if there is an attempt\nto produce an integer larger than the maximum 64-bit signed integer\nor smaller than the minimum 64-bit signed integer.\n\n- Booleans are converted to `0` or `1`.\n- Floats and decimals are truncated to the next 64-bit integer.\n- Strings are parsed in base 10.\n\n"

[reference.foundations.int.int.int.oneliner]
en = "Converts a value to an integer. Raises an error if there is an attempt"

[reference.foundations.int.int.int.title]
en = "Construct"

[reference.foundations.int.int.int.value.details]
en = "The value that should be converted to an integer."

[reference.foundations.int.int.oneliner]
en = "A whole number."

[reference.foundations.int.int.signum.details]
en = "Calculates the sign of an integer.\n\n- If the number is positive, returns `{1}`.\n- If the number is negative, returns `{-1}`.\n- If the number is zero, returns `{0}`.\n\n"

[reference.foundations.int.int.signum.oneliner]
en = "Calculates the sign of an integer."

[reference.foundations.int.int.signum.title]
en = "Signum"

[reference.foundations.int.int.title]
en = "Integer"

[reference.foundations.int.int.to-bytes.details]
en = "Converts an integer to bytes.\n\n"

[reference.foundations.int.int.to-bytes.endian.details]
en = "The endianness of the conversion."

[reference.foundations.int.int.to-bytes.oneliner]
en = "Converts an integer to bytes."

[reference.foundations.int.int.to-bytes.size.details]
en = "The size in bytes of the resulting bytes (must be at least zero). If\nthe integer is too large to fit in the specified size, the\nconversion will truncate the remaining bytes based on the\nendianness. To keep the same resulting value, if the endianness is\nbig-endian, the truncation will happen at the rightmost bytes.\nOtherwise, if the endianness is little-endian, the truncation will\nhappen at the leftmost bytes.\n\nBe aware that if the integer is negative and the size is not enough\nto make the number fit, when passing the resulting bytes to\n`int.from-bytes`, the resulting number might be positive, as the\nmost significant bit might not be set to 1."

[reference.foundations.int.int.to-bytes.title]
en = "To Bytes"

[reference.foundations.int.oneliner]
en = "A whole number."

[reference.foundations.int.title]
en = "Integer"

[reference.foundations.label.description]
en = "Documentation for the Label type."

[reference.foundations.label.label.details]
en = "A label for an element.\n\nInserting a label into content attaches it to the closest preceding element\nthat is not a space. The preceding element must be in the same scope as the\nlabel, which means that `[Hello #[<label>]]`, for instance, wouldn't work.\n\nA labelled element can be [referenced]($ref), [queried]($query) for, and\n[styled]($styling) through its label.\n\nOnce constructed, you can get the name of a label using\n[`str`]($str/#constructor).\n\n# Example\n```example\n#show <a>: set text(blue)\n#show label(\"b\"): set text(red)\n\n= Heading <a>\n*Strong* #label(\"b\")\n```\n\n# Syntax\nThis function also has dedicated syntax: You can create a label by enclosing\nits name in angle brackets. This works both in markup and code. A label's\nname can contain letters, numbers, `_`, `-`, `:`, and `.`.\n\nNote that there is a syntactical difference when using the dedicated syntax\nfor this function. In the code below, the `[<a>]` terminates the heading and\nthus attaches to the heading itself, whereas the `[#label(\"b\")]` is part of\nthe heading and thus attaches to the heading's text.\n\n```typ\n// Equivalent to `#heading[Introduction] <a>`.\n= Introduction <a>\n\n// Equivalent to `#heading[Conclusion #label(\"b\")]`.\n= Conclusion #label(\"b\")\n```\n\nCurrently, labels can only be attached to elements in markup mode, not in\ncode mode. This might change in the future."

[reference.foundations.label.label.label.details]
en = "Creates a label from a string."

[reference.foundations.label.label.label.name.details]
en = "The name of the label."

[reference.foundations.label.label.label.oneliner]
en = "Creates a label from a string."

[reference.foundations.label.label.label.title]
en = "Construct"

[reference.foundations.label.label.oneliner]
en = "A label for an element."

[reference.foundations.label.label.title]
en = "Label"

[reference.foundations.label.oneliner]
en = "A label for an element."

[reference.foundations.label.title]
en = "Label"

[reference.foundations.module.description]
en = "Documentation for the Module type."

[reference.foundations.module.module.details]
en = "An module of definitions.\n\nA module\n- be built-in\n- stem from a [file import]($scripting/#modules)\n- stem from a [package import]($scripting/#packages) (and thus indirectly\n  its entrypoint file)\n- result from a call to the [plugin]($plugin) function\n\nYou can access definitions from the module using [field access\nnotation]($scripting/#fields) and interact with it using the [import and\ninclude syntaxes]($scripting/#modules). Alternatively, it is possible to\nconvert a module to a dictionary, and therefore access its contents\ndynamically, using the [dictionary constructor]($dictionary/#constructor).\n\n# Example\n```example\n<<< #import \"utils.typ\"\n<<< #utils.add(2, 5)\n\n<<< #import utils: sub\n<<< #sub(1, 4)\n>>> #7\n>>>\n>>> #(-3)\n```"

[reference.foundations.module.module.oneliner]
en = "An module of definitions."

[reference.foundations.module.module.title]
en = "Module"

[reference.foundations.module.oneliner]
en = "An module of definitions."

[reference.foundations.module.title]
en = "Module"

[reference.foundations.none.description]
en = "Documentation for the None type."

[reference.foundations.none.none.details]
en = "A value that indicates the absence of any other value.\n\nThe none type has exactly one value: `{none}`.\n\nWhen inserted into the document, it is not visible. This is also the value\nthat is produced by empty code blocks. It can be\n[joined]($scripting/#blocks) with any value, yielding the other value.\n\n# Example\n```example\nNot visible: #none\n```"

[reference.foundations.none.none.oneliner]
en = "A value that indicates the absence of any other value."

[reference.foundations.none.none.title]
en = "None"

[reference.foundations.none.oneliner]
en = "A value that indicates the absence of any other value."

[reference.foundations.none.title]
en = "None"

[reference.foundations.panic.description]
en = "Documentation for the `panic` function."

[reference.foundations.panic.oneliner]
en = "Fails with an error."

[reference.foundations.panic.panic.details]
en = "Fails with an error.\n\nArguments are displayed to the user (not rendered in the document) as\nstrings, converting with `repr` if necessary.\n\n# Example\nThe code below produces the error `panicked with: \"this is wrong\"`.\n```typ\n#panic(\"this is wrong\")\n```"

[reference.foundations.panic.panic.oneliner]
en = "Fails with an error."

[reference.foundations.panic.panic.title]
en = "Panic"

[reference.foundations.panic.panic.values.details]
en = "The values to panic with and display to the user."

[reference.foundations.panic.title]
en = "Panic"

[reference.foundations.plugin.description]
en = "Documentation for the `plugin` function."

[reference.foundations.plugin.oneliner]
en = "Loads a WebAssembly module."

[reference.foundations.plugin.plugin.details]
en = "Loads a WebAssembly module.\n\nThe resulting [module] will contain one Typst [function] for each function\nexport of the loaded WebAssembly module.\n\nTypst WebAssembly plugins need to follow a specific\n[protocol]($plugin/#protocol). To run as a plugin, a program needs to be\ncompiled to a 32-bit shared WebAssembly library. Plugin functions may accept\nmultiple [byte buffers]($bytes) as arguments and return a single byte\nbuffer. They should typically be wrapped in idiomatic Typst functions that\nperform the necessary conversions between native Typst types and bytes.\n\nFor security reasons, plugins run in isolation from your system. This means\nthat printing, reading files, or similar things are not supported.\n\n# Example\n```example\n#let myplugin = plugin(\"hello.wasm\")\n#let concat(a, b) = str(\n  myplugin.concatenate(\n    bytes(a),\n    bytes(b),\n  )\n)\n\n#concat(\"hello\", \"world\")\n```\n\nSince the plugin function returns a module, it can be used with import\nsyntax:\n```typ\n#import plugin(\"hello.wasm\"): concatenate\n```\n\n# Purity\nPlugin functions **must be pure:** A plugin function call most not have any\nobservable side effects on future plugin calls and given the same arguments,\nit must always return the same value.\n\nThe reason for this is that Typst functions must be pure (which is quite\nfundamental to the language design) and, since Typst function can call\nplugin functions, this requirement is inherited. In particular, if a plugin\nfunction is called twice with the same arguments, Typst might cache the\nresults and call your function only once. Moreover, Typst may run multiple\ninstances of your plugin in multiple threads, with no state shared between\nthem.\n\nTypst does not enforce plugin function purity (for efficiency reasons), but\ncalling an impure function will lead to unpredictable and irreproducible\nresults and must be avoided.\n\nThat said, mutable operations _can be_ useful for plugins that require\ncostly runtime initialization. Due to the purity requirement, such\ninitialization cannot be performed through a normal function call. Instead,\nTypst exposes a [plugin transition API]($plugin.transition), which executes\na function call and then creates a derived module with new functions which\nwill observe the side effects produced by the transition call. The original\nplugin remains unaffected.\n\n# Plugins and Packages\nAny Typst code can make use of a plugin simply by including a WebAssembly\nfile and loading it. However, because the byte-based plugin interface is\nquite low-level, plugins are typically exposed through a package containing\nthe plugin and idiomatic wrapper functions.\n\n# WASI\nMany compilers will use the [WASI ABI](https://wasi.dev/) by default or as\ntheir only option (e.g. emscripten), which allows printing, reading files,\netc. This ABI will not directly work with Typst. You will either need to\ncompile to a different target or [stub all\nfunctions](https://github.com/astrale-sharp/wasm-minimal-protocol/tree/master/crates/wasi-stub).\n\n# Protocol\nTo be used as a plugin, a WebAssembly module must conform to the following\nprotocol:\n\n## Exports\nA plugin module can export functions to make them callable from Typst. To\nconform to the protocol, an exported function should:\n\n- Take `n` 32-bit integer arguments `a_1`, `a_2`, ..., `a_n` (interpreted as\n  lengths, so `usize/size_t` may be preferable), and return one 32-bit\n  integer.\n\n- The function should first allocate a buffer `buf` of length `a_1 + a_2 +\n  ... + a_n`, and then call\n  `wasm_minimal_protocol_write_args_to_buffer(buf.ptr)`.\n\n- The `a_1` first bytes of the buffer now constitute the first argument, the\n  `a_2` next bytes the second argument, and so on.\n\n- The function can now do its job with the arguments and produce an output\n  buffer. Before returning, it should call\n  `wasm_minimal_protocol_send_result_to_host` to send its result back to the\n  host.\n\n- To signal success, the function should return `0`.\n\n- To signal an error, the function should return `1`. The written buffer is\n  then interpreted as an UTF-8 encoded error message.\n\n## Imports\nPlugin modules need to import two functions that are provided by the\nruntime. (Types and functions are described using WAT syntax.)\n\n- `(import \"typst_env\" \"wasm_minimal_protocol_write_args_to_buffer\" (func\n  (param i32)))`\n\n  Writes the arguments for the current function into a plugin-allocated\n  buffer. When a plugin function is called, it [receives the\n  lengths](#exports) of its input buffers as arguments. It should then\n  allocate a buffer whose capacity is at least the sum of these lengths. It\n  should then call this function with a `ptr` to the buffer to fill it with\n  the arguments, one after another.\n\n- `(import \"typst_env\" \"wasm_minimal_protocol_send_result_to_host\" (func\n  (param i32 i32)))`\n\n  Sends the output of the current function to the host (Typst). The first\n  parameter shall be a pointer to a buffer (`ptr`), while the second is the\n  length of that buffer (`len`). The memory pointed at by `ptr` can be freed\n  immediately after this function returns. If the message should be\n  interpreted as an error message, it should be encoded as UTF-8.\n\n# Resources\nFor more resources, check out the [wasm-minimal-protocol\nrepository](https://github.com/astrale-sharp/wasm-minimal-protocol). It\ncontains:\n\n- A list of example plugin implementations and a test runner for these\n  examples\n- Wrappers to help you write your plugin in Rust (Zig wrapper in\n  development)\n- A stubber for WASI"

[reference.foundations.plugin.plugin.oneliner]
en = "Loads a WebAssembly module."

[reference.foundations.plugin.plugin.source.details]
en = "A [path]($syntax/#paths) to a WebAssembly file or raw WebAssembly bytes."

[reference.foundations.plugin.plugin.title]
en = "Plugin"

[reference.foundations.plugin.plugin.transition.arguments.details]
en = "The byte buffers to call the function with."

[reference.foundations.plugin.plugin.transition.details]
en = "Calls a plugin function that has side effects and returns a new module\nwith plugin functions that are guaranteed to have observed the results\nof the mutable call.\n\nNote that calling an impure function through a normal function call\n(without use of the transition API) is forbidden and leads to\nunpredictable behaviour. Read the [section on purity]($plugin/#purity)\nfor more details.\n\nIn the example below, we load the plugin `hello-mut.wasm` which exports\ntwo functions: The `get()` function retrieves a global array as a\nstring. The `add(value)` function adds a value to the global array.\n\nWe call `add` via the transition API. The call `mutated.get()` on the\nderived module will observe the addition. Meanwhile the original module\nremains untouched as demonstrated by the `base.get()` call.\n\n_Note:_ Due to limitations in the internal WebAssembly implementation,\nthe transition API can only guarantee to reflect changes in the plugin's\nmemory, not in WebAssembly globals. If your plugin relies on changes to\nglobals being visible after transition, you might want to avoid use of\nthe transition API for now. We hope to lift this limitation in the\nfuture.\n\n"

[reference.foundations.plugin.plugin.transition.func.details]
en = "The plugin function to call."

[reference.foundations.plugin.plugin.transition.oneliner]
en = "Calls a plugin function that has side effects and returns a new module"

[reference.foundations.plugin.plugin.transition.title]
en = "Transition"

[reference.foundations.plugin.title]
en = "Plugin"

[reference.foundations.regex.description]
en = "Documentation for the Regex type."

[reference.foundations.regex.oneliner]
en = "A regular expression."

[reference.foundations.regex.regex.details]
en = "A regular expression.\n\nCan be used as a [show rule selector]($styling/#show-rules) and with\n[string methods]($str) like `find`, `split`, and `replace`.\n\n[See here](https://docs.rs/regex/latest/regex/#syntax) for a specification\nof the supported syntax.\n\n# Example\n```example\n// Works with string methods.\n#\"a,b;c\".split(regex(\"[,;]\"))\n\n// Works with show rules.\n#show regex(\"\\d+\"): set text(red)\n\nThe numbers 1 to 10.\n```"

[reference.foundations.regex.regex.oneliner]
en = "A regular expression."

[reference.foundations.regex.regex.regex.details]
en = "Create a regular expression from a string."

[reference.foundations.regex.regex.regex.oneliner]
en = "Create a regular expression from a string."

[reference.foundations.regex.regex.regex.regex.details]
en = "The regular expression as a string.\n\nMost regex escape sequences just work because they are not valid Typst\nescape sequences. To produce regex escape sequences that are also valid in\nTypst (e.g. `[\\\\]`), you need to escape twice. Thus, to match a verbatim\nbackslash, you would need to write `{regex(\"\\\\\\\\\")}`.\n\nIf you need many escape sequences, you can also create a raw element\nand extract its text to use it for your regular expressions:\n"

[reference.foundations.regex.regex.regex.title]
en = "Construct"

[reference.foundations.regex.regex.title]
en = "Regex"

[reference.foundations.regex.title]
en = "Regex"

[reference.foundations.repr.description]
en = "Documentation for the `repr` function."

[reference.foundations.repr.oneliner]
en = "Returns the string representation of a value."

[reference.foundations.repr.repr.details]
en = "Returns the string representation of a value.\n\nWhen inserted into content, most values are displayed as this representation\nin monospace with syntax-highlighting. The exceptions are `{none}`,\nintegers, floats, strings, content, and functions.\n\n**Note:** This function is for debugging purposes. Its output should not be\nconsidered stable and may change at any time!\n\n# Example\n```example\n#none vs #repr(none) \\\n#\"hello\" vs #repr(\"hello\") \\\n#(1, 2) vs #repr((1, 2)) \\\n#[*Hi*] vs #repr([*Hi*])\n```"

[reference.foundations.repr.repr.oneliner]
en = "Returns the string representation of a value."

[reference.foundations.repr.repr.title]
en = "Representation"

[reference.foundations.repr.repr.value.details]
en = "The value whose string representation to produce."

[reference.foundations.repr.title]
en = "Representation"

[reference.foundations.selector.description]
en = "Documentation for the Selector type."

[reference.foundations.selector.oneliner]
en = "A filter for selecting elements within the document."

[reference.foundations.selector.selector.after.details]
en = "Returns a modified selector that will only match elements that occur\nafter the first match of `start`."

[reference.foundations.selector.selector.after.inclusive.details]
en = "Whether `start` itself should match or not. This is only relevant\n if both selectors match the same type of element. Defaults to\n `{true}`."

[reference.foundations.selector.selector.after.oneliner]
en = "Returns a modified selector that will only match elements that occur"

[reference.foundations.selector.selector.after.start.details]
en = "The original selection will start at the first match of `start`."

[reference.foundations.selector.selector.after.title]
en = "After"

[reference.foundations.selector.selector.and.details]
en = "Selects all elements that match this and all of the other selectors."

[reference.foundations.selector.selector.and.oneliner]
en = "Selects all elements that match this and all of the other selectors."

[reference.foundations.selector.selector.and.others.details]
en = "The other selectors to match on."

[reference.foundations.selector.selector.and.title]
en = "And"

[reference.foundations.selector.selector.before.details]
en = "Returns a modified selector that will only match elements that occur\nbefore the first match of `end`."

[reference.foundations.selector.selector.before.end.details]
en = "The original selection will end at the first match of `end`."

[reference.foundations.selector.selector.before.inclusive.details]
en = "Whether `end` itself should match or not. This is only relevant if\nboth selectors match the same type of element. Defaults to `{true}`."

[reference.foundations.selector.selector.before.oneliner]
en = "Returns a modified selector that will only match elements that occur"

[reference.foundations.selector.selector.before.title]
en = "Before"

[reference.foundations.selector.selector.details]
en = "A filter for selecting elements within the document.\n\nYou can construct a selector in the following ways:\n- you can use an element [function]\n- you can filter for an element function with\n  [specific fields]($function.where)\n- you can use a [string]($str) or [regular expression]($regex)\n- you can use a [`{<label>}`]($label)\n- you can use a [`location`]\n- call the [`selector`] constructor to convert any of the above types into a\n  selector value and use the methods below to refine it\n\nSelectors are used to [apply styling rules]($styling/#show-rules) to\nelements. You can also use selectors to [query] the document for certain\ntypes of elements.\n\nFurthermore, you can pass a selector to several of Typst's built-in\nfunctions to configure their behaviour. One such example is the [outline]\nwhere it can be used to change which elements are listed within the outline.\n\nMultiple selectors can be combined using the methods shown below. However,\nnot all kinds of selectors are supported in all places, at the moment.\n\n# Example\n```example\n#context query(\n  heading.where(level: 1)\n    .or(heading.where(level: 2))\n)\n\n= This will be found\n== So will this\n=== But this will not.\n```"

[reference.foundations.selector.selector.oneliner]
en = "A filter for selecting elements within the document."

[reference.foundations.selector.selector.or.details]
en = "Selects all elements that match this or any of the other selectors."

[reference.foundations.selector.selector.or.oneliner]
en = "Selects all elements that match this or any of the other selectors."

[reference.foundations.selector.selector.or.others.details]
en = "The other selectors to match on."

[reference.foundations.selector.selector.or.title]
en = "Or"

[reference.foundations.selector.selector.selector.details]
en = "Turns a value into a selector. The following values are accepted:\n- An element function like a `heading` or `figure`.\n- A `{<label>}`.\n- A more complex selector like `{heading.where(level: 1)}`."

[reference.foundations.selector.selector.selector.oneliner]
en = "Turns a value into a selector. The following values are accepted:"

[reference.foundations.selector.selector.selector.target.details]
en = "Can be an element function like a `heading` or `figure`, a `{<label>}`\nor a more complex selector like `{heading.where(level: 1)}`."

[reference.foundations.selector.selector.selector.title]
en = "Construct"

[reference.foundations.selector.selector.title]
en = "Selector"

[reference.foundations.selector.title]
en = "Selector"

[reference.foundations.str.description]
en = "Documentation for the String type."

[reference.foundations.str.oneliner]
en = "A sequence of Unicode codepoints."

[reference.foundations.str.str.at.default.details]
en = "A default value to return if the index is out of bounds."

[reference.foundations.str.str.at.details]
en = "Extracts the first grapheme cluster after the specified index. Returns\nthe default value if the index is out of bounds or fails with an error\nif no default value was specified."

[reference.foundations.str.str.at.index.details]
en = "The byte index. If negative, indexes from the back."

[reference.foundations.str.str.at.oneliner]
en = "Extracts the first grapheme cluster after the specified index. Returns"

[reference.foundations.str.str.at.title]
en = "At"

[reference.foundations.str.str.clusters.details]
en = "Returns the grapheme clusters of the string as an array of substrings."

[reference.foundations.str.str.clusters.oneliner]
en = "Returns the grapheme clusters of the string as an array of substrings."

[reference.foundations.str.str.clusters.title]
en = "Clusters"

[reference.foundations.str.str.codepoints.details]
en = "Returns the Unicode codepoints of the string as an array of substrings."

[reference.foundations.str.str.codepoints.oneliner]
en = "Returns the Unicode codepoints of the string as an array of substrings."

[reference.foundations.str.str.codepoints.title]
en = "Codepoints"

[reference.foundations.str.str.contains.details]
en = "Whether the string contains the specified pattern.\n\nThis method also has dedicated syntax: You can write `{\"bc\" in \"abcd\"}`\ninstead of `{\"abcd\".contains(\"bc\")}`."

[reference.foundations.str.str.contains.oneliner]
en = "Whether the string contains the specified pattern."

[reference.foundations.str.str.contains.pattern.details]
en = "The pattern to search for."

[reference.foundations.str.str.contains.title]
en = "Contains"

[reference.foundations.str.str.details]
en = "A sequence of Unicode codepoints.\n\nYou can iterate over the grapheme clusters of the string using a [for\nloop]($scripting/#loops). Grapheme clusters are basically characters but\nkeep together things that belong together, e.g. multiple codepoints that\ntogether form a flag emoji. Strings can be added with the `+` operator,\n[joined together]($scripting/#blocks) and multiplied with integers.\n\nTypst provides utility methods for string manipulation. Many of these\nmethods (e.g., `split`, `trim` and `replace`) operate on _patterns:_ A\npattern can be either a string or a [regular expression]($regex). This makes\nthe methods quite versatile.\n\nAll lengths and indices are expressed in terms of UTF-8 bytes. Indices are\nzero-based and negative indices wrap around to the end of the string.\n\nYou can convert a value to a string with this type's constructor.\n\n# Example\n```example\n#\"hello world!\" \\\n#\"\\\"hello\\n  world\\\"!\" \\\n#\"1 2 3\".split() \\\n#\"1,2;3\".split(regex(\"[,;]\")) \\\n#(regex(\"\\d+\") in \"ten euros\") \\\n#(regex(\"\\d+\") in \"10 euros\")\n```\n\n# Escape sequences { #escapes }\nJust like in markup, you can escape a few symbols in strings:\n- `[\\\\]` for a backslash\n- `[\\\"]` for a quote\n- `[\\n]` for a newline\n- `[\\r]` for a carriage return\n- `[\\t]` for a tab\n- `[\\u{1f600}]` for a hexadecimal Unicode escape sequence"

[reference.foundations.str.str.ends-with.details]
en = "Whether the string ends with the specified pattern."

[reference.foundations.str.str.ends-with.oneliner]
en = "Whether the string ends with the specified pattern."

[reference.foundations.str.str.ends-with.pattern.details]
en = "The pattern the string might end with."

[reference.foundations.str.str.ends-with.title]
en = "Ends With"

[reference.foundations.str.str.find.details]
en = "Searches for the specified pattern in the string and returns the first\nmatch as a string or `{none}` if there is no match."

[reference.foundations.str.str.find.oneliner]
en = "Searches for the specified pattern in the string and returns the first"

[reference.foundations.str.str.find.pattern.details]
en = "The pattern to search for."

[reference.foundations.str.str.find.title]
en = "Find"

[reference.foundations.str.str.first.details]
en = "Extracts the first grapheme cluster of the string.\nFails with an error if the string is empty."

[reference.foundations.str.str.first.oneliner]
en = "Extracts the first grapheme cluster of the string."

[reference.foundations.str.str.first.title]
en = "First"

[reference.foundations.str.str.from-unicode.details]
en = "Converts a unicode code point into its corresponding string.\n\n"

[reference.foundations.str.str.from-unicode.oneliner]
en = "Converts a unicode code point into its corresponding string."

[reference.foundations.str.str.from-unicode.title]
en = "From Unicode"

[reference.foundations.str.str.from-unicode.value.details]
en = "The code point that should be converted."

[reference.foundations.str.str.last.details]
en = "Extracts the last grapheme cluster of the string.\nFails with an error if the string is empty."

[reference.foundations.str.str.last.oneliner]
en = "Extracts the last grapheme cluster of the string."

[reference.foundations.str.str.last.title]
en = "Last"

[reference.foundations.str.str.len.details]
en = "The length of the string in UTF-8 encoded bytes."

[reference.foundations.str.str.len.oneliner]
en = "The length of the string in UTF-8 encoded bytes."

[reference.foundations.str.str.len.title]
en = "Length"

[reference.foundations.str.str.match.details]
en = "Searches for the specified pattern in the string and returns a\ndictionary with details about the first match or `{none}` if there is no\nmatch.\n\nThe returned dictionary has the following keys:\n- `start`: The start offset of the match\n- `end`: The end offset of the match\n- `text`: The text that matched.\n- `captures`: An array containing a string for each matched capturing\n  group. The first item of the array contains the first matched\n  capturing, not the whole match! This is empty unless the `pattern` was\n  a regex with capturing groups."

[reference.foundations.str.str.match.oneliner]
en = "Searches for the specified pattern in the string and returns a"

[reference.foundations.str.str.match.pattern.details]
en = "The pattern to search for."

[reference.foundations.str.str.match.title]
en = "Match"

[reference.foundations.str.str.matches.details]
en = "Searches for the specified pattern in the string and returns an array of\ndictionaries with details about all matches. For details about the\nreturned dictionaries, see above."

[reference.foundations.str.str.matches.oneliner]
en = "Searches for the specified pattern in the string and returns an array of"

[reference.foundations.str.str.matches.pattern.details]
en = "The pattern to search for."

[reference.foundations.str.str.matches.title]
en = "Matches"

[reference.foundations.str.str.oneliner]
en = "A sequence of Unicode codepoints."

[reference.foundations.str.str.position.details]
en = "Searches for the specified pattern in the string and returns the index\nof the first match as an integer or `{none}` if there is no match."

[reference.foundations.str.str.position.oneliner]
en = "Searches for the specified pattern in the string and returns the index"

[reference.foundations.str.str.position.pattern.details]
en = "The pattern to search for."

[reference.foundations.str.str.position.title]
en = "Position"

[reference.foundations.str.str.replace.count.details]
en = "If given, only the first `count` matches of the pattern are placed."

[reference.foundations.str.str.replace.details]
en = "Replace at most `count` occurrences of the given pattern with a\nreplacement string or function (beginning from the start). If no count\nis given, all occurrences are replaced."

[reference.foundations.str.str.replace.oneliner]
en = "Replace at most `count` occurrences of the given pattern with a"

[reference.foundations.str.str.replace.pattern.details]
en = "The pattern to search for."

[reference.foundations.str.str.replace.replacement.details]
en = "The string to replace the matches with or a function that gets a\ndictionary for each match and can return individual replacement\nstrings."

[reference.foundations.str.str.replace.title]
en = "Replace"

[reference.foundations.str.str.rev.details]
en = "Reverse the string."

[reference.foundations.str.str.rev.oneliner]
en = "Reverse the string."

[reference.foundations.str.str.rev.title]
en = "Reverse"

[reference.foundations.str.str.slice.count.details]
en = "The number of bytes to extract. This is equivalent to passing\n`start + count` as the `end` position. Mutually exclusive with `end`."

[reference.foundations.str.str.slice.details]
en = "Extracts a substring of the string.\nFails with an error if the start or end index is out of bounds."

[reference.foundations.str.str.slice.end.details]
en = "The end byte index (exclusive). If omitted, the whole slice until\nthe end of the string is extracted. If negative, indexes from the\nback."

[reference.foundations.str.str.slice.oneliner]
en = "Extracts a substring of the string."

[reference.foundations.str.str.slice.start.details]
en = "The start byte index (inclusive). If negative, indexes from the\nback."

[reference.foundations.str.str.slice.title]
en = "Slice"

[reference.foundations.str.str.split.details]
en = "Splits a string at matches of a specified pattern and returns an array\nof the resulting parts.\n\nWhen the empty string is used as a separator, it separates every\ncharacter (i.e., Unicode code point) in the string, along with the\nbeginning and end of the string. In practice, this means that the\nresulting list of parts will contain the empty string at the start\nand end of the list."

[reference.foundations.str.str.split.oneliner]
en = "Splits a string at matches of a specified pattern and returns an array"

[reference.foundations.str.str.split.pattern.details]
en = "The pattern to split at. Defaults to whitespace."

[reference.foundations.str.str.split.title]
en = "Split"

[reference.foundations.str.str.starts-with.details]
en = "Whether the string starts with the specified pattern."

[reference.foundations.str.str.starts-with.oneliner]
en = "Whether the string starts with the specified pattern."

[reference.foundations.str.str.starts-with.pattern.details]
en = "The pattern the string might start with."

[reference.foundations.str.str.starts-with.title]
en = "Starts With"

[reference.foundations.str.str.str.base.details]
en = "The base (radix) to display integers in, between 2 and 36."

[reference.foundations.str.str.str.details]
en = "Converts a value to a string.\n\n- Integers are formatted in base 10. This can be overridden with the\n  optional `base` parameter.\n- Floats are formatted in base 10 and never in exponential notation.\n- Negative integers and floats are formatted with the Unicode minus sign\n  (\"−\" U+2212) instead of the ASCII minus sign (\"-\" U+002D).\n- From labels the name is extracted.\n- Bytes are decoded as UTF-8.\n\nIf you wish to convert from and to Unicode code points, see the\n[`to-unicode`]($str.to-unicode) and [`from-unicode`]($str.from-unicode)\nfunctions.\n\n"

[reference.foundations.str.str.str.oneliner]
en = "Converts a value to a string."

[reference.foundations.str.str.str.title]
en = "Construct"

[reference.foundations.str.str.str.value.details]
en = "The value that should be converted to a string."

[reference.foundations.str.str.title]
en = "String"

[reference.foundations.str.str.to-unicode.character.details]
en = "The character that should be converted."

[reference.foundations.str.str.to-unicode.details]
en = "Converts a character into its corresponding code point.\n\n"

[reference.foundations.str.str.to-unicode.oneliner]
en = "Converts a character into its corresponding code point."

[reference.foundations.str.str.to-unicode.title]
en = "To Unicode"

[reference.foundations.str.str.trim.at.details]
en = "Can be `{start}` or `{end}` to only trim the start or end of the\nstring. If omitted, both sides are trimmed."

[reference.foundations.str.str.trim.details]
en = "Removes matches of a pattern from one or both sides of the string, once or\nrepeatedly and returns the resulting string."

[reference.foundations.str.str.trim.oneliner]
en = "Removes matches of a pattern from one or both sides of the string, once or"

[reference.foundations.str.str.trim.pattern.details]
en = "The pattern to search for. If `{none}`, trims white spaces."

[reference.foundations.str.str.trim.repeat.details]
en = "Whether to repeatedly removes matches of the pattern or just once.\nDefaults to `{true}`."

[reference.foundations.str.str.trim.title]
en = "Trim"

[reference.foundations.str.title]
en = "String"

[reference.foundations.symbol.description]
en = "Documentation for the Symbol type."

[reference.foundations.symbol.oneliner]
en = "A Unicode symbol."

[reference.foundations.symbol.symbol.details]
en = "A Unicode symbol.\n\nTypst defines common symbols so that they can easily be written with\nstandard keyboards. The symbols are defined in modules, from which they can\nbe accessed using [field access notation]($scripting/#fields):\n\n- General symbols are defined in the [`sym` module]($category/symbols/sym)\n- Emoji are defined in the [`emoji` module]($category/symbols/emoji)\n\nMoreover, you can define custom symbols with this type's constructor\nfunction.\n\n```example\n#sym.arrow.r \\\n#sym.gt.eq.not \\\n$gt.eq.not$ \\\n#emoji.face.halo\n```\n\nMany symbols have different variants, which can be selected by appending the\nmodifiers with dot notation. The order of the modifiers is not relevant.\nVisit the documentation pages of the symbol modules and click on a symbol to\nsee its available variants.\n\n```example\n$arrow.l$ \\\n$arrow.r$ \\\n$arrow.t.quad$\n```"

[reference.foundations.symbol.symbol.oneliner]
en = "A Unicode symbol."

[reference.foundations.symbol.symbol.symbol.details]
en = "Create a custom symbol with modifiers.\n\n"

[reference.foundations.symbol.symbol.symbol.oneliner]
en = "Create a custom symbol with modifiers."

[reference.foundations.symbol.symbol.symbol.title]
en = "Construct"

[reference.foundations.symbol.symbol.symbol.variants.details]
en = "The variants of the symbol.\n\nCan be a just a string consisting of a single character for the\nmodifierless variant or an array with two strings specifying the modifiers\nand the symbol. Individual modifiers should be separated by dots. When\ndisplaying a symbol, Typst selects the first from the variants that have\nall attached modifiers and the minimum number of other modifiers."

[reference.foundations.symbol.symbol.title]
en = "Symbol"

[reference.foundations.symbol.title]
en = "Symbol"

[reference.foundations.sys.description]
en = "Documentation for the sys functions."

[reference.foundations.sys.oneliner]
en = "Module for system interactions."

[reference.foundations.sys.sys.details]
en = "Module for system interactions.\n\nThis module defines the following items:\n\n- The `sys.version` constant (of type [`version`]) that specifies\n  the currently active Typst compiler version.\n\n- The `sys.inputs` [dictionary], which makes external inputs\n  available to the project. An input specified in the command line as\n  `--input key=value` becomes available under `sys.inputs.key` as\n  `{\"value\"}`. To include spaces in the value, it may be enclosed with\n  single or double quotes.\n\n  The value is always of type [string]($str). More complex data\n  may be parsed manually using functions like [`json.decode`]($json.decode).\n"

[reference.foundations.sys.sys.title]
en = "System"

[reference.foundations.sys.title]
en = "System"

[reference.foundations.target.description]
en = "Documentation for the `target` function."

[reference.foundations.target.oneliner]
en = "Returns the current export target."

[reference.foundations.target.target.details]
en = "Returns the current export target.\n\nThis function returns either\n- `{\"paged\"}` (for PDF, PNG, and SVG export), or\n- `{\"html\"}` (for HTML export).\n\nThe design of this function is not yet finalized and for this reason it is\nguarded behind the `html` feature. Visit the [HTML documentation\npage]($html) for more details.\n\n# When to use it\nThis function allows you to format your document properly across both HTML\nand paged export targets. It should primarily be used in templates and show\nrules, rather than directly in content. This way, the document's contents\ncan be fully agnostic to the export target and content can be shared between\nPDF and HTML export.\n\n# Varying targets\nThis function is [contextual]($context) as the target can vary within a\nsingle compilation: When exporting to HTML, the target will be `{\"paged\"}`\nwhile within an [`html.frame`].\n\n# Example\n```example\n#let kbd(it) = context {\n  if target() == \"html\" {\n    html.elem(\"kbd\", it)\n  } else {\n    set text(fill: rgb(\"#1f2328\"))\n    let r = 3pt\n    box(\n      fill: rgb(\"#f6f8fa\"),\n      stroke: rgb(\"#d1d9e0b3\"),\n      outset: (y: r),\n      inset: (x: r),\n      radius: r,\n      raw(it)\n    )\n  }\n}\n\nPress #kbd(\"F1\") for help.\n```"

[reference.foundations.target.target.oneliner]
en = "Returns the current export target."

[reference.foundations.target.target.title]
en = "Target"

[reference.foundations.target.title]
en = "Target"

[reference.foundations.title]
en = "Foundations"

[reference.foundations.type.description]
en = "Documentation for the Type type."

[reference.foundations.type.oneliner]
en = "Describes a kind of value."

[reference.foundations.type.title]
en = "Type"

[reference.foundations.type.type.details]
en = "Describes a kind of value.\n\nTo style your document, you need to work with values of different kinds:\nLengths specifying the size of your elements, colors for your text and\nshapes, and more. Typst categorizes these into clearly defined _types_ and\ntells you where it expects which type of value.\n\nApart from basic types for numeric values and [typical]($int)\n[types]($float) [known]($str) [from]($array) [programming]($dictionary)\nlanguages, Typst provides a special type for [_content._]($content) A value\nof this type can hold anything that you can enter into your document: Text,\nelements like headings and shapes, and style information.\n\n# Example\n```example\n#let x = 10\n#if type(x) == int [\n  #x is an integer!\n] else [\n  #x is another value...\n]\n\nAn image is of type\n#type(image(\"glacier.jpg\")).\n```\n\nThe type of `10` is `int`. Now, what is the type of `int` or even `type`?\n```example\n#type(int) \\\n#type(type)\n```\n\n# Compatibility\nIn Typst 0.7 and lower, the `type` function returned a string instead of a\ntype. Compatibility with the old way will remain until Typst 0.14 to give\npackage authors time to upgrade.\n\n- Checks like `{int == \"integer\"}` evaluate to `{true}`\n- Adding/joining a type and string will yield a string\n- The `{in}` operator on a type and a dictionary will evaluate to `{true}`\n  if the dictionary has a string key matching the type's name"

[reference.foundations.type.type.oneliner]
en = "Describes a kind of value."

[reference.foundations.type.type.title]
en = "Type"

[reference.foundations.type.type.type.details]
en = "Determines a value's type.\n\n"

[reference.foundations.type.type.type.oneliner]
en = "Determines a value's type."

[reference.foundations.type.type.type.title]
en = "Construct"

[reference.foundations.type.type.type.value.details]
en = "The value whose type's to determine."

[reference.foundations.version.description]
en = "Documentation for the Version type."

[reference.foundations.version.oneliner]
en = "A version with an arbitrary number of components."

[reference.foundations.version.title]
en = "Version"

[reference.foundations.version.version.at.details]
en = "Retrieves a component of a version.\n\nThe returned integer is always non-negative. Returns `0` if the version\nisn't specified to the necessary length."

[reference.foundations.version.version.at.index.details]
en = "The index at which to retrieve the component. If negative, indexes\nfrom the back of the explicitly given components."

[reference.foundations.version.version.at.oneliner]
en = "Retrieves a component of a version."

[reference.foundations.version.version.at.title]
en = "At"

[reference.foundations.version.version.details]
en = "A version with an arbitrary number of components.\n\nThe first three components have names that can be used as fields: `major`,\n`minor`, `patch`. All following components do not have names.\n\nThe list of components is semantically extended by an infinite list of\nzeros. This means that, for example, `0.8` is the same as `0.8.0`. As a\nspecial case, the empty version (that has no components at all) is the same\nas `0`, `0.0`, `0.0.0`, and so on.\n\nThe current version of the Typst compiler is available as `sys.version`.\n\nYou can convert a version to an array of explicitly given components using\nthe [`array`] constructor."

[reference.foundations.version.version.oneliner]
en = "A version with an arbitrary number of components."

[reference.foundations.version.version.title]
en = "Version"

[reference.foundations.version.version.version.components.details]
en = "The components of the version (array arguments are flattened)"

[reference.foundations.version.version.version.details]
en = "Creates a new version.\n\nIt can have any number of components (even zero).\n\n"

[reference.foundations.version.version.version.oneliner]
en = "Creates a new version."

[reference.foundations.version.version.version.title]
en = "Construct"

[reference.html.description]
en = "Documentation for functions related to HTML in Typst."

[reference.html.elem.description]
en = "Documentation for the `elem` function."

[reference.html.elem.elem.attrs.details]
en = "The element's HTML attributes."

[reference.html.elem.elem.body.details]
en = "The contents of the HTML element.\n\nThe body can be arbitrary Typst content."

[reference.html.elem.elem.details]
en = "An HTML element that can contain Typst content.\n\nTypst's HTML export automatically generates the appropriate tags for most\nelements. However, sometimes, it is desirable to retain more control. For\nexample, when using Typst to generate your blog, you could use this function\nto wrap each article in an `<article>` tag.\n\nTypst is aware of what is valid HTML. A tag and its attributes must form\nsyntactically valid HTML. Some tags, like `meta` do not accept content.\nHence, you must not provide a body for them. We may add more checks in the\nfuture, so be sure that you are generating valid HTML when using this\nfunction.\n\nNormally, Typst will generate `html`, `head`, and `body` tags for you. If\nyou instead create them with this function, Typst will omit its own tags.\n\n```typ\n#html.elem(\"div\", attrs: (style: \"background: aqua\"))[\n  A div with _Typst content_ inside!\n]\n```"

[reference.html.elem.elem.oneliner]
en = "An HTML element that can contain Typst content."

[reference.html.elem.elem.tag.details]
en = "The element's tag."

[reference.html.elem.elem.title]
en = "Elem"

[reference.html.elem.oneliner]
en = "An HTML element that can contain Typst content."

[reference.html.elem.title]
en = "Elem"

[reference.html.frame.description]
en = "Documentation for the `frame` function."

[reference.html.frame.frame.body.details]
en = "The content that shall be laid out."

[reference.html.frame.frame.details]
en = "An element that lays out its content as an inline SVG.\n\nSometimes, converting Typst content to HTML is not desirable. This can be\nthe case for plots and other content that relies on positioning and styling\nto convey its message.\n\nThis function allows you to use the Typst layout engine that would also be\nused for PDF, SVG, and PNG export to render a part of your document exactly\nhow it would appear when exported in one of these formats. It embeds the\ncontent as an inline SVG."

[reference.html.frame.frame.oneliner]
en = "An element that lays out its content as an inline SVG."

[reference.html.frame.frame.title]
en = "Frame"

[reference.html.frame.oneliner]
en = "An element that lays out its content as an inline SVG."

[reference.html.frame.title]
en = "Frame"

[reference.html.html.details]
en = "<div class=\"info-box\">\n\nTypst's HTML export is currently under active development. The feature is still\nvery incomplete and only available for experimentation behind a feature flag. Do\nnot use this feature for production use cases. In the CLI, you can experiment\nwith HTML export by passing `--features html` or setting the `TYPST_FEATURES`\nenvironment variables to `html`. In the web app, HTML export is not available at\nthis time. Visit the [tracking issue](https://github.com/typst/typst/issues/5512)\nto follow progress on HTML export and learn more about planned features.\n</div>\n\nHTML files describe a document structurally. The aim of Typst's HTML export is\nto capture the structure of an input document and produce semantically rich HTML\nthat retains this structure. The resulting HTML should be accessible,\nhuman-readable, and editable by hand and downstream tools.\n\nPDF, PNG, and SVG export, in contrast, all produce _visual_ representations of a\nfully-laid out document. This divergence in the formats' intents means that\nTypst cannot simply produce perfect HTML for your existing Typst documents. It\ncannot always know what the best semantic HTML representation of your content\nis.\n\nInstead, it gives _you_ full control: You can check the current export format\nthrough the [`target`] function and when it is set to HTML, generate [raw HTML\nelements]($html.elem). The primary intended use of these elements is in\ntemplates and show rules. This way, the document's contents can be fully\nagnostic to the export target and content can be shared between PDF and HTML\nexport.\n\nCurrently, Typst will always output a single HTML file. Support for outputting\ndirectories with multiple HTML documents and assets, as well as support for\noutputting fragments that can be integrated into other HTML documents is\nplanned.\n\nTypst currently does not output CSS style sheets, instead focussing on emitting\nsemantic markup. You can of course write your own CSS styles and still benefit\nfrom sharing your _content_ between PDF and HTML. For the future, we plan to\ngive you the option of automatically emitting CSS, taking more of your existing\nset rules into account.\n\n# Exporting as HTML\n## Command Line\nPass `--format html` to the `compile` or `watch` subcommand or provide an output\nfile name that ends with `.html`. Note that you must also pass `--features html`\nor set `TYPST_FEATURES=html` to enable this experimental export target.\n\nWhen using `typst watch`, Typst will spin up a live-reloading HTTP server. You\ncan configure it as follows:\n\n- Pass `--port` to change the port. (Defaults to the first free port in the\n  range 3000-3005.)\n- Pass `--no-reload` to disable injection of a live reload script. (The HTML\n  that is written to disk isn't affected either way.)\n- Pass `--no-serve` to disable the server altogether.\n\n## Web App\nNot currently available.\n\n# HTML-specific functionality\nTypst exposes HTML-specific functionality in the global `html` module. See below\nfor the definitions it contains.\n"

[reference.html.html.title]
en = "HTML"

[reference.html.title]
en = "HTML"

[reference.introspection.counter.counter.at.details]
en = "Retrieves the value of the counter at the given location. Always returns\nan array of integers, even if the counter has just one number.\n\nThe `selector` must match exactly one element in the document. The most\nuseful kinds of selectors for this are [labels]($label) and\n[locations]($location)."

[reference.introspection.counter.counter.at.oneliner]
en = "Retrieves the value of the counter at the given location. Always returns"

[reference.introspection.counter.counter.at.selector.details]
en = "The place at which the counter's value should be retrieved."

[reference.introspection.counter.counter.at.title]
en = "At"

[reference.introspection.counter.counter.counter.details]
en = "Create a new counter identified by a key."

[reference.introspection.counter.counter.counter.key.details]
en = "The key that identifies this counter.\n\n- If it is a string, creates a custom counter that is only affected\n  by manual updates,\n- If it is the [`page`] function, counts through pages,\n- If it is a [selector], counts through elements that matches with the\n  selector. For example,\n  - provide an element function: counts elements of that type,\n  - provide a [`{<label>}`]($label): counts elements with that label."

[reference.introspection.counter.counter.counter.oneliner]
en = "Create a new counter identified by a key."

[reference.introspection.counter.counter.counter.title]
en = "Construct"

[reference.introspection.counter.counter.details]
en = "Counts through pages, elements, and more.\n\nWith the counter function, you can access and modify counters for pages,\nheadings, figures, and more. Moreover, you can define custom counters for\nother things you want to count.\n\nSince counters change throughout the course of the document, their current\nvalue is _contextual._ It is recommended to read the chapter on [context]\nbefore continuing here.\n\n# Accessing a counter { #accessing }\nTo access the raw value of a counter, we can use the [`get`]($counter.get)\nfunction. This function returns an [array]: Counters can have multiple\nlevels (in the case of headings for sections, subsections, and so on), and\neach item in the array corresponds to one level.\n\n```example\n#set heading(numbering: \"1.\")\n\n= Introduction\nRaw value of heading counter is\n#context counter(heading).get()\n```\n\n# Displaying a counter { #displaying }\nOften, we want to display the value of a counter in a more human-readable\nway. To do that, we can call the [`display`]($counter.display) function on\nthe counter. This function retrieves the current counter value and formats\nit either with a provided or with an automatically inferred [numbering].\n\n```example\n#set heading(numbering: \"1.\")\n\n= Introduction\nSome text here.\n\n= Background\nThe current value is: #context {\n  counter(heading).display()\n}\n\nOr in roman numerals: #context {\n  counter(heading).display(\"I\")\n}\n```\n\n# Modifying a counter { #modifying }\nTo modify a counter, you can use the `step` and `update` methods:\n\n- The `step` method increases the value of the counter by one. Because\n  counters can have multiple levels , it optionally takes a `level`\n  argument. If given, the counter steps at the given depth.\n\n- The `update` method allows you to arbitrarily modify the counter. In its\n  basic form, you give it an integer (or an array for multiple levels). For\n  more flexibility, you can instead also give it a function that receives\n  the current value and returns a new value.\n\nThe heading counter is stepped before the heading is displayed, so\n`Analysis` gets the number seven even though the counter is at six after the\nsecond update.\n\n```example\n#set heading(numbering: \"1.\")\n\n= Introduction\n#counter(heading).step()\n\n= Background\n#counter(heading).update(3)\n#counter(heading).update(n => n * 2)\n\n= Analysis\nLet's skip 7.1.\n#counter(heading).step(level: 2)\n\n== Analysis\nStill at #context {\n  counter(heading).display()\n}\n```\n\n# Page counter\nThe page counter is special. It is automatically stepped at each pagebreak.\nBut like other counters, you can also step it manually. For example, you\ncould have Roman page numbers for your preface, then switch to Arabic page\nnumbers for your main content and reset the page counter to one.\n\n```example\n>>> #set page(\n>>>   height: 100pt,\n>>>   margin: (bottom: 24pt, rest: 16pt),\n>>> )\n#set page(numbering: \"(i)\")\n\n= Preface\nThe preface is numbered with\nroman numerals.\n\n#set page(numbering: \"1 / 1\")\n#counter(page).update(1)\n\n= Main text\nHere, the counter is reset to one.\nWe also display both the current\npage and total number of pages in\nArabic numbers.\n```\n\n# Custom counters\nTo define your own counter, call the `counter` function with a string as a\nkey. This key identifies the counter globally.\n\n```example\n#let mine = counter(\"mycounter\")\n#context mine.display() \\\n#mine.step()\n#context mine.display() \\\n#mine.update(c => c * 3)\n#context mine.display()\n```\n\n# How to step\nWhen you define and use a custom counter, in general, you should first step\nthe counter and then display it. This way, the stepping behaviour of a\ncounter can depend on the element it is stepped for. If you were writing a\ncounter for, let's say, theorems, your theorem's definition would thus first\ninclude the counter step and only then display the counter and the theorem's\ncontents.\n\n```example\n#let c = counter(\"theorem\")\n#let theorem(it) = block[\n  #c.step()\n  *Theorem #context c.display():*\n  #it\n]\n\n#theorem[$1 = 1$]\n#theorem[$2 < 3$]\n```\n\nThe rationale behind this is best explained on the example of the heading\ncounter: An update to the heading counter depends on the heading's level. By\nstepping directly before the heading, we can correctly step from `1` to\n`1.1` when encountering a level 2 heading. If we were to step after the\nheading, we wouldn't know what to step to.\n\nBecause counters should always be stepped before the elements they count,\nthey always start at zero. This way, they are at one for the first display\n(which happens after the first step).\n\n# Time travel\nCounters can travel through time! You can find out the final value of the\ncounter before it is reached and even determine what the value was at any\nparticular location in the document.\n\n```example\n#let mine = counter(\"mycounter\")\n\n= Values\n#context [\n  Value here: #mine.get() \\\n  At intro: #mine.at(<intro>) \\\n  Final value: #mine.final()\n]\n\n#mine.update(n => n + 3)\n\n= Introduction <intro>\n#lorem(10)\n\n#mine.step()\n#mine.step()\n```\n\n# Other kinds of state { #other-state }\nThe `counter` type is closely related to [state] type. Read its\ndocumentation for more details on state management in Typst and why it\ndoesn't just use normal variables for counters."

[reference.introspection.counter.counter.display.both.details]
en = "If enabled, displays the current and final top-level count together.\nBoth can be styled through a single numbering pattern. This is used\nby the page numbering property to display the current and total\nnumber of pages when a pattern like `{\"1 / 1\"}` is given."

[reference.introspection.counter.counter.display.details]
en = "Displays the current value of the counter with a numbering and returns\nthe formatted output."

[reference.introspection.counter.counter.display.numbering.details]
en = "A [numbering pattern or a function]($numbering), which specifies how\nto display the counter. If given a function, that function receives\neach number of the counter as a separate argument. If the amount of\nnumbers varies, e.g. for the heading argument, you can use an\n[argument sink]($arguments).\n\nIf this is omitted or set to `{auto}`, displays the counter with the\nnumbering style for the counted element or with the pattern\n`{\"1.1\"}` if no such style exists."

[reference.introspection.counter.counter.display.oneliner]
en = "Displays the current value of the counter with a numbering and returns"

[reference.introspection.counter.counter.display.title]
en = "Display"

[reference.introspection.counter.counter.final.details]
en = "Retrieves the value of the counter at the end of the document. Always\nreturns an array of integers, even if the counter has just one number."

[reference.introspection.counter.counter.final.oneliner]
en = "Retrieves the value of the counter at the end of the document. Always"

[reference.introspection.counter.counter.final.title]
en = "Final"

[reference.introspection.counter.counter.get.details]
en = "Retrieves the value of the counter at the current location. Always\nreturns an array of integers, even if the counter has just one number.\n\nThis is equivalent to `{counter.at(here())}`."

[reference.introspection.counter.counter.get.oneliner]
en = "Retrieves the value of the counter at the current location. Always"

[reference.introspection.counter.counter.get.title]
en = "Get"

[reference.introspection.counter.counter.oneliner]
en = "Counts through pages, elements, and more."

[reference.introspection.counter.counter.step.details]
en = "Increases the value of the counter by one.\n\nThe update will be in effect at the position where the returned content\nis inserted into the document. If you don't put the output into the\ndocument, nothing happens! This would be the case, for example, if you\nwrite `{let _ = counter(page).step()}`. Counter updates are always\napplied in layout order and in that case, Typst wouldn't know when to\nstep the counter."

[reference.introspection.counter.counter.step.level.details]
en = "The depth at which to step the counter. Defaults to `{1}`."

[reference.introspection.counter.counter.step.oneliner]
en = "Increases the value of the counter by one."

[reference.introspection.counter.counter.step.title]
en = "Step"

[reference.introspection.counter.counter.title]
en = "Counter"

[reference.introspection.counter.counter.update.details]
en = "Updates the value of the counter.\n\nJust like with `step`, the update only occurs if you put the resulting\ncontent into the document."

[reference.introspection.counter.counter.update.oneliner]
en = "Updates the value of the counter."

[reference.introspection.counter.counter.update.title]
en = "Update"

[reference.introspection.counter.counter.update.update.details]
en = "If given an integer or array of integers, sets the counter to that\nvalue. If given a function, that function receives the previous\ncounter value (with each number as a separate argument) and has to\nreturn the new value (integer or array)."

[reference.introspection.counter.description]
en = "Documentation for the Counter type."

[reference.introspection.counter.oneliner]
en = "Counts through pages, elements, and more."

[reference.introspection.counter.title]
en = "Counter"

[reference.introspection.description]
en = "Documentation for functions related to Introspection in Typst."

[reference.introspection.here.description]
en = "Documentation for the `here` function."

[reference.introspection.here.here.details]
en = "Provides the current location in the document.\n\nYou can think of `here` as a low-level building block that directly extracts\nthe current location from the active [context]. Some other functions use it\ninternally: For instance, `{counter.get()}` is equivalent to\n`{counter.at(here())}`.\n\nWithin show rules on [locatable]($location/#locatable) elements, `{here()}`\nwill match the location of the shown element.\n\nIf you want to display the current page number, refer to the documentation\nof the [`counter`] type. While `here` can be used to determine the physical\npage number, typically you want the logical page number that may, for\ninstance, have been reset after a preface.\n\n# Examples\nDetermining the current position in the document in combination with the\n[`position`]($location.position) method:\n```example\n#context [\n  I am located at\n  #here().position()\n]\n```\n\nRunning a [query] for elements before the current position:\n```example\n= Introduction\n= Background\n\nThere are\n#context query(\n  selector(heading).before(here())\n).len()\nheadings before me.\n\n= Conclusion\n```\nRefer to the [`selector`] type for more details on before/after selectors."

[reference.introspection.here.here.oneliner]
en = "Provides the current location in the document."

[reference.introspection.here.here.title]
en = "Here"

[reference.introspection.here.oneliner]
en = "Provides the current location in the document."

[reference.introspection.here.title]
en = "Here"

[reference.introspection.introspection.details]
en = "Interactions between document parts.\n\nThis category is home to Typst's introspection capabilities: With the `counter`\nfunction, you can access and manipulate page, section, figure, and equation\ncounters or create custom ones. Meanwhile, the `query` function lets you search\nfor elements in the document to construct things like a list of figures or\nheaders which show the current chapter title.\n\nMost of the functions are _contextual._ It is recommended to read the chapter on\n[context] before continuing here.\n"

[reference.introspection.introspection.title]
en = "Introspection"

[reference.introspection.locate.description]
en = "Documentation for the `locate` function."

[reference.introspection.locate.locate.details]
en = "Determines the location of an element in the document.\n\nTakes a selector that must match exactly one element and returns that\nelement's [`location`]. This location can, in particular, be used to\nretrieve the physical [`page`]($location.page) number and\n[`position`]($location.position) (page, x, y) for that element.\n\n# Examples\nLocating a specific element:\n```example\n#context [\n  Introduction is at: \\\n  #locate(<intro>).position()\n]\n\n= Introduction <intro>\n```"

[reference.introspection.locate.locate.oneliner]
en = "Determines the location of an element in the document."

[reference.introspection.locate.locate.selector.details]
en = "A selector that should match exactly one element. This element will be\nlocated.\n\nEspecially useful in combination with\n- [`here`] to locate the current context,\n- a [`location`] retrieved from some queried element via the\n  [`location()`]($content.location) method on content."

[reference.introspection.locate.locate.title]
en = "Locate"

[reference.introspection.locate.oneliner]
en = "Determines the location of an element in the document."

[reference.introspection.locate.title]
en = "Locate"

[reference.introspection.location.description]
en = "Documentation for the Location type."

[reference.introspection.location.location.details]
en = "Identifies an element in the document.\n\nA location uniquely identifies an element in the document and lets you\naccess its absolute position on the pages. You can retrieve the current\nlocation with the [`here`] function and the location of a queried or shown\nelement with the [`location()`]($content.location) method on content.\n\n# Locatable elements { #locatable }\nCurrently, only a subset of element functions is locatable. Aside from\nheadings and figures, this includes equations, references, quotes and all\nelements with an explicit label. As a result, you _can_ query for e.g.\n[`strong`] elements, but you will find only those that have an explicit\nlabel attached to them. This limitation will be resolved in the future."

[reference.introspection.location.location.oneliner]
en = "Identifies an element in the document."

[reference.introspection.location.location.page-numbering.details]
en = "Returns the page numbering pattern of the page at this location. This\ncan be used when displaying the page counter in order to obtain the\nlocal numbering. This is useful if you are building custom indices or\noutlines.\n\nIf the page numbering is set to `{none}` at that location, this function\nreturns `{none}`."

[reference.introspection.location.location.page-numbering.oneliner]
en = "Returns the page numbering pattern of the page at this location. This"

[reference.introspection.location.location.page-numbering.title]
en = "Page Numbering"

[reference.introspection.location.location.page.details]
en = "Returns the page number for this location.\n\nNote that this does not return the value of the [page counter]($counter)\nat this location, but the true page number (starting from one).\n\nIf you want to know the value of the page counter, use\n`{counter(page).at(loc)}` instead.\n\nCan be used with [`here`] to retrieve the physical page position\nof the current context:\n"

[reference.introspection.location.location.page.oneliner]
en = "Returns the page number for this location."

[reference.introspection.location.location.page.title]
en = "Page"

[reference.introspection.location.location.position.details]
en = "Returns a dictionary with the page number and the x, y position for this\nlocation. The page number starts at one and the coordinates are measured\nfrom the top-left of the page.\n\nIf you only need the page number, use `page()` instead as it allows\nTypst to skip unnecessary work."

[reference.introspection.location.location.position.oneliner]
en = "Returns a dictionary with the page number and the x, y position for this"

[reference.introspection.location.location.position.title]
en = "Position"

[reference.introspection.location.location.title]
en = "Location"

[reference.introspection.location.oneliner]
en = "Identifies an element in the document."

[reference.introspection.location.title]
en = "Location"

[reference.introspection.metadata.description]
en = "Documentation for the `metadata` function."

[reference.introspection.metadata.metadata.details]
en = "Exposes a value to the query system without producing visible content.\n\nThis element can be retrieved with the [`query`] function and from the\ncommand line with\n[`typst query`]($reference/introspection/query/#command-line-queries). Its\npurpose is to expose an arbitrary value to the introspection system. To\nidentify a metadata value among others, you can attach a [`label`] to it and\nquery for that label.\n\nThe `metadata` element is especially useful for command line queries because\nit allows you to expose arbitrary values to the outside world.\n\n```example\n// Put metadata somewhere.\n#metadata(\"This is a note\") <note>\n\n// And find it from anywhere else.\n#context {\n  query(<note>).first().value\n}\n```"

[reference.introspection.metadata.metadata.oneliner]
en = "Exposes a value to the query system without producing visible content."

[reference.introspection.metadata.metadata.title]
en = "Metadata"

[reference.introspection.metadata.metadata.value.details]
en = "The value to embed into the document."

[reference.introspection.metadata.oneliner]
en = "Exposes a value to the query system without producing visible content."

[reference.introspection.metadata.title]
en = "Metadata"

[reference.introspection.query.description]
en = "Documentation for the `query` function."

[reference.introspection.query.oneliner]
en = "Finds elements in the document."

[reference.introspection.query.query.details]
en = "Finds elements in the document.\n\nThe `query` functions lets you search your document for elements of a\nparticular type or with a particular label. To use it, you first need to\nensure that [context] is available.\n\n# Finding elements\nIn the example below, we manually create a table of contents instead of\nusing the [`outline`] function.\n\nTo do this, we first query for all headings in the document at level 1 and\nwhere `outlined` is true. Querying only for headings at level 1 ensures\nthat, for the purpose of this example, sub-headings are not included in the\ntable of contents. The `outlined` field is used to exclude the \"Table of\nContents\" heading itself.\n\nNote that we open a `context` to be able to use the `query` function.\n\n```example\n>>> #set page(\n>>>  width: 240pt,\n>>>  height: 180pt,\n>>>  margin: (top: 20pt, bottom: 35pt)\n>>> )\n#set page(numbering: \"1\")\n\n#heading(outlined: false)[\n  Table of Contents\n]\n#context {\n  let chapters = query(\n    heading.where(\n      level: 1,\n      outlined: true,\n    )\n  )\n  for chapter in chapters {\n    let loc = chapter.location()\n    let nr = numbering(\n      loc.page-numbering(),\n      ..counter(page).at(loc),\n    )\n    [#chapter.body #h(1fr) #nr \\ ]\n  }\n}\n\n= Introduction\n#lorem(10)\n#pagebreak()\n\n== Sub-Heading\n#lorem(8)\n\n= Discussion\n#lorem(18)\n```\n\nTo get the page numbers, we first get the location of the elements returned\nby `query` with [`location`]($content.location). We then also retrieve the\n[page numbering]($location.page-numbering) and [page\ncounter]($counter/#page-counter) at that location and apply the numbering to\nthe counter.\n\n# A word of caution { #caution }\nTo resolve all your queries, Typst evaluates and layouts parts of the\ndocument multiple times. However, there is no guarantee that your queries\ncan actually be completely resolved. If you aren't careful a query can\naffect itself—leading to a result that never stabilizes.\n\nIn the example below, we query for all headings in the document. We then\ngenerate as many headings. In the beginning, there's just one heading,\ntitled `Real`. Thus, `count` is `1` and one `Fake` heading is generated.\nTypst sees that the query's result has changed and processes it again. This\ntime, `count` is `2` and two `Fake` headings are generated. This goes on and\non. As we can see, the output has a finite amount of headings. This is\nbecause Typst simply gives up after a few attempts.\n\nIn general, you should try not to write queries that affect themselves. The\nsame words of caution also apply to other introspection features like\n[counters]($counter) and [state].\n\n```example\n= Real\n#context {\n  let elems = query(heading)\n  let count = elems.len()\n  count * [= Fake]\n}\n```\n\n# Command line queries\nYou can also perform queries from the command line with the `typst query`\ncommand. This command executes an arbitrary query on the document and\nreturns the resulting elements in serialized form. Consider the following\n`example.typ` file which contains some invisible [metadata]:\n\n```typ\n#metadata(\"This is a note\") <note>\n```\n\nYou can execute a query on it as follows using Typst's CLI:\n```sh\n$ typst query example.typ \"<note>\"\n[\n  {\n    \"func\": \"metadata\",\n    \"value\": \"This is a note\",\n    \"label\": \"<note>\"\n  }\n]\n```\n\nFrequently, you're interested in only one specific field of the resulting\nelements. In the case of the `metadata` element, the `value` field is the\ninteresting one. You can extract just this field with the `--field`\nargument.\n\n```sh\n$ typst query example.typ \"<note>\" --field value\n[\"This is a note\"]\n```\n\nIf you are interested in just a single element, you can use the `--one`\nflag to extract just it.\n\n```sh\n$ typst query example.typ \"<note>\" --field value --one\n\"This is a note\"\n```"

[reference.introspection.query.query.oneliner]
en = "Finds elements in the document."

[reference.introspection.query.query.target.details]
en = "Can be\n- an element function like a `heading` or `figure`,\n- a `{<label>}`,\n- a more complex selector like `{heading.where(level: 1)}`,\n- or `{selector(heading).before(here())}`.\n\nOnly [locatable]($location/#locatable) element functions are supported."

[reference.introspection.query.query.title]
en = "Query"

[reference.introspection.query.title]
en = "Query"

[reference.introspection.state.description]
en = "Documentation for the State type."

[reference.introspection.state.oneliner]
en = "Manages stateful parts of your document."

[reference.introspection.state.state.at.details]
en = "Retrieves the value of the state at the given selector's unique match.\n\nThe `selector` must match exactly one element in the document. The most\nuseful kinds of selectors for this are [labels]($label) and\n[locations]($location)."

[reference.introspection.state.state.at.oneliner]
en = "Retrieves the value of the state at the given selector's unique match."

[reference.introspection.state.state.at.selector.details]
en = "The place at which the state's value should be retrieved."

[reference.introspection.state.state.at.title]
en = "At"

[reference.introspection.state.state.details]
en = "Manages stateful parts of your document.\n\nLet's say you have some computations in your document and want to remember\nthe result of your last computation to use it in the next one. You might try\nsomething similar to the code below and expect it to output 10, 13, 26, and\n21. However this **does not work** in Typst. If you test this code, you will\nsee that Typst complains with the following error message: _Variables from\noutside the function are read-only and cannot be modified._\n\n```typ\n// This doesn't work!\n#let x = 0\n#let compute(expr) = {\n  x = eval(\n    expr.replace(\"x\", str(x))\n  )\n  [New value is #x. ]\n}\n\n#compute(\"10\") \\\n#compute(\"x + 3\") \\\n#compute(\"x * 2\") \\\n#compute(\"x - 5\")\n```\n\n# State and document markup { #state-and-markup }\nWhy does it do that? Because, in general, this kind of computation with side\neffects is problematic in document markup and Typst is upfront about that.\nFor the results to make sense, the computation must proceed in the same\norder in which the results will be laid out in the document. In our simple\nexample, that's the case, but in general it might not be.\n\nLet's look at a slightly different, but similar kind of state: The heading\nnumbering. We want to increase the heading counter at each heading. Easy\nenough, right? Just add one. Well, it's not that simple. Consider the\nfollowing example:\n\n```example\n#set heading(numbering: \"1.\")\n#let template(body) = [\n  = Outline\n  ...\n  #body\n]\n\n#show: template\n\n= Introduction\n...\n```\n\nHere, Typst first processes the body of the document after the show rule,\nsees the `Introduction` heading, then passes the resulting content to the\n`template` function and only then sees the `Outline`. Just counting up would\nnumber the `Introduction` with `1` and the `Outline` with `2`.\n\n# Managing state in Typst { #state-in-typst }\nSo what do we do instead? We use Typst's state management system. Calling\nthe `state` function with an identifying string key and an optional initial\nvalue gives you a state value which exposes a few functions. The two most\nimportant ones are `get` and `update`:\n\n- The [`get`]($state.get) function retrieves the current value of the state.\n  Because the value can vary over the course of the document, it is a\n  _contextual_ function that can only be used when [context]($context) is\n  available.\n\n- The [`update`]($state.update) function modifies the state. You can give it\n  any value. If given a non-function value, it sets the state to that value.\n  If given a function, that function receives the previous state and has to\n  return the new state.\n\nOur initial example would now look like this:\n\n```example\n#let s = state(\"x\", 0)\n#let compute(expr) = [\n  #s.update(x =>\n    eval(expr.replace(\"x\", str(x)))\n  )\n  New value is #context s.get().\n]\n\n#compute(\"10\") \\\n#compute(\"x + 3\") \\\n#compute(\"x * 2\") \\\n#compute(\"x - 5\")\n```\n\nState managed by Typst is always updated in layout order, not in evaluation\norder. The `update` method returns content and its effect occurs at the\nposition where the returned content is inserted into the document.\n\nAs a result, we can now also store some of the computations in variables,\nbut they still show the correct results:\n\n```example\n>>> #let s = state(\"x\", 0)\n>>> #let compute(expr) = [\n>>>   #s.update(x =>\n>>>     eval(expr.replace(\"x\", str(x)))\n>>>   )\n>>>   New value is #context s.get().\n>>> ]\n<<< ...\n\n#let more = [\n  #compute(\"x * 2\") \\\n  #compute(\"x - 5\")\n]\n\n#compute(\"10\") \\\n#compute(\"x + 3\") \\\n#more\n```\n\nThis example is of course a bit silly, but in practice this is often exactly\nwhat you want! A good example are heading counters, which is why Typst's\n[counting system]($counter) is very similar to its state system.\n\n# Time Travel\nBy using Typst's state management system you also get time travel\ncapabilities! We can find out what the value of the state will be at any\nposition in the document from anywhere else. In particular, the `at` method\ngives us the value of the state at any particular location and the `final`\nmethods gives us the value of the state at the end of the document.\n\n```example\n>>> #let s = state(\"x\", 0)\n>>> #let compute(expr) = [\n>>>   #s.update(x => {\n>>>     eval(expr.replace(\"x\", str(x)))\n>>>   })\n>>>   New value is #context s.get().\n>>> ]\n<<< ...\n\nValue at `<here>` is\n#context s.at(<here>)\n\n#compute(\"10\") \\\n#compute(\"x + 3\") \\\n*Here.* <here> \\\n#compute(\"x * 2\") \\\n#compute(\"x - 5\")\n```\n\n# A word of caution { #caution }\nTo resolve the values of all states, Typst evaluates parts of your code\nmultiple times. However, there is no guarantee that your state manipulation\ncan actually be completely resolved.\n\nFor instance, if you generate state updates depending on the final value of\na state, the results might never converge. The example below illustrates\nthis. We initialize our state with `1` and then update it to its own final\nvalue plus 1. So it should be `2`, but then its final value is `2`, so it\nshould be `3`, and so on. This example displays a finite value because Typst\nsimply gives up after a few attempts.\n\n```example\n// This is bad!\n#let s = state(\"x\", 1)\n#context s.update(s.final() + 1)\n#context s.get()\n```\n\nIn general, you should try not to generate state updates from within context\nexpressions. If possible, try to express your updates as non-contextual\nvalues or functions that compute the new value from the previous value.\nSometimes, it cannot be helped, but in those cases it is up to you to ensure\nthat the result converges."

[reference.introspection.state.state.final.details]
en = "Retrieves the value of the state at the end of the document."

[reference.introspection.state.state.final.oneliner]
en = "Retrieves the value of the state at the end of the document."

[reference.introspection.state.state.final.title]
en = "Final"

[reference.introspection.state.state.get.details]
en = "Retrieves the value of the state at the current location.\n\nThis is equivalent to `{state.at(here())}`."

[reference.introspection.state.state.get.oneliner]
en = "Retrieves the value of the state at the current location."

[reference.introspection.state.state.get.title]
en = "Get"

[reference.introspection.state.state.oneliner]
en = "Manages stateful parts of your document."

[reference.introspection.state.state.state.details]
en = "Create a new state identified by a key."

[reference.introspection.state.state.state.init.details]
en = "The initial value of the state."

[reference.introspection.state.state.state.key.details]
en = "The key that identifies this state."

[reference.introspection.state.state.state.oneliner]
en = "Create a new state identified by a key."

[reference.introspection.state.state.state.title]
en = "Construct"

[reference.introspection.state.state.title]
en = "State"

[reference.introspection.state.state.update.details]
en = "Update the value of the state.\n\nThe update will be in effect at the position where the returned content\nis inserted into the document. If you don't put the output into the\ndocument, nothing happens! This would be the case, for example, if you\nwrite `{let _ = state(\"key\").update(7)}`. State updates are always\napplied in layout order and in that case, Typst wouldn't know when to\nupdate the state."

[reference.introspection.state.state.update.oneliner]
en = "Update the value of the state."

[reference.introspection.state.state.update.title]
en = "Update"

[reference.introspection.state.state.update.update.details]
en = "If given a non function-value, sets the state to that value. If\ngiven a function, that function receives the previous state and has\nto return the new state."

[reference.introspection.state.title]
en = "State"

[reference.introspection.title]
en = "Introspection"

[reference.layout.align.align.alignment.details]
en = "The [alignment] along both axes.\n\n"

[reference.layout.align.align.body.details]
en = "The content to align."

[reference.layout.align.align.details]
en = "Aligns content horizontally and vertically.\n\n# Example\nLet's start with centering our content horizontally:\n```example\n#set page(height: 120pt)\n#set align(center)\n\nCentered text, a sight to see \\\nIn perfect balance, visually \\\nNot left nor right, it stands alone \\\nA work of art, a visual throne\n```\n\nTo center something vertically, use _horizon_ alignment:\n```example\n#set page(height: 120pt)\n#set align(horizon)\n\nVertically centered, \\\nthe stage had entered, \\\na new paragraph.\n```\n\n# Combining alignments\nYou can combine two alignments with the `+` operator. Let's also only apply\nthis to one piece of content by using the function form instead of a set\nrule:\n```example\n#set page(height: 120pt)\nThough left in the beginning ...\n\n#align(right + bottom)[\n  ... they were right in the end, \\\n  and with addition had gotten, \\\n  the paragraph to the bottom!\n]\n```\n\n# Nested alignment\nYou can use varying alignments for layout containers and the elements within\nthem. This way, you can create intricate layouts:\n\n```example\n#align(center, block[\n  #set align(left)\n  Though centered together \\\n  alone \\\n  we \\\n  are \\\n  left.\n])\n```\n\n# Alignment within the same line\nThe `align` function performs block-level alignment and thus always\ninterrupts the current paragraph. To have different alignment for parts\nof the same line, you should use [fractional spacing]($h) instead:\n\n```example\nStart #h(1fr) End\n```"

[reference.layout.align.align.oneliner]
en = "Aligns content horizontally and vertically."

[reference.layout.align.align.title]
en = "Align"

[reference.layout.align.description]
en = "Documentation for the `align` function."

[reference.layout.align.oneliner]
en = "Aligns content horizontally and vertically."

[reference.layout.align.title]
en = "Align"

[reference.layout.alignment.alignment.axis.details]
en = "The axis this alignment belongs to.\n- `{\"horizontal\"}` for `start`, `left`, `center`, `right`, and `end`\n- `{\"vertical\"}` for `top`, `horizon`, and `bottom`\n- `{none}` for 2-dimensional alignments\n\n"

[reference.layout.alignment.alignment.axis.oneliner]
en = "The axis this alignment belongs to."

[reference.layout.alignment.alignment.axis.title]
en = "Axis"

[reference.layout.alignment.alignment.details]
en = "Where to [align] something along an axis.\n\nPossible values are:\n- `start`: Aligns at the [start]($direction.start) of the [text\n  direction]($text.dir).\n- `end`: Aligns at the [end]($direction.end) of the [text\n  direction]($text.dir).\n- `left`: Align at the left.\n- `center`: Aligns in the middle, horizontally.\n- `right`: Aligns at the right.\n- `top`: Aligns at the top.\n- `horizon`: Aligns in the middle, vertically.\n- `bottom`: Align at the bottom.\n\nThese values are available globally and also in the alignment type's scope,\nso you can write either of the following two:\n\n```example\n#align(center)[Hi]\n#align(alignment.center)[Hi]\n```\n\n# 2D alignments\nTo align along both axes at the same time, add the two alignments using the\n`+` operator. For example, `top + right` aligns the content to the top right\ncorner.\n\n```example\n#set page(height: 3cm)\n#align(center + bottom)[Hi]\n```\n\n# Fields\nThe `x` and `y` fields hold the alignment's horizontal and vertical\ncomponents, respectively (as yet another `alignment`). They may be `{none}`.\n\n```example\n#(top + right).x \\\n#left.x \\\n#left.y (none)\n```"

[reference.layout.alignment.alignment.inv.details]
en = "The inverse alignment.\n\n"

[reference.layout.alignment.alignment.inv.oneliner]
en = "The inverse alignment."

[reference.layout.alignment.alignment.inv.title]
en = "Inverse"

[reference.layout.alignment.alignment.oneliner]
en = "Where to [align] something along an axis."

[reference.layout.alignment.alignment.title]
en = "Alignment"

[reference.layout.alignment.description]
en = "Documentation for the Alignment type."

[reference.layout.alignment.oneliner]
en = "Where to [align] something along an axis."

[reference.layout.alignment.title]
en = "Alignment"

[reference.layout.angle.angle.deg.details]
en = "Converts this angle to degrees."

[reference.layout.angle.angle.deg.oneliner]
en = "Converts this angle to degrees."

[reference.layout.angle.angle.deg.title]
en = "Degrees"

[reference.layout.angle.angle.details]
en = "An angle describing a rotation.\n\nTypst supports the following angular units:\n\n- Degrees: `{180deg}`\n- Radians: `{3.14rad}`\n\n# Example\n```example\n#rotate(10deg)[Hello there!]\n```"

[reference.layout.angle.angle.oneliner]
en = "An angle describing a rotation."

[reference.layout.angle.angle.rad.details]
en = "Converts this angle to radians."

[reference.layout.angle.angle.rad.oneliner]
en = "Converts this angle to radians."

[reference.layout.angle.angle.rad.title]
en = "Radians"

[reference.layout.angle.angle.title]
en = "Angle"

[reference.layout.angle.description]
en = "Documentation for the Angle type."

[reference.layout.angle.oneliner]
en = "An angle describing a rotation."

[reference.layout.angle.title]
en = "Angle"

[reference.layout.block.block.above.details]
en = "The spacing between this block and its predecessor."

[reference.layout.block.block.below.details]
en = "The spacing between this block and its successor."

[reference.layout.block.block.body.details]
en = "The contents of the block."

[reference.layout.block.block.breakable.details]
en = "Whether the block can be broken and continue on the next page.\n\n"

[reference.layout.block.block.clip.details]
en = "Whether to clip the content inside the block.\n\nClipping is useful when the block's content is larger than the block itself,\nas any content that exceeds the block's bounds will be hidden.\n\n"

[reference.layout.block.block.details]
en = "A block-level container.\n\nSuch a container can be used to separate content, size it, and give it a\nbackground or border.\n\nBlocks are also the primary way to control whether text becomes part of a\nparagraph or not. See [the paragraph documentation]($par/#what-becomes-a-paragraph)\nfor more details.\n\n# Examples\nWith a block, you can give a background to content while still allowing it\nto break across multiple pages.\n```example\n#set page(height: 100pt)\n#block(\n  fill: luma(230),\n  inset: 8pt,\n  radius: 4pt,\n  lorem(30),\n)\n```\n\nBlocks are also useful to force elements that would otherwise be inline to\nbecome block-level, especially when writing show rules.\n```example\n#show heading: it => it.body\n= Blockless\nMore text.\n\n#show heading: it => block(it.body)\n= Blocky\nMore text.\n```"

[reference.layout.block.block.fill.details]
en = "The block's background color. See the\n[rectangle's documentation]($rect.fill) for more details."

[reference.layout.block.block.height.details]
en = "The block's height. When the height is larger than the remaining space\non a page and [`breakable`]($block.breakable) is `{true}`, the\nblock will continue on the next page with the remaining height.\n\n"

[reference.layout.block.block.inset.details]
en = "How much to pad the block's content. See the\n[box's documentation]($box.inset) for more details."

[reference.layout.block.block.oneliner]
en = "A block-level container."

[reference.layout.block.block.outset.details]
en = "How much to expand the block's size without affecting the layout. See\nthe [box's documentation]($box.outset) for more details."

[reference.layout.block.block.radius.details]
en = "How much to round the block's corners. See the\n[rectangle's documentation]($rect.radius) for more details."

[reference.layout.block.block.spacing.details]
en = "The spacing around the block. When `{auto}`, inherits the paragraph\n[`spacing`]($par.spacing).\n\nFor two adjacent blocks, the larger of the first block's `above` and the\nsecond block's `below` spacing wins. Moreover, block spacing takes\nprecedence over paragraph [`spacing`]($par.spacing).\n\nNote that this is only a shorthand to set `above` and `below` to the\nsame value. Since the values for `above` and `below` might differ, a\n[context] block only provides access to `{block.above}` and\n`{block.below}`, not to `{block.spacing}` directly.\n\nThis property can be used in combination with a show rule to adjust the\nspacing around arbitrary block-level elements.\n\n"

[reference.layout.block.block.sticky.details]
en = "Whether this block must stick to the following one, with no break in\nbetween.\n\nThis is, by default, set on heading blocks to prevent orphaned headings\nat the bottom of the page.\n\n"

[reference.layout.block.block.stroke.details]
en = "The block's border color. See the\n[rectangle's documentation]($rect.stroke) for more details."

[reference.layout.block.block.title]
en = "Block"

[reference.layout.block.block.width.details]
en = "The block's width.\n\n"

[reference.layout.block.description]
en = "Documentation for the `block` function."

[reference.layout.block.oneliner]
en = "A block-level container."

[reference.layout.block.title]
en = "Block"

[reference.layout.box.box.baseline.details]
en = "An amount to shift the box's baseline by.\n\n"

[reference.layout.box.box.body.details]
en = "The contents of the box."

[reference.layout.box.box.clip.details]
en = "Whether to clip the content inside the box.\n\nClipping is useful when the box's content is larger than the box itself,\nas any content that exceeds the box's bounds will be hidden.\n\n"

[reference.layout.box.box.details]
en = "An inline-level container that sizes content.\n\nAll elements except inline math, text, and boxes are block-level and cannot\noccur inside of a [paragraph]($par). The box function can be used to\nintegrate such elements into a paragraph. Boxes take the size of their\ncontents by default but can also be sized explicitly.\n\n# Example\n```example\nRefer to the docs\n#box(\n  height: 9pt,\n  image(\"docs.svg\")\n)\nfor more information.\n```"

[reference.layout.box.box.fill.details]
en = "The box's background color. See the\n[rectangle's documentation]($rect.fill) for more details."

[reference.layout.box.box.height.details]
en = "The height of the box."

[reference.layout.box.box.inset.details]
en = "How much to pad the box's content.\n\n_Note:_ When the box contains text, its exact size depends on the\ncurrent [text edges]($text.top-edge).\n\n"

[reference.layout.box.box.oneliner]
en = "An inline-level container that sizes content."

[reference.layout.box.box.outset.details]
en = "How much to expand the box's size without affecting the layout.\n\nThis is useful to prevent padding from affecting line layout. For a\ngeneralized version of the example below, see the documentation for the\n[raw text's block parameter]($raw.block).\n\n"

[reference.layout.box.box.radius.details]
en = "How much to round the box's corners. See the\n[rectangle's documentation]($rect.radius) for more details."

[reference.layout.box.box.stroke.details]
en = "The box's border color. See the\n[rectangle's documentation]($rect.stroke) for more details."

[reference.layout.box.box.title]
en = "Box"

[reference.layout.box.box.width.details]
en = "The width of the box.\n\nBoxes can have [fractional]($fraction) widths, as the example below\ndemonstrates.\n\n_Note:_ Currently, only boxes and only their widths might be fractionally\nsized within paragraphs. Support for fractionally sized images, shapes,\nand more might be added in the future.\n\n"

[reference.layout.box.description]
en = "Documentation for the `box` function."

[reference.layout.box.oneliner]
en = "An inline-level container that sizes content."

[reference.layout.box.title]
en = "Box"

[reference.layout.colbreak.colbreak.details]
en = "Forces a column break.\n\nThe function will behave like a [page break]($pagebreak) when used in a\nsingle column layout or the last column on a page. Otherwise, content after\nthe column break will be placed in the next column.\n\n# Example\n```example\n#set page(columns: 2)\nPreliminary findings from our\nongoing research project have\nrevealed a hitherto unknown\nphenomenon of extraordinary\nsignificance.\n\n#colbreak()\nThrough rigorous experimentation\nand analysis, we have discovered\na hitherto uncharacterized process\nthat defies our current\nunderstanding of the fundamental\nlaws of nature.\n```"

[reference.layout.colbreak.colbreak.oneliner]
en = "Forces a column break."

[reference.layout.colbreak.colbreak.title]
en = "Column Break"

[reference.layout.colbreak.colbreak.weak.details]
en = "If `{true}`, the column break is skipped if the current column is\nalready empty."

[reference.layout.colbreak.description]
en = "Documentation for the `colbreak` function."

[reference.layout.colbreak.oneliner]
en = "Forces a column break."

[reference.layout.colbreak.title]
en = "Column Break"

[reference.layout.columns.columns.body.details]
en = "The content that should be layouted into the columns."

[reference.layout.columns.columns.count.details]
en = "The number of columns."

[reference.layout.columns.columns.details]
en = "Separates a region into multiple equally sized columns.\n\nThe `column` function lets you separate the interior of any container into\nmultiple columns. It will currently not balance the height of the columns.\nInstead, the columns will take up the height of their container or the\nremaining height on the page. Support for balanced columns is planned for\nthe future.\n\n# Page-level columns { #page-level }\nIf you need to insert columns across your whole document, use the `{page}`\nfunction's [`columns` parameter]($page.columns) instead. This will create\nthe columns directly at the page-level rather than wrapping all of your\ncontent in a layout container. As a result, things like\n[pagebreaks]($pagebreak), [footnotes]($footnote), and [line\nnumbers]($par.line) will continue to work as expected. For more information,\nalso read the [relevant part of the page setup\nguide]($guides/page-setup-guide/#columns).\n\n# Breaking out of columns { #breaking-out }\nTo temporarily break out of columns (e.g. for a paper's title), use\nparent-scoped floating placement:\n\n```example:single\n#set page(columns: 2, height: 150pt)\n\n#place(\n  top + center,\n  scope: \"parent\",\n  float: true,\n  text(1.4em, weight: \"bold\")[\n    My document\n  ],\n)\n\n#lorem(40)\n```"

[reference.layout.columns.columns.gutter.details]
en = "The size of the gutter space between each column."

[reference.layout.columns.columns.oneliner]
en = "Separates a region into multiple equally sized columns."

[reference.layout.columns.columns.title]
en = "Columns"

[reference.layout.columns.description]
en = "Documentation for the `columns` function."

[reference.layout.columns.oneliner]
en = "Separates a region into multiple equally sized columns."

[reference.layout.columns.title]
en = "Columns"

[reference.layout.description]
en = "Documentation for functions related to Layout in Typst."

[reference.layout.direction.description]
en = "Documentation for the Direction type."

[reference.layout.direction.direction.axis.details]
en = "The axis this direction belongs to, either `{\"horizontal\"}` or\n`{\"vertical\"}`.\n\n"

[reference.layout.direction.direction.axis.oneliner]
en = "The axis this direction belongs to, either `{\"horizontal\"}` or"

[reference.layout.direction.direction.axis.title]
en = "Axis"

[reference.layout.direction.direction.details]
en = "The four directions into which content can be laid out.\n\n Possible values are:\n- `{ltr}`: Left to right.\n- `{rtl}`: Right to left.\n- `{ttb}`: Top to bottom.\n- `{btt}`: Bottom to top.\n\nThese values are available globally and\nalso in the direction type's scope, so you can write either of the following\ntwo:\n```example\n#stack(dir: rtl)[A][B][C]\n#stack(dir: direction.rtl)[A][B][C]\n```"

[reference.layout.direction.direction.end.details]
en = "The end point of this direction, as an alignment.\n\n"

[reference.layout.direction.direction.end.oneliner]
en = "The end point of this direction, as an alignment."

[reference.layout.direction.direction.end.title]
en = "End"

[reference.layout.direction.direction.inv.details]
en = "The inverse direction.\n\n"

[reference.layout.direction.direction.inv.oneliner]
en = "The inverse direction."

[reference.layout.direction.direction.inv.title]
en = "Inverse"

[reference.layout.direction.direction.oneliner]
en = "The four directions into which content can be laid out."

[reference.layout.direction.direction.start.details]
en = "The start point of this direction, as an alignment.\n\n"

[reference.layout.direction.direction.start.oneliner]
en = "The start point of this direction, as an alignment."

[reference.layout.direction.direction.start.title]
en = "Start"

[reference.layout.direction.direction.title]
en = "Direction"

[reference.layout.direction.oneliner]
en = "The four directions into which content can be laid out."

[reference.layout.direction.title]
en = "Direction"

[reference.layout.fraction.description]
en = "Documentation for the Fraction type."

[reference.layout.fraction.fraction.details]
en = "Defines how the remaining space in a layout is distributed.\n\nEach fractionally sized element gets space based on the ratio of its\nfraction to the sum of all fractions.\n\nFor more details, also see the [h] and [v] functions and the\n[grid function]($grid).\n\n# Example\n```example\nLeft #h(1fr) Left-ish #h(2fr) Right\n```"

[reference.layout.fraction.fraction.oneliner]
en = "Defines how the remaining space in a layout is distributed."

[reference.layout.fraction.fraction.title]
en = "Fraction"

[reference.layout.fraction.oneliner]
en = "Defines how the remaining space in a layout is distributed."

[reference.layout.fraction.title]
en = "Fraction"

[reference.layout.grid.description]
en = "Documentation for the `grid` function."

[reference.layout.grid.grid.align.details]
en = "How to align the cells' content.\n\nThis can either be a single alignment, an array of alignments\n(corresponding to each column) or a function that returns an alignment.\nThe function receives the cells' column and row indices, starting from\nzero. If set to `{auto}`, the outer alignment is used.\n\nYou can find an example for this argument at the\n[`table.align`]($table.align) parameter."

[reference.layout.grid.grid.cell.align.details]
en = "The cell's [alignment]($grid.align) override."

[reference.layout.grid.grid.cell.body.details]
en = "The cell's body."

[reference.layout.grid.grid.cell.breakable.details]
en = "Whether rows spanned by this cell can be placed in different pages.\nWhen equal to `{auto}`, a cell spanning only fixed-size rows is\nunbreakable, while a cell spanning at least one `{auto}`-sized row is\nbreakable."

[reference.layout.grid.grid.cell.colspan.details]
en = "The amount of columns spanned by this cell."

[reference.layout.grid.grid.cell.details]
en = "A cell in the grid. You can use this function in the argument list of a grid\nto override grid style properties for an individual cell or manually\npositioning it within the grid. You can also use this function in show rules\nto apply certain styles to multiple cells at once.\n\nFor example, you can override the position and stroke for a single cell:\n\n"

[reference.layout.grid.grid.cell.fill.details]
en = "The cell's [fill]($grid.fill) override."

[reference.layout.grid.grid.cell.inset.details]
en = "The cell's [inset]($grid.inset) override."

[reference.layout.grid.grid.cell.oneliner]
en = "A cell in the grid. You can use this function in the argument list of a grid"

[reference.layout.grid.grid.cell.rowspan.details]
en = "The amount of rows spanned by this cell."

[reference.layout.grid.grid.cell.stroke.details]
en = "The cell's [stroke]($grid.stroke) override."

[reference.layout.grid.grid.cell.title]
en = "Grid Cell"

[reference.layout.grid.grid.cell.x.details]
en = "The cell's column (zero-indexed).\nThis field may be used in show rules to style a cell depending on its\ncolumn.\n\nYou may override this field to pick in which column the cell must\nbe placed. If no row (`y`) is chosen, the cell will be placed in the\nfirst row (starting at row 0) with that column available (or a new row\nif none). If both `x` and `y` are chosen, however, the cell will be\nplaced in that exact position. An error is raised if that position is\nnot available (thus, it is usually wise to specify cells with a custom\nposition before cells with automatic positions).\n\n"

[reference.layout.grid.grid.cell.y.details]
en = "The cell's row (zero-indexed).\nThis field may be used in show rules to style a cell depending on its\nrow.\n\nYou may override this field to pick in which row the cell must be\nplaced. If no column (`x`) is chosen, the cell will be placed in the\nfirst column (starting at column 0) available in the chosen row. If all\ncolumns in the chosen row are already occupied, an error is raised.\n\n"

[reference.layout.grid.grid.children.details]
en = "The contents of the grid cells, plus any extra grid lines specified\nwith the [`grid.hline`]($grid.hline) and [`grid.vline`]($grid.vline)\nelements.\n\nThe cells are populated in row-major order."

[reference.layout.grid.grid.column-gutter.details]
en = "The gaps between columns."

[reference.layout.grid.grid.columns.details]
en = "The column sizes.\n\nEither specify a track size array or provide an integer to create a grid\nwith that many `{auto}`-sized columns. Note that opposed to rows and\ngutters, providing a single track size will only ever create a single\ncolumn."

[reference.layout.grid.grid.details]
en = "Arranges content in a grid.\n\nThe grid element allows you to arrange content in a grid. You can define the\nnumber of rows and columns, as well as the size of the gutters between them.\nThere are multiple sizing modes for columns and rows that can be used to\ncreate complex layouts.\n\nWhile the grid and table elements work very similarly, they are intended for\ndifferent use cases and carry different semantics. The grid element is\nintended for presentational and layout purposes, while the\n[`{table}`]($table) element is intended for, in broad terms, presenting\nmultiple related data points. In the future, Typst will annotate its output\nsuch that screenreaders will announce content in `table` as tabular while a\ngrid's content will be announced no different than multiple content blocks\nin the document flow. Set and show rules on one of these elements do not\naffect the other.\n\nA grid's sizing is determined by the track sizes specified in the arguments.\nBecause each of the sizing parameters accepts the same values, we will\nexplain them just once, here. Each sizing argument accepts an array of\nindividual track sizes. A track size is either:\n\n- `{auto}`: The track will be sized to fit its contents. It will be at most\n  as large as the remaining space. If there is more than one `{auto}` track\n  width, and together they claim more than the available space, the `{auto}`\n  tracks will fairly distribute the available space among themselves.\n\n- A fixed or relative length (e.g. `{10pt}` or `{20% - 1cm}`): The track\n  will be exactly of this size.\n\n- A fractional length (e.g. `{1fr}`): Once all other tracks have been sized,\n  the remaining space will be divided among the fractional tracks according\n  to their fractions. For example, if there are two fractional tracks, each\n  with a fraction of `{1fr}`, they will each take up half of the remaining\n  space.\n\nTo specify a single track, the array can be omitted in favor of a single\nvalue. To specify multiple `{auto}` tracks, enter the number of tracks\ninstead of an array. For example, `columns:` `{3}` is equivalent to\n`columns:` `{(auto, auto, auto)}`.\n\n# Examples\nThe example below demonstrates the different track sizing options. It also\nshows how you can use [`grid.cell`]($grid.cell) to make an individual cell\nspan two grid tracks.\n\n```example\n// We use `rect` to emphasize the\n// area of cells.\n#set rect(\n  inset: 8pt,\n  fill: rgb(\"e4e5ea\"),\n  width: 100%,\n)\n\n#grid(\n  columns: (60pt, 1fr, 2fr),\n  rows: (auto, 60pt),\n  gutter: 3pt,\n  rect[Fixed width, auto height],\n  rect[1/3 of the remains],\n  rect[2/3 of the remains],\n  rect(height: 100%)[Fixed height],\n  grid.cell(\n    colspan: 2,\n    image(\"tiger.jpg\", width: 100%),\n  ),\n)\n```\n\nYou can also [spread]($arguments/#spreading) an array of strings or content\ninto a grid to populate its cells.\n\n```example\n#grid(\n  columns: 5,\n  gutter: 5pt,\n  ..range(25).map(str)\n)\n```\n\n# Styling the grid\nThe grid's appearance can be customized through different parameters. These\nare the most important ones:\n\n- [`fill`]($grid.fill) to give all cells a background\n- [`align`]($grid.align) to change how cells are aligned\n- [`inset`]($grid.inset) to optionally add internal padding to each cell\n- [`stroke`]($grid.stroke) to optionally enable grid lines with a certain\n  stroke\n\nIf you need to override one of the above options for a single cell, you can\nuse the [`grid.cell`]($grid.cell) element. Likewise, you can override\nindividual grid lines with the [`grid.hline`]($grid.hline) and\n[`grid.vline`]($grid.vline) elements.\n\nAlternatively, if you need the appearance options to depend on a cell's\nposition (column and row), you may specify a function to `fill` or `align`\nof the form `(column, row) => value`. You may also use a show rule on\n[`grid.cell`]($grid.cell) - see that element's examples or the examples\nbelow for more information.\n\nLocating most of your styling in set and show rules is recommended, as it\nkeeps the grid's or table's actual usages clean and easy to read. It also\nallows you to easily change the grid's appearance in one place.\n\n## Stroke styling precedence\nThere are three ways to set the stroke of a grid cell: through\n[`{grid.cell}`'s `stroke` field]($grid.cell.stroke), by using\n[`{grid.hline}`]($grid.hline) and [`{grid.vline}`]($grid.vline), or by\nsetting the [`{grid}`'s `stroke` field]($grid.stroke). When multiple of\nthese settings are present and conflict, the `hline` and `vline` settings\ntake the highest precedence, followed by the `cell` settings, and finally\nthe `grid` settings.\n\nFurthermore, strokes of a repeated grid header or footer will take\nprecedence over regular cell strokes."

[reference.layout.grid.grid.fill.details]
en = "How to fill the cells.\n\nThis can be a color or a function that returns a color. The function\nreceives the cells' column and row indices, starting from zero. This can\nbe used to implement striped grids.\n\n"

[reference.layout.grid.grid.footer.children.details]
en = "The cells and lines within the footer."

[reference.layout.grid.grid.footer.details]
en = "A repeatable grid footer.\n\nJust like the [`grid.header`]($grid.header) element, the footer can repeat\nitself on every page of the table.\n\nNo other grid cells may be placed after the footer."

[reference.layout.grid.grid.footer.oneliner]
en = "A repeatable grid footer."

[reference.layout.grid.grid.footer.repeat.details]
en = "Whether this footer should be repeated across pages."

[reference.layout.grid.grid.footer.title]
en = "Grid Footer"

[reference.layout.grid.grid.gutter.details]
en = "The gaps between rows and columns.\n\nIf there are more gutters than defined sizes, the last gutter is\nrepeated.\n\nThis is a shorthand to set `column-gutter` and `row-gutter` to the same\nvalue."

[reference.layout.grid.grid.header.children.details]
en = "The cells and lines within the header."

[reference.layout.grid.grid.header.details]
en = "A repeatable grid header.\n\nIf `repeat` is set to `true`, the header will be repeated across pages. For\nan example, refer to the [`table.header`]($table.header) element and the\n[`grid.stroke`]($grid.stroke) parameter."

[reference.layout.grid.grid.header.oneliner]
en = "A repeatable grid header."

[reference.layout.grid.grid.header.repeat.details]
en = "Whether this header should be repeated across pages."

[reference.layout.grid.grid.header.title]
en = "Grid Header"

[reference.layout.grid.grid.hline.details]
en = "A horizontal line in the grid.\n\nOverrides any per-cell stroke, including stroke specified through the grid's\n`stroke` field. Can cross spacing between cells created through the grid's\n`column-gutter` option.\n\nAn example for this function can be found at the\n[`table.hline`]($table.hline) element."

[reference.layout.grid.grid.hline.end.details]
en = "The column before which the horizontal line ends (zero-indexed,\nexclusive).\nTherefore, the horizontal line will be drawn up to and across column\n`end - 1`.\n\nA value equal to `{none}` or to the amount of columns causes it to\nextend all the way towards the end of the grid."

[reference.layout.grid.grid.hline.oneliner]
en = "A horizontal line in the grid."

[reference.layout.grid.grid.hline.position.details]
en = "The position at which the line is placed, given its row (`y`) - either\n`{top}` to draw above it or `{bottom}` to draw below it.\n\nThis setting is only relevant when row gutter is enabled (and\nshouldn't be used otherwise - prefer just increasing the `y` field by\none instead), since then the position below a row becomes different\nfrom the position above the next row due to the spacing between both."

[reference.layout.grid.grid.hline.start.details]
en = "The column at which the horizontal line starts (zero-indexed, inclusive)."

[reference.layout.grid.grid.hline.stroke.details]
en = "The line's stroke.\n\nSpecifying `{none}` removes any lines previously placed across this\nline's range, including hlines or per-cell stroke below it."

[reference.layout.grid.grid.hline.title]
en = "Grid Horizontal Line"

[reference.layout.grid.grid.hline.y.details]
en = "The row above which the horizontal line is placed (zero-indexed).\nIf the `position` field is set to `{bottom}`, the line is placed below\nthe row with the given index instead (see that field's docs for\ndetails).\n\nSpecifying `{auto}` causes the line to be placed at the row below the\nlast automatically positioned cell (that is, cell without coordinate\noverrides) before the line among the grid's children. If there is no\nsuch cell before the line, it is placed at the top of the grid (row 0).\nNote that specifying for this option exactly the total amount of rows\nin the grid causes this horizontal line to override the bottom border\nof the grid, while a value of 0 overrides the top border."

[reference.layout.grid.grid.inset.details]
en = "How much to pad the cells' content.\n\nYou can find an example for this argument at the\n[`table.inset`]($table.inset) parameter."

[reference.layout.grid.grid.oneliner]
en = "Arranges content in a grid."

[reference.layout.grid.grid.row-gutter.details]
en = "The gaps between rows."

[reference.layout.grid.grid.rows.details]
en = "The row sizes.\n\nIf there are more cells than fit the defined rows, the last row is\nrepeated until there are no more cells."

[reference.layout.grid.grid.stroke.details]
en = "How to [stroke]($stroke) the cells.\n\nGrids have no strokes by default, which can be changed by setting this\noption to the desired stroke.\n\nIf it is necessary to place lines which can cross spacing between cells\nproduced by the `gutter` option, or to override the stroke between\nmultiple specific cells, consider specifying one or more of\n[`grid.hline`]($grid.hline) and [`grid.vline`]($grid.vline) alongside\nyour grid cells.\n\n"

[reference.layout.grid.grid.title]
en = "Grid"

[reference.layout.grid.grid.vline.details]
en = "A vertical line in the grid.\n\nOverrides any per-cell stroke, including stroke specified through the\ngrid's `stroke` field. Can cross spacing between cells created through\nthe grid's `row-gutter` option."

[reference.layout.grid.grid.vline.end.details]
en = "The row on top of which the vertical line ends (zero-indexed,\nexclusive).\nTherefore, the vertical line will be drawn up to and across row\n`end - 1`.\n\nA value equal to `{none}` or to the amount of rows causes it to extend\nall the way towards the bottom of the grid."

[reference.layout.grid.grid.vline.oneliner]
en = "A vertical line in the grid."

[reference.layout.grid.grid.vline.position.details]
en = "The position at which the line is placed, given its column (`x`) -\neither `{start}` to draw before it or `{end}` to draw after it.\n\nThe values `{left}` and `{right}` are also accepted, but discouraged as\nthey cause your grid to be inconsistent between left-to-right and\nright-to-left documents.\n\nThis setting is only relevant when column gutter is enabled (and\nshouldn't be used otherwise - prefer just increasing the `x` field by\none instead), since then the position after a column becomes different\nfrom the position before the next column due to the spacing between\nboth."

[reference.layout.grid.grid.vline.start.details]
en = "The row at which the vertical line starts (zero-indexed, inclusive)."

[reference.layout.grid.grid.vline.stroke.details]
en = "The line's stroke.\n\nSpecifying `{none}` removes any lines previously placed across this\nline's range, including vlines or per-cell stroke below it."

[reference.layout.grid.grid.vline.title]
en = "Grid Vertical Line"

[reference.layout.grid.grid.vline.x.details]
en = "The column before which the horizontal line is placed (zero-indexed).\nIf the `position` field is set to `{end}`, the line is placed after the\ncolumn with the given index instead (see that field's docs for\ndetails).\n\nSpecifying `{auto}` causes the line to be placed at the column after\nthe last automatically positioned cell (that is, cell without\ncoordinate overrides) before the line among the grid's children. If\nthere is no such cell before the line, it is placed before the grid's\nfirst column (column 0).\nNote that specifying for this option exactly the total amount of\ncolumns in the grid causes this vertical line to override the end\nborder of the grid (right in LTR, left in RTL), while a value of 0\noverrides the start border (left in LTR, right in RTL)."

[reference.layout.grid.oneliner]
en = "Arranges content in a grid."

[reference.layout.grid.title]
en = "Grid"

[reference.layout.h.description]
en = "Documentation for the `h` function."

[reference.layout.h.h.amount.details]
en = "How much spacing to insert."

[reference.layout.h.h.details]
en = "Inserts horizontal spacing into a paragraph.\n\nThe spacing can be absolute, relative, or fractional. In the last case, the\nremaining space on the line is distributed among all fractional spacings\naccording to their relative fractions.\n\n# Example\n```example\nFirst #h(1cm) Second \\\nFirst #h(30%) Second\n```\n\n# Fractional spacing\nWith fractional spacing, you can align things within a line without forcing\na paragraph break (like [`align`] would). Each fractionally sized element\ngets space based on the ratio of its fraction to the sum of all fractions.\n\n```example\nFirst #h(1fr) Second \\\nFirst #h(1fr) Second #h(1fr) Third \\\nFirst #h(2fr) Second #h(1fr) Third\n```\n\n# Mathematical Spacing { #math-spacing }\nIn [mathematical formulas]($category/math), you can additionally use these\nconstants to add spacing between elements: `thin` (1/6 em), `med` (2/9 em),\n`thick` (5/18 em), `quad` (1 em), `wide` (2 em)."

[reference.layout.h.h.oneliner]
en = "Inserts horizontal spacing into a paragraph."

[reference.layout.h.h.title]
en = "Spacing (H)"

[reference.layout.h.h.weak.details]
en = "If `{true}`, the spacing collapses at the start or end of a paragraph.\nMoreover, from multiple adjacent weak spacings all but the largest one\ncollapse.\n\nWeak spacing in markup also causes all adjacent markup spaces to be\nremoved, regardless of the amount of spacing inserted. To force a space\nnext to weak spacing, you can explicitly write `[#\" \"]` (for a normal\nspace) or `[~]` (for a non-breaking space). The latter can be useful to\ncreate a construct that always attaches to the preceding word with one\nnon-breaking space, independently of whether a markup space existed in\nfront or not.\n\n"

[reference.layout.h.oneliner]
en = "Inserts horizontal spacing into a paragraph."

[reference.layout.h.title]
en = "Spacing (H)"

[reference.layout.hide.description]
en = "Documentation for the `hide` function."

[reference.layout.hide.hide.body.details]
en = "The content to hide."

[reference.layout.hide.hide.details]
en = "Hides content without affecting layout.\n\nThe `hide` function allows you to hide content while the layout still 'sees'\nit. This is useful to create whitespace that is exactly as large as some\ncontent. It may also be useful to redact content because its arguments are\nnot included in the output.\n\n# Example\n```example\nHello Jane \\\n#hide[Hello] Joe\n```"

[reference.layout.hide.hide.oneliner]
en = "Hides content without affecting layout."

[reference.layout.hide.hide.title]
en = "Hide"

[reference.layout.hide.oneliner]
en = "Hides content without affecting layout."

[reference.layout.hide.title]
en = "Hide"

[reference.layout.layout.description]
en = "Documentation for the `layout` function."

[reference.layout.layout.details]
en = "Arranging elements on the page in different ways.\n\nBy combining layout functions, you can create complex and automatic layouts.\n"

[reference.layout.layout.layout.details]
en = "Provides access to the current outer container's (or page's, if none)\ndimensions (width and height).\n\nAccepts a function that receives a single parameter, which is a dictionary\nwith keys `width` and `height`, both of type [`length`]. The function is\nprovided [context], meaning you don't need to use it in combination with the\n`context` keyword. This is why [`measure`] can be called in the example\nbelow.\n\n```example\n#let text = lorem(30)\n#layout(size => [\n  #let (height,) = measure(\n    block(width: size.width, text),\n  )\n  This text is #height high with\n  the current page width: \\\n  #text\n])\n```\n\nNote that the `layout` function forces its contents into a [block]-level\ncontainer, so placement relative to the page or pagebreaks are not possible\nwithin it.\n\nIf the `layout` call is placed inside a box with a width of `{800pt}` and a\nheight of `{400pt}`, then the specified function will be given the argument\n`{(width: 800pt, height: 400pt)}`. If it is placed directly into the page, it\nreceives the page's dimensions minus its margins. This is mostly useful in\ncombination with [measurement]($measure).\n\nYou can also use this function to resolve [`ratio`] to fixed lengths. This\nmight come in handy if you're building your own layout abstractions.\n\n```example\n#layout(size => {\n  let half = 50% * size.width\n  [Half a page is #half wide.]\n})\n```\n\nNote that the width or height provided by `layout` will be infinite if the\ncorresponding page dimension is set to `{auto}`."

[reference.layout.layout.layout.func.details]
en = "A function to call with the outer container's size. Its return value is\ndisplayed in the document.\n\nThe container's size is given as a [dictionary] with the keys `width`\nand `height`.\n\nThis function is called once for each time the content returned by\n`layout` appears in the document. This makes it possible to generate\ncontent that depends on the dimensions of its container."

[reference.layout.layout.layout.oneliner]
en = "Provides access to the current outer container's (or page's, if none)"

[reference.layout.layout.layout.title]
en = "Layout"

[reference.layout.layout.oneliner]
en = "Provides access to the current outer container's (or page's, if none)"

[reference.layout.layout.title]
en = "Layout"

[reference.layout.length.description]
en = "Documentation for the Length type."

[reference.layout.length.length.cm.details]
en = "Converts this length to centimeters.\n\nFails with an error if this length has non-zero `em` units. See the\n[`pt`]($length.pt) method for more details."

[reference.layout.length.length.cm.oneliner]
en = "Converts this length to centimeters."

[reference.layout.length.length.cm.title]
en = "Centimeters"

[reference.layout.length.length.details]
en = "A size or distance, possibly expressed with contextual units.\n\nTypst supports the following length units:\n\n- Points: `{72pt}`\n- Millimeters: `{254mm}`\n- Centimeters: `{2.54cm}`\n- Inches: `{1in}`\n- Relative to font size: `{2.5em}`\n\nYou can multiply lengths with and divide them by integers and floats.\n\n# Example\n```example\n#rect(width: 20pt)\n#rect(width: 2em)\n#rect(width: 1in)\n\n#(3em + 5pt).em \\\n#(20pt).em \\\n#(40em + 2pt).abs \\\n#(5em).abs\n```\n\n# Fields\n- `abs`: A length with just the absolute component of the current length\n  (that is, excluding the `em` component).\n- `em`: The amount of `em` units in this length, as a [float]."

[reference.layout.length.length.inches.details]
en = "Converts this length to inches.\n\nFails with an error if this length has non-zero `em` units. See the\n[`pt`]($length.pt) method for more details."

[reference.layout.length.length.inches.oneliner]
en = "Converts this length to inches."

[reference.layout.length.length.inches.title]
en = "Inches"

[reference.layout.length.length.mm.details]
en = "Converts this length to millimeters.\n\nFails with an error if this length has non-zero `em` units. See the\n[`pt`]($length.pt) method for more details."

[reference.layout.length.length.mm.oneliner]
en = "Converts this length to millimeters."

[reference.layout.length.length.mm.title]
en = "Millimeters"

[reference.layout.length.length.oneliner]
en = "A size or distance, possibly expressed with contextual units."

[reference.layout.length.length.pt.details]
en = "Converts this length to points.\n\nFails with an error if this length has non-zero `em` units (such as\n`5em + 2pt` instead of just `2pt`). Use the `abs` field (such as in\n`(5em + 2pt).abs.pt()`) to ignore the `em` component of the length (thus\nconverting only its absolute component)."

[reference.layout.length.length.pt.oneliner]
en = "Converts this length to points."

[reference.layout.length.length.pt.title]
en = "Points"

[reference.layout.length.length.title]
en = "Length"

[reference.layout.length.length.to-absolute.details]
en = "Resolve this length to an absolute length.\n\n"

[reference.layout.length.length.to-absolute.oneliner]
en = "Resolve this length to an absolute length."

[reference.layout.length.length.to-absolute.title]
en = "To Absolute"

[reference.layout.length.oneliner]
en = "A size or distance, possibly expressed with contextual units."

[reference.layout.length.title]
en = "Length"

[reference.layout.measure.description]
en = "Documentation for the `measure` function."

[reference.layout.measure.measure.content.details]
en = "The content whose size to measure."

[reference.layout.measure.measure.details]
en = "Measures the layouted size of content.\n\nThe `measure` function lets you determine the layouted size of content.\nBy default an infinite space is assumed, so the measured dimensions may\nnot necessarily match the final dimensions of the content.\nIf you want to measure in the current layout dimensions, you can combine\n`measure` and [`layout`].\n\n# Example\nThe same content can have a different size depending on the [context] that\nit is placed into. In the example below, the `[#content]` is of course\nbigger when we increase the font size.\n\n```example\n#let content = [Hello!]\n#content\n#set text(14pt)\n#content\n```\n\nFor this reason, you can only measure when context is available.\n\n```example\n#let thing(body) = context {\n  let size = measure(body)\n  [Width of \"#body\" is #size.width]\n}\n\n#thing[Hey] \\\n#thing[Welcome]\n```\n\nThe measure function returns a dictionary with the entries `width` and\n`height`, both of type [`length`]."

[reference.layout.measure.measure.height.details]
en = "The height available to layout the content.\n\nSetting this to `{auto}` indicates infinite available height."

[reference.layout.measure.measure.oneliner]
en = "Measures the layouted size of content."

[reference.layout.measure.measure.title]
en = "Measure"

[reference.layout.measure.measure.width.details]
en = "The width available to layout the content.\n\nSetting this to `{auto}` indicates infinite available width.\n\nNote that using the `width` and `height` parameters of this function is\ndifferent from measuring a sized [`block`] containing the content. In\nthe following example, the former will get the dimensions of the inner\ncontent instead of the dimensions of the block.\n\n"

[reference.layout.measure.oneliner]
en = "Measures the layouted size of content."

[reference.layout.measure.title]
en = "Measure"

[reference.layout.move.description]
en = "Documentation for the `move` function."

[reference.layout.move.move.body.details]
en = "The content to move."

[reference.layout.move.move.details]
en = "Moves content without affecting layout.\n\nThe `move` function allows you to move content while the layout still 'sees'\nit at the original positions. Containers will still be sized as if the\ncontent was not moved.\n\n# Example\n```example\n#rect(inset: 0pt, move(\n  dx: 6pt, dy: 6pt,\n  rect(\n    inset: 8pt,\n    fill: white,\n    stroke: black,\n    [Abra cadabra]\n  )\n))\n```"

[reference.layout.move.move.dx.details]
en = "The horizontal displacement of the content."

[reference.layout.move.move.dy.details]
en = "The vertical displacement of the content."

[reference.layout.move.move.oneliner]
en = "Moves content without affecting layout."

[reference.layout.move.move.title]
en = "Move"

[reference.layout.move.oneliner]
en = "Moves content without affecting layout."

[reference.layout.move.title]
en = "Move"

[reference.layout.pad.description]
en = "Documentation for the `pad` function."

[reference.layout.pad.oneliner]
en = "Adds spacing around content."

[reference.layout.pad.pad.body.details]
en = "The content to pad at the sides."

[reference.layout.pad.pad.bottom.details]
en = "The padding at the bottom side."

[reference.layout.pad.pad.details]
en = "Adds spacing around content.\n\nThe spacing can be specified for each side individually, or for all sides at\nonce by specifying a positional argument.\n\n# Example\n```example\n#set align(center)\n\n#pad(x: 16pt, image(\"typing.jpg\"))\n_Typing speeds can be\n measured in words per minute._\n```"

[reference.layout.pad.pad.left.details]
en = "The padding at the left side."

[reference.layout.pad.pad.oneliner]
en = "Adds spacing around content."

[reference.layout.pad.pad.rest.details]
en = "A shorthand to set all four sides to the same value."

[reference.layout.pad.pad.right.details]
en = "The padding at the right side."

[reference.layout.pad.pad.title]
en = "Padding"

[reference.layout.pad.pad.top.details]
en = "The padding at the top side."

[reference.layout.pad.pad.x.details]
en = "A shorthand to set `left` and `right` to the same value."

[reference.layout.pad.pad.y.details]
en = "A shorthand to set `top` and `bottom` to the same value."

[reference.layout.pad.title]
en = "Padding"

[reference.layout.page.description]
en = "Documentation for the `page` function."

[reference.layout.page.oneliner]
en = "Layouts its child onto one or multiple pages."

[reference.layout.page.page.background.details]
en = "Content in the page's background.\n\nThis content will be placed behind the page's body. It can be\nused to place a background image or a watermark.\n\n"

[reference.layout.page.page.binding.details]
en = "On which side the pages will be bound.\n\n- `{auto}`: Equivalent to `left` if the [text direction]($text.dir)\n  is left-to-right and `right` if it is right-to-left.\n- `left`: Bound on the left side.\n- `right`: Bound on the right side.\n\nThis affects the meaning of the `inside` and `outside` options for\nmargins."

[reference.layout.page.page.body.details]
en = "The contents of the page(s).\n\nMultiple pages will be created if the content does not fit on a single\npage. A new page with the page properties prior to the function invocation\nwill be created after the body has been typeset."

[reference.layout.page.page.columns.details]
en = "How many columns the page has.\n\nIf you need to insert columns into a page or other container, you can\nalso use the [`columns` function]($columns).\n\n"

[reference.layout.page.page.details]
en = "Layouts its child onto one or multiple pages.\n\nAlthough this function is primarily used in set rules to affect page\nproperties, it can also be used to explicitly render its argument onto\na set of pages of its own.\n\nPages can be set to use `{auto}` as their width or height. In this case, the\npages will grow to fit their content on the respective axis.\n\nThe [Guide for Page Setup]($guides/page-setup-guide) explains how to use\nthis and related functions to set up a document with many examples.\n\n# Example\n```example\n>>> #set page(margin: auto)\n#set page(\"us-letter\")\n\nThere you go, US friends!\n```"

[reference.layout.page.page.fill.details]
en = "The page's background fill.\n\nSetting this to something non-transparent instructs the printer to color\nthe complete page. If you are considering larger production runs, it may\nbe more environmentally friendly and cost-effective to source pre-dyed\npages and not set this property.\n\nWhen set to `{none}`, the background becomes transparent. Note that PDF\npages will still appear with a (usually white) background in viewers,\nbut they are actually transparent. (If you print them, no color is used\nfor the background.)\n\nThe default of `{auto}` results in `{none}` for PDF output, and\n`{white}` for PNG and SVG.\n\n"

[reference.layout.page.page.flipped.details]
en = "Whether the page is flipped into landscape orientation.\n\n"

[reference.layout.page.page.footer-descent.details]
en = "The amount the footer is lowered into the bottom margin."

[reference.layout.page.page.footer.details]
en = "The page's footer. Fills the bottom margin of each page.\n\n- Content: Shows the content as the footer.\n- `{auto}`: Shows the page number if a `numbering` is set and\n  `number-align` is `bottom`.\n- `{none}`: Suppresses the footer.\n\nFor just a page number, the `numbering` property typically suffices. If\nyou want to create a custom footer but still display the page number,\nyou can directly access the [page counter]($counter).\n\n"

[reference.layout.page.page.foreground.details]
en = "Content in the page's foreground.\n\nThis content will overlay the page's body.\n\n"

[reference.layout.page.page.header-ascent.details]
en = "The amount the header is raised into the top margin."

[reference.layout.page.page.header.details]
en = "The page's header. Fills the top margin of each page.\n\n- Content: Shows the content as the header.\n- `{auto}`: Shows the page number if a `numbering` is set and\n  `number-align` is `top`.\n- `{none}`: Suppresses the header.\n\n"

[reference.layout.page.page.height.details]
en = "The height of the page.\n\nIf this is set to `{auto}`, page breaks can only be triggered manually\nby inserting a [page break]($pagebreak). Most examples throughout this\ndocumentation use `{auto}` for the height of the page to dynamically\ngrow and shrink to fit their content."

[reference.layout.page.page.margin.details]
en = "The page's margins.\n\n- `{auto}`: The margins are set automatically to 2.5/21 times the smaller\n  dimension of the page. This results in 2.5cm margins for an A4 page.\n- A single length: The same margin on all sides.\n- A dictionary: With a dictionary, the margins can be set individually.\n  The dictionary can contain the following keys in order of precedence:\n  - `top`: The top margin.\n  - `right`: The right margin.\n  - `bottom`: The bottom margin.\n  - `left`: The left margin.\n  - `inside`: The margin at the inner side of the page (where the\n    [binding]($page.binding) is).\n  - `outside`: The margin at the outer side of the page (opposite to the\n    [binding]($page.binding)).\n  - `x`: The horizontal margins.\n  - `y`: The vertical margins.\n  - `rest`: The margins on all sides except those for which the\n    dictionary explicitly sets a size.\n\nThe values for `left` and `right` are mutually exclusive with\nthe values for `inside` and `outside`.\n\n"

[reference.layout.page.page.number-align.details]
en = "The alignment of the page numbering.\n\nIf the vertical component is `top`, the numbering is placed into the\nheader and if it is `bottom`, it is placed in the footer. Horizon\nalignment is forbidden. If an explicit matching `header` or `footer` is\ngiven, the numbering is ignored.\n\n"

[reference.layout.page.page.numbering.details]
en = "How to [number]($numbering) the pages.\n\nIf an explicit `footer` (or `header` for top-aligned numbering) is\ngiven, the numbering is ignored.\n\n"

[reference.layout.page.page.oneliner]
en = "Layouts its child onto one or multiple pages."

[reference.layout.page.page.paper.details]
en = "A standard paper size to set width and height.\n\nThis is just a shorthand for setting `width` and `height` and, as such,\ncannot be retrieved in a context expression."

[reference.layout.page.page.supplement.details]
en = "A supplement for the pages.\n\nFor page references, this is added before the page number.\n\n"

[reference.layout.page.page.title]
en = "Page"

[reference.layout.page.page.width.details]
en = "The width of the page.\n\n"

[reference.layout.page.title]
en = "Page"

[reference.layout.pagebreak.description]
en = "Documentation for the `pagebreak` function."

[reference.layout.pagebreak.oneliner]
en = "A manual page break."

[reference.layout.pagebreak.pagebreak.details]
en = "A manual page break.\n\nMust not be used inside any containers.\n\n# Example\n```example\nThe next page contains\nmore details on compound theory.\n#pagebreak()\n\n== Compound Theory\nIn 1984, the first ...\n```"

[reference.layout.pagebreak.pagebreak.oneliner]
en = "A manual page break."

[reference.layout.pagebreak.pagebreak.title]
en = "Page Break"

[reference.layout.pagebreak.pagebreak.to.details]
en = "If given, ensures that the next page will be an even/odd page, with an\nempty page in between if necessary.\n\n"

[reference.layout.pagebreak.pagebreak.weak.details]
en = "If `{true}`, the page break is skipped if the current page is already\nempty."

[reference.layout.pagebreak.title]
en = "Page Break"

[reference.layout.place.description]
en = "Documentation for the `place` function."

[reference.layout.place.oneliner]
en = "Places content relatively to its parent container."

[reference.layout.place.place.alignment.details]
en = "Relative to which position in the parent container to place the content.\n\n- If `float` is `{false}`, then this can be any alignment other than `{auto}`.\n- If `float` is `{true}`, then this must be `{auto}`, `{top}`, or `{bottom}`.\n\nWhen `float` is `{false}` and no vertical alignment is specified, the\ncontent is placed at the current position on the vertical axis."

[reference.layout.place.place.body.details]
en = "The content to place."

[reference.layout.place.place.clearance.details]
en = "The spacing between the placed element and other elements in a floating\nlayout.\n\nHas no effect if `float` is `{false}`."

[reference.layout.place.place.details]
en = "Places content relatively to its parent container.\n\nPlaced content can be either overlaid (the default) or floating. Overlaid\ncontent is aligned with the parent container according to the given\n[`alignment`]($place.alignment), and shown over any other content added so\nfar in the container. Floating content is placed at the top or bottom of\nthe container, displacing other content down or up respectively. In both\ncases, the content position can be adjusted with [`dx`]($place.dx) and\n[`dy`]($place.dy) offsets without affecting the layout.\n\nThe parent can be any container such as a [`block`], [`box`],\n[`rect`], etc. A top level `place` call will place content directly\nin the text area of the current page. This can be used for absolute\npositioning on the page: with a `top + left`\n[`alignment`]($place.alignment), the offsets `dx` and `dy` will set the\nposition of the element's top left corner relatively to the top left corner\nof the text area. For absolute positioning on the full page including\nmargins, you can use `place` in [`page.foreground`]($page.foreground) or\n[`page.background`]($page.background).\n\n# Examples\n```example\n#set page(height: 120pt)\nHello, world!\n\n#rect(\n  width: 100%,\n  height: 2cm,\n  place(horizon + right, square()),\n)\n\n#place(\n  top + left,\n  dx: -5pt,\n  square(size: 5pt, fill: red),\n)\n```\n\n# Effect on the position of other elements { #effect-on-other-elements }\nOverlaid elements don't take space in the flow of content, but a `place`\ncall inserts an invisible block-level element in the flow. This can\naffect the layout by breaking the current paragraph. To avoid this,\nyou can wrap the `place` call in a [`box`] when the call is made\nin the middle of a paragraph. The alignment and offsets will then be\nrelative to this zero-size box. To make sure it doesn't interfere with\nspacing, the box should be attached to a word using a word joiner.\n\nFor example, the following defines a function for attaching an annotation\nto the following word:\n\n```example\n>>> #set page(height: 70pt)\n#let annotate(..args) = {\n  box(place(..args))\n  sym.wj\n  h(0pt, weak: true)\n}\n\nA placed #annotate(square(), dy: 2pt)\nsquare in my text.\n```\n\nThe zero-width weak spacing serves to discard spaces between the function\ncall and the next word."

[reference.layout.place.place.dx.details]
en = "The horizontal displacement of the placed content.\n\n"

[reference.layout.place.place.dy.details]
en = "The vertical displacement of the placed content.\n\nThis does not affect the layout of in-flow content.\nIn other words, the placed content is treated as if it\nwere wrapped in a [`move`] element."

[reference.layout.place.place.float.details]
en = "Whether the placed element has floating layout.\n\nFloating elements are positioned at the top or bottom of the parent\ncontainer, displacing in-flow content. They are always placed in the\nin-flow order relative to each other, as well as before any content\nfollowing a later [`place.flush`] element.\n\n"

[reference.layout.place.place.flush.details]
en = "Asks the layout algorithm to place pending floating elements before\ncontinuing with the content.\n\nThis is useful for preventing floating figures from spilling\ninto the next section.\n\n"

[reference.layout.place.place.flush.oneliner]
en = "Asks the layout algorithm to place pending floating elements before"

[reference.layout.place.place.flush.title]
en = "Flush"

[reference.layout.place.place.oneliner]
en = "Places content relatively to its parent container."

[reference.layout.place.place.scope.details]
en = "Relative to which containing scope something is placed.\n\nThe parent scope is primarily used with figures and, for\nthis reason, the figure function has a mirrored [`scope`\nparameter]($figure.scope). Nonetheless, it can also be more generally\nuseful to break out of the columns. A typical example would be to\n[create a single-column title section]($guides/page-setup-guide/#columns)\nin a two-column document.\n\nNote that parent-scoped placement is currently only supported if `float`\nis `{true}`. This may change in the future.\n\n"

[reference.layout.place.place.title]
en = "Place"

[reference.layout.place.title]
en = "Place"

[reference.layout.ratio.description]
en = "Documentation for the Ratio type."

[reference.layout.ratio.oneliner]
en = "A ratio of a whole."

[reference.layout.ratio.ratio.details]
en = "A ratio of a whole.\n\nWritten as a number, followed by a percent sign.\n\n# Example\n```example\n#set align(center)\n#scale(x: 150%)[\n  Scaled apart.\n]\n```"

[reference.layout.ratio.ratio.oneliner]
en = "A ratio of a whole."

[reference.layout.ratio.ratio.title]
en = "Ratio"

[reference.layout.ratio.title]
en = "Ratio"

[reference.layout.relative.description]
en = "Documentation for the Relative Length type."

[reference.layout.relative.oneliner]
en = "A length in relation to some known length."

[reference.layout.relative.relative.details]
en = "A length in relation to some known length.\n\nThis type is a combination of a [length] with a [ratio]. It results from\naddition and subtraction of a length and a ratio. Wherever a relative length\nis expected, you can also use a bare length or ratio.\n\n# Example\n```example\n#rect(width: 100% - 50pt)\n\n#(100% - 50pt).length \\\n#(100% - 50pt).ratio\n```\n\nA relative length has the following fields:\n- `length`: Its length component.\n- `ratio`: Its ratio component."

[reference.layout.relative.relative.oneliner]
en = "A length in relation to some known length."

[reference.layout.relative.relative.title]
en = "Relative Length"

[reference.layout.relative.title]
en = "Relative Length"

[reference.layout.repeat.description]
en = "Documentation for the `repeat` function."

[reference.layout.repeat.oneliner]
en = "Repeats content to the available space."

[reference.layout.repeat.repeat.body.details]
en = "The content to repeat."

[reference.layout.repeat.repeat.details]
en = "Repeats content to the available space.\n\nThis can be useful when implementing a custom index, reference, or outline.\n\nSpace may be inserted between the instances of the body parameter, so be\nsure to adjust the [`justify`]($repeat.justify) parameter accordingly.\n\nErrors if there are no bounds on the available space, as it would create\ninfinite content.\n\n# Example\n```example\nSign on the dotted line:\n#box(width: 1fr, repeat[.])\n\n#set text(10pt)\n#v(8pt, weak: true)\n#align(right)[\n  Berlin, the 22nd of December, 2022\n]\n```"

[reference.layout.repeat.repeat.gap.details]
en = "The gap between each instance of the body."

[reference.layout.repeat.repeat.justify.details]
en = "Whether to increase the gap between instances to completely fill the\navailable space."

[reference.layout.repeat.repeat.oneliner]
en = "Repeats content to the available space."

[reference.layout.repeat.repeat.title]
en = "Repeat"

[reference.layout.repeat.title]
en = "Repeat"

[reference.layout.rotate.description]
en = "Documentation for the `rotate` function."

[reference.layout.rotate.oneliner]
en = "Rotates content without affecting layout."

[reference.layout.rotate.rotate.angle.details]
en = "The amount of rotation.\n\n"

[reference.layout.rotate.rotate.body.details]
en = "The content to rotate."

[reference.layout.rotate.rotate.details]
en = "Rotates content without affecting layout.\n\nRotates an element by a given angle. The layout will act as if the element\nwas not rotated unless you specify `{reflow: true}`.\n\n# Example\n```example\n#stack(\n  dir: ltr,\n  spacing: 1fr,\n  ..range(16)\n    .map(i => rotate(24deg * i)[X]),\n)\n```"

[reference.layout.rotate.rotate.oneliner]
en = "Rotates content without affecting layout."

[reference.layout.rotate.rotate.origin.details]
en = "The origin of the rotation.\n\nIf, for instance, you wanted the bottom left corner of the rotated\nelement to stay aligned with the baseline, you would set it to `bottom +\nleft` instead.\n\n"

[reference.layout.rotate.rotate.reflow.details]
en = "Whether the rotation impacts the layout.\n\nIf set to `{false}`, the rotated content will retain the bounding box of\nthe original content. If set to `{true}`, the bounding box will take the\nrotation of the content into account and adjust the layout accordingly.\n\n"

[reference.layout.rotate.rotate.title]
en = "Rotate"

[reference.layout.rotate.title]
en = "Rotate"

[reference.layout.scale.description]
en = "Documentation for the `scale` function."

[reference.layout.scale.oneliner]
en = "Scales content without affecting layout."

[reference.layout.scale.scale.body.details]
en = "The content to scale."

[reference.layout.scale.scale.details]
en = "Scales content without affecting layout.\n\nLets you mirror content by specifying a negative scale on a single axis.\n\n# Example\n```example\n#set align(center)\n#scale(x: -100%)[This is mirrored.]\n#scale(x: -100%, reflow: true)[This is mirrored.]\n```"

[reference.layout.scale.scale.factor.details]
en = "The scaling factor for both axes, as a positional argument. This is just\nan optional shorthand notation for setting `x` and `y` to the same\nvalue."

[reference.layout.scale.scale.oneliner]
en = "Scales content without affecting layout."

[reference.layout.scale.scale.origin.details]
en = "The origin of the transformation.\n\n"

[reference.layout.scale.scale.reflow.details]
en = "Whether the scaling impacts the layout.\n\nIf set to `{false}`, the scaled content will be allowed to overlap\nother content. If set to `{true}`, it will compute the new size of\nthe scaled content and adjust the layout accordingly.\n\n"

[reference.layout.scale.scale.title]
en = "Scale"

[reference.layout.scale.scale.x.details]
en = "The horizontal scaling factor.\n\nThe body will be mirrored horizontally if the parameter is negative."

[reference.layout.scale.scale.y.details]
en = "The vertical scaling factor.\n\nThe body will be mirrored vertically if the parameter is negative."

[reference.layout.scale.title]
en = "Scale"

[reference.layout.skew.description]
en = "Documentation for the `skew` function."

[reference.layout.skew.oneliner]
en = "Skews content."

[reference.layout.skew.skew.ax.details]
en = "The horizontal skewing angle.\n\n"

[reference.layout.skew.skew.ay.details]
en = "The vertical skewing angle.\n\n"

[reference.layout.skew.skew.body.details]
en = "The content to skew."

[reference.layout.skew.skew.details]
en = "Skews content.\n\nSkews an element in horizontal and/or vertical direction. The layout will\nact as if the element was not skewed unless you specify `{reflow: true}`.\n\n# Example\n```example\n#skew(ax: -12deg)[\n  This is some fake italic text.\n]\n```"

[reference.layout.skew.skew.oneliner]
en = "Skews content."

[reference.layout.skew.skew.origin.details]
en = "The origin of the skew transformation.\n\nThe origin will stay fixed during the operation.\n\n"

[reference.layout.skew.skew.reflow.details]
en = "Whether the skew transformation impacts the layout.\n\nIf set to `{false}`, the skewed content will retain the bounding box of\nthe original content. If set to `{true}`, the bounding box will take the\ntransformation of the content into account and adjust the layout accordingly.\n\n"

[reference.layout.skew.skew.title]
en = "Skew"

[reference.layout.skew.title]
en = "Skew"

[reference.layout.stack.description]
en = "Documentation for the `stack` function."

[reference.layout.stack.oneliner]
en = "Arranges content and spacing horizontally or vertically."

[reference.layout.stack.stack.children.details]
en = "The children to stack along the axis."

[reference.layout.stack.stack.details]
en = "Arranges content and spacing horizontally or vertically.\n\nThe stack places a list of items along an axis, with optional spacing\nbetween each item.\n\n# Example\n```example\n#stack(\n  dir: ttb,\n  rect(width: 40pt),\n  rect(width: 120pt),\n  rect(width: 90pt),\n)\n```"

[reference.layout.stack.stack.dir.details]
en = "The direction along which the items are stacked. Possible values are:\n\n- `{ltr}`: Left to right.\n- `{rtl}`: Right to left.\n- `{ttb}`: Top to bottom.\n- `{btt}`: Bottom to top.\n\nYou can use the `start` and `end` methods to obtain the initial and\nfinal points (respectively) of a direction, as `alignment`. You can also\nuse the `axis` method to determine whether a direction is\n`{\"horizontal\"}` or `{\"vertical\"}`. The `inv` method returns a\ndirection's inverse direction.\n\nFor example, `{ttb.start()}` is `top`, `{ttb.end()}` is `bottom`,\n`{ttb.axis()}` is `{\"vertical\"}` and `{ttb.inv()}` is equal to `btt`."

[reference.layout.stack.stack.oneliner]
en = "Arranges content and spacing horizontally or vertically."

[reference.layout.stack.stack.spacing.details]
en = "Spacing to insert between items where no explicit spacing was provided."

[reference.layout.stack.stack.title]
en = "Stack"

[reference.layout.stack.title]
en = "Stack"

[reference.layout.title]
en = "Layout"

[reference.layout.v.description]
en = "Documentation for the `v` function."

[reference.layout.v.oneliner]
en = "Inserts vertical spacing into a flow of blocks."

[reference.layout.v.title]
en = "Spacing (V)"

[reference.layout.v.v.amount.details]
en = "How much spacing to insert."

[reference.layout.v.v.details]
en = "Inserts vertical spacing into a flow of blocks.\n\nThe spacing can be absolute, relative, or fractional. In the last case,\nthe remaining space on the page is distributed among all fractional spacings\naccording to their relative fractions.\n\n# Example\n```example\n#grid(\n  rows: 3cm,\n  columns: 6,\n  gutter: 1fr,\n  [A #parbreak() B],\n  [A #v(0pt) B],\n  [A #v(10pt) B],\n  [A #v(0pt, weak: true) B],\n  [A #v(40%, weak: true) B],\n  [A #v(1fr) B],\n)\n```"

[reference.layout.v.v.oneliner]
en = "Inserts vertical spacing into a flow of blocks."

[reference.layout.v.v.title]
en = "Spacing (V)"

[reference.layout.v.v.weak.details]
en = "If `{true}`, the spacing collapses at the start or end of a flow.\nMoreover, from multiple adjacent weak spacings all but the largest one\ncollapse. Weak spacings will always collapse adjacent paragraph spacing,\neven if the paragraph spacing is larger.\n\n"

[reference.math.accent.accent.accent.details]
en = "The accent to apply to the base.\n\nSupported accents include:\n\n| Accent        | Name            | Codepoint |\n| ------------- | --------------- | --------- |\n| Grave         | `grave`         | <code>&DiacriticalGrave;</code> |\n| Acute         | `acute`         | `´`       |\n| Circumflex    | `hat`           | `^`       |\n| Tilde         | `tilde`         | `~`       |\n| Macron        | `macron`        | `¯`       |\n| Dash          | `dash`          | `‾`       |\n| Breve         | `breve`         | `˘`       |\n| Dot           | `dot`           | `.`       |\n| Double dot, Diaeresis | `dot.double`, `diaer` | `¨` |\n| Triple dot    | `dot.triple`    | <code>&tdot;</code> |\n| Quadruple dot | `dot.quad`      | <code>&DotDot;</code> |\n| Circle        | `circle`        | `∘`       |\n| Double acute  | `acute.double`  | `˝`       |\n| Caron         | `caron`         | `ˇ`       |\n| Right arrow   | `arrow`, `->`   | `→`       |\n| Left arrow    | `arrow.l`, `<-` | `←`       |\n| Left/Right arrow | `arrow.l.r`  | `↔`       |\n| Right harpoon | `harpoon`       | `⇀`       |\n| Left harpoon  | `harpoon.lt`    | `↼`       |"

[reference.math.accent.accent.base.details]
en = "The base to which the accent is applied.\nMay consist of multiple letters.\n\n"

[reference.math.accent.accent.details]
en = "Attaches an accent to a base.\n\n# Example\n```example\n$grave(a) = accent(a, `)$ \\\n$arrow(a) = accent(a, arrow)$ \\\n$tilde(a) = accent(a, \\u{0303})$\n```"

[reference.math.accent.accent.oneliner]
en = "Attaches an accent to a base."

[reference.math.accent.accent.size.details]
en = "The size of the accent, relative to the width of the base."

[reference.math.accent.accent.title]
en = "Accent"

[reference.math.accent.description]
en = "Documentation for the `accent` function."

[reference.math.accent.oneliner]
en = "Attaches an accent to a base."

[reference.math.accent.title]
en = "Accent"

[reference.math.attach.attach.attach.b.details]
en = "The bottom attachment, smartly positioned at the bottom-right or below\nthe base.\n\nYou can wrap the base in `{limits()}` or `{scripts()}` to override the\nsmart positioning."

[reference.math.attach.attach.attach.base.details]
en = "The base to which things are attached."

[reference.math.attach.attach.attach.bl.details]
en = "The bottom-left attachment (before base)."

[reference.math.attach.attach.attach.br.details]
en = "The bottom-right attachment (after the base)."

[reference.math.attach.attach.attach.details]
en = "A base with optional attachments.\n\n"

[reference.math.attach.attach.attach.oneliner]
en = "A base with optional attachments."

[reference.math.attach.attach.attach.t.details]
en = "The top attachment, smartly positioned at top-right or above the base.\n\nYou can wrap the base in `{limits()}` or `{scripts()}` to override the\nsmart positioning."

[reference.math.attach.attach.attach.title]
en = "Attach"

[reference.math.attach.attach.attach.tl.details]
en = "The top-left attachment (before the base)."

[reference.math.attach.attach.attach.tr.details]
en = "The top-right attachment (after the base)."

[reference.math.attach.attach.details]
en = "Subscript, superscripts, and limits.\n\nAttachments can be displayed either as sub/superscripts, or limits. Typst\nautomatically decides which is more suitable depending on the base, but you\ncan also control this manually with the `scripts` and `limits` functions.\n\nIf you want the base to stretch to fit long top and bottom attachments (for\nexample, an arrow with text above it), use the [`stretch`]($math.stretch)\nfunction.\n\n# Example\n```example\n$ sum_(i=0)^n a_i = 2^(1+i) $\n```\n\n# Syntax\nThis function also has dedicated syntax for attachments after the base: Use\nthe underscore (`_`) to indicate a subscript i.e. bottom attachment and the\nhat (`^`) to indicate a superscript i.e. top attachment.\n"

[reference.math.attach.attach.limits.body.details]
en = "The base to attach the limits to."

[reference.math.attach.attach.limits.details]
en = "Forces a base to display attachments as limits.\n\n"

[reference.math.attach.attach.limits.inline.details]
en = "Whether to also force limits in inline equations.\n\nWhen applying limits globally (e.g., through a show rule), it is\ntypically a good idea to disable this."

[reference.math.attach.attach.limits.oneliner]
en = "Forces a base to display attachments as limits."

[reference.math.attach.attach.limits.title]
en = "Limits"

[reference.math.attach.attach.scripts.body.details]
en = "The base to attach the scripts to."

[reference.math.attach.attach.scripts.details]
en = "Forces a base to display attachments as scripts.\n\n"

[reference.math.attach.attach.scripts.oneliner]
en = "Forces a base to display attachments as scripts."

[reference.math.attach.attach.scripts.title]
en = "Scripts"

[reference.math.attach.attach.title]
en = "Attach"

[reference.math.attach.description]
en = "Documentation for the attach functions."

[reference.math.attach.oneliner]
en = "Subscript, superscripts, and limits."

[reference.math.attach.title]
en = "Attach"

[reference.math.binom.binom.details]
en = "A binomial expression.\n\n# Example\n```example\n$ binom(n, k) $\n$ binom(n, k_1, k_2, k_3, ..., k_m) $\n```"

[reference.math.binom.binom.lower.details]
en = "The binomial's lower index."

[reference.math.binom.binom.oneliner]
en = "A binomial expression."

[reference.math.binom.binom.title]
en = "Binomial"

[reference.math.binom.binom.upper.details]
en = "The binomial's upper index."

[reference.math.binom.description]
en = "Documentation for the `binom` function."

[reference.math.binom.oneliner]
en = "A binomial expression."

[reference.math.binom.title]
en = "Binomial"

[reference.math.cancel.cancel.angle.details]
en = "How much to rotate the cancel line.\n\n- If given an angle, the line is rotated by that angle clockwise with\n  respect to the y-axis.\n- If `{auto}`, the line assumes the default angle; that is, along the\n  rising diagonal of the content box.\n- If given a function `angle => angle`, the line is rotated, with\n  respect to the y-axis, by the angle returned by that function. The\n  function receives the default angle as its input.\n\n"

[reference.math.cancel.cancel.body.details]
en = "The content over which the line should be placed."

[reference.math.cancel.cancel.cross.details]
en = "Whether two opposing cancel lines should be drawn, forming a cross over\nthe element. Overrides `inverted`.\n\n"

[reference.math.cancel.cancel.details]
en = "Displays a diagonal line over a part of an equation.\n\nThis is commonly used to show the elimination of a term.\n\n# Example\n```example\n>>> #set page(width: 140pt)\nHere, we can simplify:\n$ (a dot b dot cancel(x)) /\n    cancel(x) $\n```"

[reference.math.cancel.cancel.inverted.details]
en = "Whether the cancel line should be inverted (flipped along the y-axis).\nFor the default angle setting, inverted means the cancel line\npoints to the top left instead of top right.\n\n"

[reference.math.cancel.cancel.length.details]
en = "The length of the line, relative to the length of the diagonal spanning\nthe whole element being \"cancelled\". A value of `{100%}` would then have\nthe line span precisely the element's diagonal.\n\n"

[reference.math.cancel.cancel.oneliner]
en = "Displays a diagonal line over a part of an equation."

[reference.math.cancel.cancel.stroke.details]
en = "How to [stroke]($stroke) the cancel line.\n\n"

[reference.math.cancel.cancel.title]
en = "Cancel"

[reference.math.cancel.description]
en = "Documentation for the `cancel` function."

[reference.math.cancel.oneliner]
en = "Displays a diagonal line over a part of an equation."

[reference.math.cancel.title]
en = "Cancel"

[reference.math.cases.cases.children.details]
en = "The branches of the case distinction."

[reference.math.cases.cases.delim.details]
en = "The delimiter to use.\n\nCan be a single character specifying the left delimiter, in which case\nthe right delimiter is inferred. Otherwise, can be an array containing a\nleft and a right delimiter.\n\n"

[reference.math.cases.cases.details]
en = "A case distinction.\n\nContent across different branches can be aligned with the `&` symbol.\n\n# Example\n```example\n$ f(x, y) := cases(\n  1 \"if\" (x dot y)/2 <= 0,\n  2 \"if\" x \"is even\",\n  3 \"if\" x in NN,\n  4 \"else\",\n) $\n```"

[reference.math.cases.cases.gap.details]
en = "The gap between branches.\n\n"

[reference.math.cases.cases.oneliner]
en = "A case distinction."

[reference.math.cases.cases.reverse.details]
en = "Whether the direction of cases should be reversed.\n\n"

[reference.math.cases.cases.title]
en = "Cases"

[reference.math.cases.description]
en = "Documentation for the `cases` function."

[reference.math.cases.oneliner]
en = "A case distinction."

[reference.math.cases.title]
en = "Cases"

[reference.math.class.class.body.details]
en = "The content to which the class is applied."

[reference.math.class.class.class.details]
en = "The class to apply to the content."

[reference.math.class.class.details]
en = "Forced use of a certain math class.\n\nThis is useful to treat certain symbols as if they were of a different\nclass, e.g. to make a symbol behave like a relation. The class of a symbol\ndefines the way it is laid out, including spacing around it, and how its\nscripts are attached by default. Note that the latter can always be\noverridden using [`{limits}`](math.limits) and [`{scripts}`](math.scripts).\n\n# Example\n```example\n#let loves = math.class(\n  \"relation\",\n  sym.suit.heart,\n)\n\n$x loves y and y loves 5$\n```"

[reference.math.class.class.oneliner]
en = "Forced use of a certain math class."

[reference.math.class.class.title]
en = "Class"

[reference.math.class.description]
en = "Documentation for the `class` function."

[reference.math.class.oneliner]
en = "Forced use of a certain math class."

[reference.math.class.title]
en = "Class"

[reference.math.description]
en = "Documentation for functions related to Math in Typst."

[reference.math.equation.description]
en = "Documentation for the `equation` function."

[reference.math.equation.equation.block.details]
en = "Whether the equation is displayed as a separate block."

[reference.math.equation.equation.body.details]
en = "The contents of the equation."

[reference.math.equation.equation.details]
en = "A mathematical equation.\n\nCan be displayed inline with text or as a separate block. An equation\nbecomes block-level through the presence of at least one space after the\nopening dollar sign and one space before the closing dollar sign.\n\n# Example\n```example\n#set text(font: \"New Computer Modern\")\n\nLet $a$, $b$, and $c$ be the side\nlengths of right-angled triangle.\nThen, we know that:\n$ a^2 + b^2 = c^2 $\n\nProve by induction:\n$ sum_(k=1)^n k = (n(n+1)) / 2 $\n```\n\nBy default, block-level equations will not break across pages. This can be\nchanged through `{show math.equation: set block(breakable: true)}`.\n\n# Syntax\nThis function also has dedicated syntax: Write mathematical markup within\ndollar signs to create an equation. Starting and ending the equation with at\nleast one space lifts it into a separate block that is centered\nhorizontally. For more details about math syntax, see the\n[main math page]($category/math)."

[reference.math.equation.equation.number-align.details]
en = "The alignment of the equation numbering.\n\nBy default, the alignment is `{end + horizon}`. For the horizontal\ncomponent, you can use `{right}`, `{left}`, or `{start}` and `{end}`\nof the text direction; for the vertical component, you can use\n`{top}`, `{horizon}`, or `{bottom}`.\n\n"

[reference.math.equation.equation.numbering.details]
en = "How to [number]($numbering) block-level equations.\n\n"

[reference.math.equation.equation.oneliner]
en = "A mathematical equation."

[reference.math.equation.equation.supplement.details]
en = "A supplement for the equation.\n\nFor references to equations, this is added before the referenced number.\n\nIf a function is specified, it is passed the referenced equation and\nshould return content.\n\n"

[reference.math.equation.equation.title]
en = "Equation"

[reference.math.equation.oneliner]
en = "A mathematical equation."

[reference.math.equation.title]
en = "Equation"

[reference.math.frac.description]
en = "Documentation for the `frac` function."

[reference.math.frac.frac.denom.details]
en = "The fraction's denominator."

[reference.math.frac.frac.details]
en = "A mathematical fraction.\n\n# Example\n```example\n$ 1/2 < (x+1)/2 $\n$ ((x+1)) / 2 = frac(a, b) $\n```\n\n# Syntax\nThis function also has dedicated syntax: Use a slash to turn neighbouring\nexpressions into a fraction. Multiple atoms can be grouped into a single\nexpression using round grouping parenthesis. Such parentheses are removed\nfrom the output, but you can nest multiple to force them."

[reference.math.frac.frac.num.details]
en = "The fraction's numerator."

[reference.math.frac.frac.oneliner]
en = "A mathematical fraction."

[reference.math.frac.frac.title]
en = "Fraction"

[reference.math.frac.oneliner]
en = "A mathematical fraction."

[reference.math.frac.title]
en = "Fraction"

[reference.math.lr.description]
en = "Documentation for the lr functions."

[reference.math.lr.lr.abs.body.details]
en = "The expression to take the absolute value of."

[reference.math.lr.lr.abs.details]
en = "Takes the absolute value of an expression.\n\n"

[reference.math.lr.lr.abs.oneliner]
en = "Takes the absolute value of an expression."

[reference.math.lr.lr.abs.size.details]
en = "The size of the brackets, relative to the height of the wrapped content."

[reference.math.lr.lr.abs.title]
en = "Abs"

[reference.math.lr.lr.ceil.body.details]
en = "The expression to ceil."

[reference.math.lr.lr.ceil.details]
en = "Ceils an expression.\n\n"

[reference.math.lr.lr.ceil.oneliner]
en = "Ceils an expression."

[reference.math.lr.lr.ceil.size.details]
en = "The size of the brackets, relative to the height of the wrapped content."

[reference.math.lr.lr.ceil.title]
en = "Ceil"

[reference.math.lr.lr.details]
en = "Delimiter matching.\n\nThe `lr` function allows you to match two delimiters and scale them with the\ncontent they contain. While this also happens automatically for delimiters\nthat match syntactically, `lr` allows you to match two arbitrary delimiters\nand control their size exactly. Apart from the `lr` function, Typst provides\na few more functions that create delimiter pairings for absolute, ceiled,\nand floored values as well as norms.\n\n# Example\n```example\n$ [a, b/2] $\n$ lr(]sum_(x=1)^n], size: #50%) x $\n$ abs((x + y) / 2) $\n```\n"

[reference.math.lr.lr.floor.body.details]
en = "The expression to floor."

[reference.math.lr.lr.floor.details]
en = "Floors an expression.\n\n"

[reference.math.lr.lr.floor.oneliner]
en = "Floors an expression."

[reference.math.lr.lr.floor.size.details]
en = "The size of the brackets, relative to the height of the wrapped content."

[reference.math.lr.lr.floor.title]
en = "Floor"

[reference.math.lr.lr.lr.body.details]
en = "The delimited content, including the delimiters."

[reference.math.lr.lr.lr.details]
en = "Scales delimiters.\n\nWhile matched delimiters scale by default, this can be used to scale\nunmatched delimiters and to control the delimiter scaling more precisely."

[reference.math.lr.lr.lr.oneliner]
en = "Scales delimiters."

[reference.math.lr.lr.lr.size.details]
en = "The size of the brackets, relative to the height of the wrapped content."

[reference.math.lr.lr.lr.title]
en = "Left/Right"

[reference.math.lr.lr.mid.body.details]
en = "The content to be scaled."

[reference.math.lr.lr.mid.details]
en = "Scales delimiters vertically to the nearest surrounding `{lr()}` group.\n\n"

[reference.math.lr.lr.mid.oneliner]
en = "Scales delimiters vertically to the nearest surrounding `{lr()}` group."

[reference.math.lr.lr.mid.title]
en = "Mid"

[reference.math.lr.lr.norm.body.details]
en = "The expression to take the norm of."

[reference.math.lr.lr.norm.details]
en = "Takes the norm of an expression.\n\n"

[reference.math.lr.lr.norm.oneliner]
en = "Takes the norm of an expression."

[reference.math.lr.lr.norm.size.details]
en = "The size of the brackets, relative to the height of the wrapped content."

[reference.math.lr.lr.norm.title]
en = "Norm"

[reference.math.lr.lr.round.body.details]
en = "The expression to round."

[reference.math.lr.lr.round.details]
en = "Rounds an expression.\n\n"

[reference.math.lr.lr.round.oneliner]
en = "Rounds an expression."

[reference.math.lr.lr.round.size.details]
en = "The size of the brackets, relative to the height of the wrapped content."

[reference.math.lr.lr.round.title]
en = "Round"

[reference.math.lr.lr.title]
en = "Left/Right"

[reference.math.lr.oneliner]
en = "Delimiter matching."

[reference.math.lr.title]
en = "Left/Right"

[reference.math.mat.description]
en = "Documentation for the `mat` function."

[reference.math.mat.mat.align.details]
en = "The horizontal alignment that each cell should have.\n\n"

[reference.math.mat.mat.augment.details]
en = "Draws augmentation lines in a matrix.\n\n- `{none}`: No lines are drawn.\n- A single number: A vertical augmentation line is drawn\n  after the specified column number. Negative numbers start from the end.\n- A dictionary: With a dictionary, multiple augmentation lines can be\n  drawn both horizontally and vertically. Additionally, the style of the\n  lines can be set. The dictionary can contain the following keys:\n  - `hline`: The offsets at which horizontal lines should be drawn.\n    For example, an offset of `2` would result in a horizontal line\n    being drawn after the second row of the matrix. Accepts either an\n    integer for a single line, or an array of integers\n    for multiple lines. Like for a single number, negative numbers start from the end.\n  - `vline`: The offsets at which vertical lines should be drawn.\n    For example, an offset of `2` would result in a vertical line being\n    drawn after the second column of the matrix. Accepts either an\n    integer for a single line, or an array of integers\n    for multiple lines. Like for a single number, negative numbers start from the end.\n  - `stroke`: How to [stroke]($stroke) the line. If set to `{auto}`,\n    takes on a thickness of 0.05em and square line caps.\n\n"

[reference.math.mat.mat.column-gap.details]
en = "The gap between columns.\n\n"

[reference.math.mat.mat.delim.details]
en = "The delimiter to use.\n\nCan be a single character specifying the left delimiter, in which case\nthe right delimiter is inferred. Otherwise, can be an array containing a\nleft and a right delimiter.\n\n"

[reference.math.mat.mat.details]
en = "A matrix.\n\nThe elements of a row should be separated by commas, while the rows\nthemselves should be separated by semicolons. The semicolon syntax merges\npreceding arguments separated by commas into an array. You can also use this\nspecial syntax of math function calls to define custom functions that take\n2D data.\n\nContent in cells can be aligned with the [`align`]($math.mat.align)\nparameter, or content in cells that are in the same row can be aligned with\nthe `&` symbol.\n\n# Example\n```example\n$ mat(\n  1, 2, ..., 10;\n  2, 2, ..., 10;\n  dots.v, dots.v, dots.down, dots.v;\n  10, 10, ..., 10;\n) $\n```"

[reference.math.mat.mat.gap.details]
en = "The gap between rows and columns.\n\nThis is a shorthand to set `row-gap` and `column-gap` to the same value.\n\n"

[reference.math.mat.mat.oneliner]
en = "A matrix."

[reference.math.mat.mat.row-gap.details]
en = "The gap between rows.\n\n"

[reference.math.mat.mat.rows.details]
en = "An array of arrays with the rows of the matrix.\n\n"

[reference.math.mat.mat.title]
en = "Matrix"

[reference.math.mat.oneliner]
en = "A matrix."

[reference.math.mat.title]
en = "Matrix"

[reference.math.math.details]
en = "Typst has special [syntax]($syntax/#math) and library functions to typeset\nmathematical formulas. Math formulas can be displayed inline with text or as\nseparate blocks. They will be typeset into their own block if they start and end\nwith at least one space (e.g. `[$ x^2 $]`).\n\n# Variables\nIn math, single letters are always displayed as is. Multiple letters, however,\nare interpreted as variables and functions. To display multiple letters\nverbatim, you can place them into quotes and to access single letter variables,\nyou can use the [hash syntax]($scripting/#expressions).\n\n```example\n$ A = pi r^2 $\n$ \"area\" = pi dot \"radius\"^2 $\n$ cal(A) :=\n    { x in RR | x \"is natural\" } $\n#let x = 5\n$ #x < 17 $\n```\n\n# Symbols\nMath mode makes a wide selection of [symbols]($category/symbols/sym) like `pi`,\n`dot`, or `RR` available. Many mathematical symbols are available in different\nvariants. You can select between different variants by applying\n[modifiers]($symbol) to the symbol. Typst further recognizes a number of\nshorthand sequences like `=>` that approximate a symbol. When such a shorthand\nexists, the symbol's documentation lists it.\n\n```example\n$ x < y => x gt.eq.not y $\n```\n\n# Line Breaks\nFormulas can also contain line breaks. Each line can contain one or multiple\n_alignment points_ (`&`) which are then aligned.\n\n```example\n$ sum_(k=0)^n k\n    &= 1 + ... + n \\\n    &= (n(n+1)) / 2 $\n```\n\n# Function calls\nMath mode supports special function calls without the hash prefix. In these\n\"math calls\", the argument list works a little differently than in code:\n\n- Within them, Typst is still in \"math mode\". Thus, you can write math directly\n  into them, but need to use hash syntax to pass code expressions (except for\n  strings, which are available in the math syntax).\n- They support positional and named arguments, as well as argument spreading.\n- They don't support trailing content blocks.\n- They provide additional syntax for 2-dimensional argument lists. The semicolon\n  (`;`) merges preceding arguments separated by commas into an array argument.\n\n```example\n$ frac(a^2, 2) $\n$ vec(1, 2, delim: \"[\") $\n$ mat(1, 2; 3, 4) $\n$ mat(..#range(1, 5).chunks(2)) $\n$ lim_x =\n    op(\"lim\", limits: #true)_x $\n```\n\nTo write a verbatim comma or semicolon in a math call, escape it with a\nbackslash. The colon on the other hand is only recognized in a special way if\ndirectly preceded by an identifier, so to display it verbatim in those cases,\nyou can just insert a space before it.\n\nFunctions calls preceded by a hash are normal code function calls and not\naffected by these rules.\n\n# Alignment\nWhen equations include multiple _alignment points_ (`&`), this creates blocks of\nalternatingly right- and left-aligned columns. In the example below, the\nexpression `(3x + y) / 7` is right-aligned and `= 9` is left-aligned. The word\n\"given\" is also left-aligned because `&&` creates two alignment points in a row,\nalternating the alignment twice. `& &` and `&&` behave exactly the same way.\nMeanwhile, \"multiply by 7\" is right-aligned because just one `&` precedes it.\nEach alignment point simply alternates between right-aligned/left-aligned.\n\n```example\n$ (3x + y) / 7 &= 9 && \"given\" \\\n  3x + y &= 63 & \"multiply by 7\" \\\n  3x &= 63 - y && \"subtract y\" \\\n  x &= 21 - y/3 & \"divide by 3\" $\n```\n\n# Math fonts\nYou can set the math font by with a [show-set rule]($styling/#show-rules) as\ndemonstrated below. Note that only special OpenType math fonts are suitable for\ntypesetting maths.\n\n```example\n#show math.equation: set text(font: \"Fira Math\")\n$ sum_(i in NN) 1 + i $\n```\n\n# Math module\nAll math functions are part of the `math` [module]($scripting/#modules), which\nis available by default in equations. Outside of equations, they can be accessed\nwith the `math.` prefix.\n"

[reference.math.math.title]
en = "Math"

[reference.math.op.description]
en = "Documentation for the `op` function."

[reference.math.op.oneliner]
en = "A text operator in an equation."

[reference.math.op.op.details]
en = "A text operator in an equation.\n\n# Example\n```example\n$ tan x = (sin x)/(cos x) $\n$ op(\"custom\",\n     limits: #true)_(n->oo) n $\n```\n\n# Predefined Operators { #predefined }\nTypst predefines the operators `arccos`, `arcsin`, `arctan`, `arg`, `cos`,\n`cosh`, `cot`, `coth`, `csc`, `csch`, `ctg`, `deg`, `det`, `dim`, `exp`,\n`gcd`, `lcm`, `hom`, `id`, `im`, `inf`, `ker`, `lg`, `lim`, `liminf`,\n`limsup`, `ln`, `log`, `max`, `min`, `mod`, `Pr`, `sec`, `sech`, `sin`,\n`sinc`, `sinh`, `sup`, `tan`, `tanh`, `tg` and `tr`."

[reference.math.op.op.limits.details]
en = "Whether the operator should show attachments as limits in display mode."

[reference.math.op.op.oneliner]
en = "A text operator in an equation."

[reference.math.op.op.text.details]
en = "The operator's text."

[reference.math.op.op.title]
en = "Text Operator"

[reference.math.op.title]
en = "Text Operator"

[reference.math.primes.description]
en = "Documentation for the `primes` function."

[reference.math.primes.oneliner]
en = "Grouped primes."

[reference.math.primes.primes.count.details]
en = "The number of grouped primes."

[reference.math.primes.primes.details]
en = "Grouped primes.\n\n```example\n$ a'''_b = a^'''_b $\n```\n\n# Syntax\nThis function has dedicated syntax: use apostrophes instead of primes. They\nwill automatically attach to the previous element, moving superscripts to\nthe next level."

[reference.math.primes.primes.oneliner]
en = "Grouped primes."

[reference.math.primes.primes.title]
en = "Primes"

[reference.math.primes.title]
en = "Primes"

[reference.math.roots.description]
en = "Documentation for the roots functions."

[reference.math.roots.oneliner]
en = "Square and non-square roots."

[reference.math.roots.roots.details]
en = "Square and non-square roots.\n\n# Example\n```example\n$ sqrt(3 - 2 sqrt(2)) = sqrt(2) - 1 $\n$ root(3, x) $\n```\n"

[reference.math.roots.roots.root.details]
en = "A general root.\n\n"

[reference.math.roots.roots.root.index.details]
en = "Which root of the radicand to take."

[reference.math.roots.roots.root.oneliner]
en = "A general root."

[reference.math.roots.roots.root.radicand.details]
en = "The expression to take the root of."

[reference.math.roots.roots.root.title]
en = "Root"

[reference.math.roots.roots.sqrt.details]
en = "A square root.\n\n"

[reference.math.roots.roots.sqrt.oneliner]
en = "A square root."

[reference.math.roots.roots.sqrt.radicand.details]
en = "The expression to take the square root of."

[reference.math.roots.roots.sqrt.title]
en = "Square Root"

[reference.math.roots.roots.title]
en = "Roots"

[reference.math.roots.title]
en = "Roots"

[reference.math.sizes.description]
en = "Documentation for the sizes functions."

[reference.math.sizes.oneliner]
en = "Forced size styles for expressions within formulas."

[reference.math.sizes.sizes.details]
en = "Forced size styles for expressions within formulas.\n\nThese functions allow manual configuration of the size of equation elements\nto make them look as in a display/inline equation or as if used in a root or\nsub/superscripts.\n"

[reference.math.sizes.sizes.display.body.details]
en = "The content to size."

[reference.math.sizes.sizes.display.cramped.details]
en = "Whether to impose a height restriction for exponents, like regular sub-\nand superscripts do."

[reference.math.sizes.sizes.display.details]
en = "Forced display style in math.\n\nThis is the normal size for block equations.\n\n"

[reference.math.sizes.sizes.display.oneliner]
en = "Forced display style in math."

[reference.math.sizes.sizes.display.title]
en = "Display Size"

[reference.math.sizes.sizes.inline.body.details]
en = "The content to size."

[reference.math.sizes.sizes.inline.cramped.details]
en = "Whether to impose a height restriction for exponents, like regular sub-\nand superscripts do."

[reference.math.sizes.sizes.inline.details]
en = "Forced inline (text) style in math.\n\nThis is the normal size for inline equations.\n\n"

[reference.math.sizes.sizes.inline.oneliner]
en = "Forced inline (text) style in math."

[reference.math.sizes.sizes.inline.title]
en = "Inline Size"

[reference.math.sizes.sizes.script.body.details]
en = "The content to size."

[reference.math.sizes.sizes.script.cramped.details]
en = "Whether to impose a height restriction for exponents, like regular sub-\nand superscripts do."

[reference.math.sizes.sizes.script.details]
en = "Forced script style in math.\n\nThis is the smaller size used in powers or sub- or superscripts.\n\n"

[reference.math.sizes.sizes.script.oneliner]
en = "Forced script style in math."

[reference.math.sizes.sizes.script.title]
en = "Script Size"

[reference.math.sizes.sizes.sscript.body.details]
en = "The content to size."

[reference.math.sizes.sizes.sscript.cramped.details]
en = "Whether to impose a height restriction for exponents, like regular sub-\nand superscripts do."

[reference.math.sizes.sizes.sscript.details]
en = "Forced second script style in math.\n\nThis is the smallest size, used in second-level sub- and superscripts\n(script of the script).\n\n"

[reference.math.sizes.sizes.sscript.oneliner]
en = "Forced second script style in math."

[reference.math.sizes.sizes.sscript.title]
en = "Script-Script Size"

[reference.math.sizes.sizes.title]
en = "Sizes"

[reference.math.sizes.title]
en = "Sizes"

[reference.math.stretch.description]
en = "Documentation for the `stretch` function."

[reference.math.stretch.oneliner]
en = "Stretches a glyph."

[reference.math.stretch.stretch.body.details]
en = "The glyph to stretch."

[reference.math.stretch.stretch.details]
en = "Stretches a glyph.\n\nThis function can also be used to automatically stretch the base of an\nattachment, so that it fits the top and bottom attachments.\n\nNote that only some glyphs can be stretched, and which ones can depend on\nthe math font being used. However, most math fonts are the same in this\nregard.\n\n```example\n$ H stretch(=)^\"define\" U + p V $\n$ f : X stretch(->>, size: #150%)_\"surjective\" Y $\n$ x stretch(harpoons.ltrb, size: #3em) y\n    stretch(\\[, size: #150%) z $\n```"

[reference.math.stretch.stretch.oneliner]
en = "Stretches a glyph."

[reference.math.stretch.stretch.size.details]
en = "The size to stretch to, relative to the maximum size of the glyph and\nits attachments."

[reference.math.stretch.stretch.title]
en = "Stretch"

[reference.math.stretch.title]
en = "Stretch"

[reference.math.styles.description]
en = "Documentation for the styles functions."

[reference.math.styles.oneliner]
en = "Alternate letterforms within formulas."

[reference.math.styles.styles.bold.body.details]
en = "The content to style."

[reference.math.styles.styles.bold.details]
en = "Bold font style in math.\n\n"

[reference.math.styles.styles.bold.oneliner]
en = "Bold font style in math."

[reference.math.styles.styles.bold.title]
en = "Bold"

[reference.math.styles.styles.details]
en = "Alternate letterforms within formulas.\n\nThese functions are distinct from the [`text`] function because math fonts\ncontain multiple variants of each letter.\n"

[reference.math.styles.styles.italic.body.details]
en = "The content to style."

[reference.math.styles.styles.italic.details]
en = "Italic font style in math.\n\nFor roman letters and greek lowercase letters, this is already the default."

[reference.math.styles.styles.italic.oneliner]
en = "Italic font style in math."

[reference.math.styles.styles.italic.title]
en = "Italic"

[reference.math.styles.styles.title]
en = "Styles"

[reference.math.styles.styles.upright.body.details]
en = "The content to style."

[reference.math.styles.styles.upright.details]
en = "Upright (non-italic) font style in math.\n\n"

[reference.math.styles.styles.upright.oneliner]
en = "Upright (non-italic) font style in math."

[reference.math.styles.styles.upright.title]
en = "Upright"

[reference.math.styles.title]
en = "Styles"

[reference.math.title]
en = "Math"

[reference.math.underover.description]
en = "Documentation for the underover functions."

[reference.math.underover.oneliner]
en = "Delimiters above or below parts of an equation."

[reference.math.underover.title]
en = "Under/Over"

[reference.math.underover.underover.details]
en = "Delimiters above or below parts of an equation.\n\nThe braces and brackets further allow you to add an optional annotation\nbelow or above themselves.\n"

[reference.math.underover.underover.overbrace.annotation.details]
en = "The optional content above the brace."

[reference.math.underover.underover.overbrace.body.details]
en = "The content below the brace."

[reference.math.underover.underover.overbrace.details]
en = "A horizontal brace over content, with an optional annotation above.\n\n"

[reference.math.underover.underover.overbrace.oneliner]
en = "A horizontal brace over content, with an optional annotation above."

[reference.math.underover.underover.overbrace.title]
en = "Overbrace"

[reference.math.underover.underover.overbracket.annotation.details]
en = "The optional content above the bracket."

[reference.math.underover.underover.overbracket.body.details]
en = "The content below the bracket."

[reference.math.underover.underover.overbracket.details]
en = "A horizontal bracket over content, with an optional annotation above.\n\n"

[reference.math.underover.underover.overbracket.oneliner]
en = "A horizontal bracket over content, with an optional annotation above."

[reference.math.underover.underover.overbracket.title]
en = "Overbracket"

[reference.math.underover.underover.overline.body.details]
en = "The content below the line."

[reference.math.underover.underover.overline.details]
en = "A horizontal line over content.\n\n"

[reference.math.underover.underover.overline.oneliner]
en = "A horizontal line over content."

[reference.math.underover.underover.overline.title]
en = "Overline"

[reference.math.underover.underover.overparen.annotation.details]
en = "The optional content above the parenthesis."

[reference.math.underover.underover.overparen.body.details]
en = "The content below the parenthesis."

[reference.math.underover.underover.overparen.details]
en = "A horizontal parenthesis over content, with an optional annotation above.\n\n"

[reference.math.underover.underover.overparen.oneliner]
en = "A horizontal parenthesis over content, with an optional annotation above."

[reference.math.underover.underover.overparen.title]
en = "Overparen"

[reference.math.underover.underover.overshell.annotation.details]
en = "The optional content above the tortoise shell bracket."

[reference.math.underover.underover.overshell.body.details]
en = "The content below the tortoise shell bracket."

[reference.math.underover.underover.overshell.details]
en = "A horizontal tortoise shell bracket over content, with an optional\nannotation above.\n\n"

[reference.math.underover.underover.overshell.oneliner]
en = "A horizontal tortoise shell bracket over content, with an optional"

[reference.math.underover.underover.overshell.title]
en = "Overshell"

[reference.math.underover.underover.title]
en = "Under/Over"

[reference.math.underover.underover.underbrace.annotation.details]
en = "The optional content below the brace."

[reference.math.underover.underover.underbrace.body.details]
en = "The content above the brace."

[reference.math.underover.underover.underbrace.details]
en = "A horizontal brace under content, with an optional annotation below.\n\n"

[reference.math.underover.underover.underbrace.oneliner]
en = "A horizontal brace under content, with an optional annotation below."

[reference.math.underover.underover.underbrace.title]
en = "Underbrace"

[reference.math.underover.underover.underbracket.annotation.details]
en = "The optional content below the bracket."

[reference.math.underover.underover.underbracket.body.details]
en = "The content above the bracket."

[reference.math.underover.underover.underbracket.details]
en = "A horizontal bracket under content, with an optional annotation below.\n\n"

[reference.math.underover.underover.underbracket.oneliner]
en = "A horizontal bracket under content, with an optional annotation below."

[reference.math.underover.underover.underbracket.title]
en = "Underbracket"

[reference.math.underover.underover.underline.body.details]
en = "The content above the line."

[reference.math.underover.underover.underline.details]
en = "A horizontal line under content.\n\n"

[reference.math.underover.underover.underline.oneliner]
en = "A horizontal line under content."

[reference.math.underover.underover.underline.title]
en = "Underline"

[reference.math.underover.underover.underparen.annotation.details]
en = "The optional content below the parenthesis."

[reference.math.underover.underover.underparen.body.details]
en = "The content above the parenthesis."

[reference.math.underover.underover.underparen.details]
en = "A horizontal parenthesis under content, with an optional annotation below.\n\n"

[reference.math.underover.underover.underparen.oneliner]
en = "A horizontal parenthesis under content, with an optional annotation below."

[reference.math.underover.underover.underparen.title]
en = "Underparen"

[reference.math.underover.underover.undershell.annotation.details]
en = "The optional content below the tortoise shell bracket."

[reference.math.underover.underover.undershell.body.details]
en = "The content above the tortoise shell bracket."

[reference.math.underover.underover.undershell.details]
en = "A horizontal tortoise shell bracket under content, with an optional\nannotation below.\n\n"

[reference.math.underover.underover.undershell.oneliner]
en = "A horizontal tortoise shell bracket under content, with an optional"

[reference.math.underover.underover.undershell.title]
en = "Undershell"

[reference.math.variants.description]
en = "Documentation for the variants functions."

[reference.math.variants.oneliner]
en = "Alternate typefaces within formulas."

[reference.math.variants.title]
en = "Variants"

[reference.math.variants.variants.bb.body.details]
en = "The content to style."

[reference.math.variants.variants.bb.details]
en = "Blackboard bold (double-struck) font style in math.\n\nFor uppercase latin letters, blackboard bold is additionally available\nthrough [symbols]($category/symbols/sym) of the form `NN` and `RR`.\n\n"

[reference.math.variants.variants.bb.oneliner]
en = "Blackboard bold (double-struck) font style in math."

[reference.math.variants.variants.bb.title]
en = "Blackboard Bold"

[reference.math.variants.variants.cal.body.details]
en = "The content to style."

[reference.math.variants.variants.cal.details]
en = "Calligraphic font style in math.\n\n"

[reference.math.variants.variants.cal.oneliner]
en = "Calligraphic font style in math."

[reference.math.variants.variants.cal.title]
en = "Calligraphic"

[reference.math.variants.variants.details]
en = "Alternate typefaces within formulas.\n\nThese functions are distinct from the [`text`] function because math fonts\ncontain multiple variants of each letter.\n"

[reference.math.variants.variants.frak.body.details]
en = "The content to style."

[reference.math.variants.variants.frak.details]
en = "Fraktur font style in math.\n\n"

[reference.math.variants.variants.frak.oneliner]
en = "Fraktur font style in math."

[reference.math.variants.variants.frak.title]
en = "Fraktur"

[reference.math.variants.variants.mono.body.details]
en = "The content to style."

[reference.math.variants.variants.mono.details]
en = "Monospace font style in math.\n\n"

[reference.math.variants.variants.mono.oneliner]
en = "Monospace font style in math."

[reference.math.variants.variants.mono.title]
en = "Monospace"

[reference.math.variants.variants.sans.body.details]
en = "The content to style."

[reference.math.variants.variants.sans.details]
en = "Sans-serif font style in math.\n\n"

[reference.math.variants.variants.sans.oneliner]
en = "Sans-serif font style in math."

[reference.math.variants.variants.sans.title]
en = "Sans Serif"

[reference.math.variants.variants.serif.body.details]
en = "The content to style."

[reference.math.variants.variants.serif.details]
en = "Serif (roman) font style in math.\n\nThis is already the default."

[reference.math.variants.variants.serif.oneliner]
en = "Serif (roman) font style in math."

[reference.math.variants.variants.serif.title]
en = "Serif"

[reference.math.variants.variants.title]
en = "Variants"

[reference.math.vec.description]
en = "Documentation for the `vec` function."

[reference.math.vec.oneliner]
en = "A column vector."

[reference.math.vec.title]
en = "Vector"

[reference.math.vec.vec.align.details]
en = "The horizontal alignment that each element should have.\n\n"

[reference.math.vec.vec.children.details]
en = "The elements of the vector."

[reference.math.vec.vec.delim.details]
en = "The delimiter to use.\n\nCan be a single character specifying the left delimiter, in which case\nthe right delimiter is inferred. Otherwise, can be an array containing a\nleft and a right delimiter.\n\n"

[reference.math.vec.vec.details]
en = "A column vector.\n\nContent in the vector's elements can be aligned with the\n[`align`]($math.vec.align) parameter, or the `&` symbol.\n\n# Example\n```example\n$ vec(a, b, c) dot vec(1, 2, 3)\n    = a + 2b + 3c $\n```"

[reference.math.vec.vec.gap.details]
en = "The gap between elements.\n\n"

[reference.math.vec.vec.oneliner]
en = "A column vector."

[reference.math.vec.vec.title]
en = "Vector"

[reference.model.bibliography.bibliography.details]
en = "A bibliography / reference listing.\n\nYou can create a new bibliography by calling this function with a path\nto a bibliography file in either one of two formats:\n\n- A Hayagriva `.yml` file. Hayagriva is a new bibliography file format\n  designed for use with Typst. Visit its\n  [documentation](https://github.com/typst/hayagriva/blob/main/docs/file-format.md)\n  for more details.\n- A BibLaTeX `.bib` file.\n\nAs soon as you add a bibliography somewhere in your document, you can start\nciting things with reference syntax (`[@key]`) or explicit calls to the\n[citation]($cite) function (`[#cite(<key>)]`). The bibliography will only\nshow entries for works that were referenced in the document.\n\n# Styles\nTypst offers a wide selection of built-in\n[citation and bibliography styles]($bibliography.style). Beyond those, you\ncan add and use custom [CSL](https://citationstyles.org/) (Citation Style\nLanguage) files. Wondering which style to use? Here are some good defaults\nbased on what discipline you're working in:\n\n| Fields          | Typical Styles                                         |\n|-----------------|--------------------------------------------------------|\n| Engineering, IT | `{\"ieee\"}`                                             |\n| Psychology, Life Sciences | `{\"apa\"}`                                    |\n| Social sciences | `{\"chicago-author-date\"}`                              |\n| Humanities      | `{\"mla\"}`, `{\"chicago-notes\"}`, `{\"harvard-cite-them-right\"}` |\n| Economics       | `{\"harvard-cite-them-right\"}`                          |\n| Physics         | `{\"american-physics-society\"}`                         |\n\n# Example\n```example\nThis was already noted by\npirates long ago. @arrgh\n\nMultiple sources say ...\n@arrgh @netwok.\n\n#bibliography(\"works.bib\")\n```"

[reference.model.bibliography.bibliography.full.details]
en = "Whether to include all works from the given bibliography files, even\nthose that weren't cited in the document.\n\nTo selectively add individual cited works without showing them, you can\nalso use the `cite` function with [`form`]($cite.form) set to `{none}`."

[reference.model.bibliography.bibliography.oneliner]
en = "A bibliography / reference listing."

[reference.model.bibliography.bibliography.sources.details]
en = "One or multiple paths to or raw bytes for Hayagriva `.yml` and/or\nBibLaTeX `.bib` files.\n\nThis can be a:\n- A path string to load a bibliography file from the given path. For\n  more details about paths, see the [Paths section]($syntax/#paths).\n- Raw bytes from which the bibliography should be decoded.\n- An array where each item is one the above."

[reference.model.bibliography.bibliography.style.details]
en = "The bibliography style.\n\nThis can be:\n- A string with the name of one of the built-in styles (see below). Some\n  of the styles listed below appear twice, once with their full name and\n  once with a short alias.\n- A path string to a [CSL file](https://citationstyles.org/). For more\n  details about paths, see the [Paths section]($syntax/#paths).\n- Raw bytes from which a CSL style should be decoded."

[reference.model.bibliography.bibliography.title]
en = "Bibliography"

[reference.model.bibliography.bibliography.title.details]
en = "The title of the bibliography.\n\n- When set to `{auto}`, an appropriate title for the\n  [text language]($text.lang) will be used. This is the default.\n- When set to `{none}`, the bibliography will not have a title.\n- A custom title can be set by passing content.\n\nThe bibliography's heading will not be numbered by default, but you can\nforce it to be with a show-set rule:\n`{show bibliography: set heading(numbering: \"1.\")}`"

[reference.model.bibliography.description]
en = "Documentation for the `bibliography` function."

[reference.model.bibliography.oneliner]
en = "A bibliography / reference listing."

[reference.model.bibliography.title]
en = "Bibliography"

[reference.model.cite.cite.details]
en = "Cite a work from the bibliography.\n\nBefore you starting citing, you need to add a [bibliography] somewhere in\nyour document.\n\n# Example\n```example\nThis was already noted by\npirates long ago. @arrgh\n\nMultiple sources say ...\n@arrgh @netwok.\n\nYou can also call `cite`\nexplicitly. #cite(<arrgh>)\n\n#bibliography(\"works.bib\")\n```\n\nIf your source name contains certain characters such as slashes, which are\nnot recognized by the `<>` syntax, you can explicitly call `label` instead.\n\n```typ\nComputer Modern is an example of a modernist serif typeface.\n#cite(label(\"DBLP:books/lib/Knuth86a\")).\n>>> #bibliography(\"works.bib\")\n```\n\n# Syntax\nThis function indirectly has dedicated syntax. [References]($ref) can be\nused to cite works from the bibliography. The label then corresponds to the\ncitation key."

[reference.model.cite.cite.form.details]
en = "The kind of citation to produce. Different forms are useful in different\nscenarios: A normal citation is useful as a source at the end of a\nsentence, while a \"prose\" citation is more suitable for inclusion in the\nflow of text.\n\nIf set to `{none}`, the cited work is included in the bibliography, but\nnothing will be displayed.\n\n"

[reference.model.cite.cite.key.details]
en = "The citation key that identifies the entry in the bibliography that\nshall be cited, as a label.\n\n"

[reference.model.cite.cite.oneliner]
en = "Cite a work from the bibliography."

[reference.model.cite.cite.style.details]
en = "The citation style.\n\nThis can be:\n- `{auto}` to automatically use the\n  [bibliography's style]($bibliography.style) for citations.\n- A string with the name of one of the built-in styles (see below). Some\n  of the styles listed below appear twice, once with their full name and\n  once with a short alias.\n- A path string to a [CSL file](https://citationstyles.org/). For more\n  details about paths, see the [Paths section]($syntax/#paths).\n- Raw bytes from which a CSL style should be decoded."

[reference.model.cite.cite.supplement.details]
en = "A supplement for the citation such as page or chapter number.\n\nIn reference syntax, the supplement can be added in square brackets:\n\n"

[reference.model.cite.cite.title]
en = "Cite"

[reference.model.cite.description]
en = "Documentation for the `cite` function."

[reference.model.cite.oneliner]
en = "Cite a work from the bibliography."

[reference.model.cite.title]
en = "Cite"

[reference.model.description]
en = "Documentation for functions related to Model in Typst."

[reference.model.document.description]
en = "Documentation for the `document` function."

[reference.model.document.document.author.details]
en = "The document's authors."

[reference.model.document.document.date.details]
en = "The document's creation date.\n\nIf this is `{auto}` (default), Typst uses the current date and time.\nSetting it to `{none}` prevents Typst from embedding any creation date\ninto the PDF metadata.\n\nThe year component must be at least zero in order to be embedded into a\nPDF.\n\nIf you want to create byte-by-byte reproducible PDFs, set this to\nsomething other than `{auto}`."

[reference.model.document.document.description.details]
en = "The document's description."

[reference.model.document.document.details]
en = "The root element of a document and its metadata.\n\nAll documents are automatically wrapped in a `document` element. You cannot\ncreate a document element yourself. This function is only used with\n[set rules]($styling/#set-rules) to specify document metadata. Such a set\nrule must not occur inside of any layout container.\n\n```example\n#set document(title: [Hello])\n\nThis has no visible output, but\nembeds metadata into the PDF!\n```\n\nNote that metadata set with this function is not rendered within the\ndocument. Instead, it is embedded in the compiled PDF file."

[reference.model.document.document.keywords.details]
en = "The document's keywords."

[reference.model.document.document.oneliner]
en = "The root element of a document and its metadata."

[reference.model.document.document.title]
en = "Document"

[reference.model.document.document.title.details]
en = "The document's title. This is often rendered as the title of the\nPDF viewer window.\n\nWhile this can be arbitrary content, PDF viewers only support plain text\ntitles, so the conversion might be lossy."

[reference.model.document.oneliner]
en = "The root element of a document and its metadata."

[reference.model.document.title]
en = "Document"

[reference.model.emph.description]
en = "Documentation for the `emph` function."

[reference.model.emph.emph.body.details]
en = "The content to emphasize."

[reference.model.emph.emph.details]
en = "Emphasizes content by toggling italics.\n\n- If the current [text style]($text.style) is `{\"normal\"}`, this turns it\n  into `{\"italic\"}`.\n- If it is already `{\"italic\"}` or `{\"oblique\"}`, it turns it back to\n  `{\"normal\"}`.\n\n# Example\n```example\nThis is _emphasized._ \\\nThis is #emph[too.]\n\n#show emph: it => {\n  text(blue, it.body)\n}\n\nThis is _emphasized_ differently.\n```\n\n# Syntax\nThis function also has dedicated syntax: To emphasize content, simply\nenclose it in underscores (`_`). Note that this only works at word\nboundaries. To emphasize part of a word, you have to use the function."

[reference.model.emph.emph.oneliner]
en = "Emphasizes content by toggling italics."

[reference.model.emph.emph.title]
en = "Emphasis"

[reference.model.emph.oneliner]
en = "Emphasizes content by toggling italics."

[reference.model.emph.title]
en = "Emphasis"

[reference.model.enum.description]
en = "Documentation for the `enum` function."

[reference.model.enum.enum.body-indent.details]
en = "The space between the numbering and the body of each item."

[reference.model.enum.enum.children.details]
en = "The numbered list's items.\n\nWhen using the enum syntax, adjacent items are automatically collected\ninto enumerations, even through constructs like for loops.\n\n"

[reference.model.enum.enum.details]
en = "A numbered list.\n\nDisplays a sequence of items vertically and numbers them consecutively.\n\n# Example\n```example\nAutomatically numbered:\n+ Preparations\n+ Analysis\n+ Conclusions\n\nManually numbered:\n2. What is the first step?\n5. I am confused.\n+  Moving on ...\n\nMultiple lines:\n+ This enum item has multiple\n  lines because the next line\n  is indented.\n\nFunction call.\n#enum[First][Second]\n```\n\nYou can easily switch all your enumerations to a different numbering style\nwith a set rule.\n```example\n#set enum(numbering: \"a)\")\n\n+ Starting off ...\n+ Don't forget step two\n```\n\nYou can also use [`enum.item`]($enum.item) to programmatically customize the\nnumber of each item in the enumeration:\n\n```example\n#enum(\n  enum.item(1)[First step],\n  enum.item(5)[Fifth step],\n  enum.item(10)[Tenth step]\n)\n```\n\n# Syntax\nThis functions also has dedicated syntax:\n\n- Starting a line with a plus sign creates an automatically numbered\n  enumeration item.\n- Starting a line with a number followed by a dot creates an explicitly\n  numbered enumeration item.\n\nEnumeration items can contain multiple paragraphs and other block-level\ncontent. All content that is indented more than an item's marker becomes\npart of that item."

[reference.model.enum.enum.full.details]
en = "Whether to display the full numbering, including the numbers of\nall parent enumerations.\n\n\n"

[reference.model.enum.enum.indent.details]
en = "The indentation of each item."

[reference.model.enum.enum.item.body.details]
en = "The item's body."

[reference.model.enum.enum.item.details]
en = "An enumeration item."

[reference.model.enum.enum.item.number.details]
en = "The item's number."

[reference.model.enum.enum.item.oneliner]
en = "An enumeration item."

[reference.model.enum.enum.item.title]
en = "Numbered List Item"

[reference.model.enum.enum.number-align.details]
en = "The alignment that enum numbers should have.\n\nBy default, this is set to `{end + top}`, which aligns enum numbers\ntowards end of the current text direction (in left-to-right script,\nfor example, this is the same as `{right}`) and at the top of the line.\nThe choice of `{end}` for horizontal alignment of enum numbers is\nusually preferred over `{start}`, as numbers then grow away from the\ntext instead of towards it, avoiding certain visual issues. This option\nlets you override this behaviour, however. (Also to note is that the\n[unordered list]($list) uses a different method for this, by giving the\n`marker` content an alignment directly.).\n\n"

[reference.model.enum.enum.numbering.details]
en = "How to number the enumeration. Accepts a\n[numbering pattern or function]($numbering).\n\nIf the numbering pattern contains multiple counting symbols, they apply\nto nested enums. If given a function, the function receives one argument\nif `full` is `{false}` and multiple arguments if `full` is `{true}`.\n\n"

[reference.model.enum.enum.oneliner]
en = "A numbered list."

[reference.model.enum.enum.reversed.details]
en = "Whether to reverse the numbering for this enumeration.\n\n"

[reference.model.enum.enum.spacing.details]
en = "The spacing between the items of the enumeration.\n\nIf set to `{auto}`, uses paragraph [`leading`]($par.leading) for tight\nenumerations and paragraph [`spacing`]($par.spacing) for wide\n(non-tight) enumerations."

[reference.model.enum.enum.start.details]
en = "Which number to start the enumeration with.\n\n"

[reference.model.enum.enum.tight.details]
en = "Defines the default [spacing]($enum.spacing) of the enumeration. If it\nis `{false}`, the items are spaced apart with\n[paragraph spacing]($par.spacing). If it is `{true}`, they use\n[paragraph leading]($par.leading) instead. This makes the list more\ncompact, which can look better if the items are short.\n\nIn markup mode, the value of this parameter is determined based on\nwhether items are separated with a blank line. If items directly follow\neach other, this is set to `{true}`; if items are separated by a blank\nline, this is set to `{false}`. The markup-defined tightness cannot be\noverridden with set rules.\n\n"

[reference.model.enum.enum.title]
en = "Numbered List"

[reference.model.enum.oneliner]
en = "A numbered list."

[reference.model.enum.title]
en = "Numbered List"

[reference.model.figure.description]
en = "Documentation for the `figure` function."

[reference.model.figure.figure.body.details]
en = "The content of the figure. Often, an [image]."

[reference.model.figure.figure.caption.body.details]
en = "The caption's body.\n\nCan be used alongside `kind`, `supplement`, `counter`, `numbering`, and\n`location` to completely customize the caption.\n\n"

[reference.model.figure.figure.caption.details]
en = "The caption of a figure. This element can be used in set and show rules to\ncustomize the appearance of captions for all figures or figures of a\nspecific kind.\n\nIn addition to its `pos` and `body`, the `caption` also provides the\nfigure's `kind`, `supplement`, `counter`, and `numbering` as fields. These\nparts can be used in [`where`]($function.where) selectors and show rules to\nbuild a completely custom caption.\n\n"

[reference.model.figure.figure.caption.oneliner]
en = "The caption of a figure. This element can be used in set and show rules to"

[reference.model.figure.figure.caption.position.details]
en = "The caption's position in the figure. Either `{top}` or `{bottom}`.\n\n"

[reference.model.figure.figure.caption.separator.details]
en = "The separator which will appear between the number and body.\n\nIf set to `{auto}`, the separator will be adapted to the current\n[language]($text.lang) and [region]($text.region).\n\n"

[reference.model.figure.figure.caption.title]
en = "Caption"

[reference.model.figure.figure.details]
en = "A figure with an optional caption.\n\nAutomatically detects its kind to select the correct counting track. For\nexample, figures containing images will be numbered separately from figures\ncontaining tables.\n\n# Examples\nThe example below shows a basic figure with an image:\n```example\n@glacier shows a glacier. Glaciers\nare complex systems.\n\n#figure(\n  image(\"glacier.jpg\", width: 80%),\n  caption: [A curious figure.],\n) <glacier>\n```\n\nYou can also insert [tables]($table) into figures to give them a caption.\nThe figure will detect this and automatically use a separate counter.\n\n```example\n#figure(\n  table(\n    columns: 4,\n    [t], [1], [2], [3],\n    [y], [0.3s], [0.4s], [0.8s],\n  ),\n  caption: [Timing results],\n)\n```\n\nThis behaviour can be overridden by explicitly specifying the figure's\n`kind`. All figures of the same kind share a common counter.\n\n# Figure behaviour\nBy default, figures are placed within the flow of content. To make them\nfloat to the top or bottom of the page, you can use the\n[`placement`]($figure.placement) argument.\n\nIf your figure is too large and its contents are breakable across pages\n(e.g. if it contains a large table), then you can make the figure itself\nbreakable across pages as well with this show rule:\n```typ\n#show figure: set block(breakable: true)\n```\n\nSee the [block]($block.breakable) documentation for more information about\nbreakable and non-breakable blocks.\n\n# Caption customization\nYou can modify the appearance of the figure's caption with its associated\n[`caption`]($figure.caption) function. In the example below, we emphasize\nall captions:\n\n```example\n#show figure.caption: emph\n\n#figure(\n  rect[Hello],\n  caption: [I am emphasized!],\n)\n```\n\nBy using a [`where`]($function.where) selector, we can scope such rules to\nspecific kinds of figures. For example, to position the caption above\ntables, but keep it below for all other kinds of figures, we could write the\nfollowing show-set rule:\n\n```example\n#show figure.where(\n  kind: table\n): set figure.caption(position: top)\n\n#figure(\n  table(columns: 2)[A][B][C][D],\n  caption: [I'm up here],\n)\n```"

[reference.model.figure.figure.gap.details]
en = "The vertical gap between the body and caption."

[reference.model.figure.figure.kind.details]
en = "The kind of figure this is.\n\nAll figures of the same kind share a common counter.\n\nIf set to `{auto}`, the figure will try to automatically determine its\nkind based on the type of its body. Automatically detected kinds are\n[tables]($table) and [code]($raw). In other cases, the inferred kind is\nthat of an [image].\n\nSetting this to something other than `{auto}` will override the\nautomatic detection. This can be useful if\n- you wish to create a custom figure type that is not an\n  [image], a [table] or [code]($raw),\n- you want to force the figure to use a specific counter regardless of\n  its content.\n\nYou can set the kind to be an element function or a string. If you set\nit to an element function other than [`{table}`]($table), [`{raw}`](raw)\nor [`{image}`](image), you will need to manually specify the figure's\nsupplement.\n\n"

[reference.model.figure.figure.numbering.details]
en = "How to number the figure. Accepts a\n[numbering pattern or function]($numbering)."

[reference.model.figure.figure.oneliner]
en = "A figure with an optional caption."

[reference.model.figure.figure.outlined.details]
en = "Whether the figure should appear in an [`outline`] of figures."

[reference.model.figure.figure.placement.details]
en = "The figure's placement on the page.\n\n- `{none}`: The figure stays in-flow exactly where it was specified\n  like other content.\n- `{auto}`: The figure picks `{top}` or `{bottom}` depending on which\n  is closer.\n- `{top}`: The figure floats to the top of the page.\n- `{bottom}`: The figure floats to the bottom of the page.\n\nThe gap between the main flow content and the floating figure is\ncontrolled by the [`clearance`]($place.clearance) argument on the\n`place` function.\n\n"

[reference.model.figure.figure.scope.details]
en = "Relative to which containing scope the figure is placed.\n\nSet this to `{\"parent\"}` to create a full-width figure in a two-column\ndocument.\n\nHas no effect if `placement` is `{none}`.\n\n"

[reference.model.figure.figure.supplement.details]
en = "The figure's supplement.\n\nIf set to `{auto}`, the figure will try to automatically determine the\ncorrect supplement based on the `kind` and the active\n[text language]($text.lang). If you are using a custom figure type, you\nwill need to manually specify the supplement.\n\nIf a function is specified, it is passed the first descendant of the\nspecified `kind` (typically, the figure's body) and should return\ncontent.\n\n"

[reference.model.figure.figure.title]
en = "Figure"

[reference.model.figure.oneliner]
en = "A figure with an optional caption."

[reference.model.figure.title]
en = "Figure"

[reference.model.footnote.description]
en = "Documentation for the `footnote` function."

[reference.model.footnote.footnote.body.details]
en = "The content to put into the footnote. Can also be the label of another\nfootnote this one should point to."

[reference.model.footnote.footnote.details]
en = "A footnote.\n\nIncludes additional remarks and references on the same page with footnotes.\nA footnote will insert a superscript number that links to the note at the\nbottom of the page. Notes are numbered sequentially throughout your document\nand can break across multiple pages.\n\nTo customize the appearance of the entry in the footnote listing, see\n[`footnote.entry`]($footnote.entry). The footnote itself is realized as a\nnormal superscript, so you can use a set rule on the [`super`] function to\ncustomize it. You can also apply a show rule to customize only the footnote\nmarker (superscript number) in the running text.\n\n# Example\n```example\nCheck the docs for more details.\n#footnote[https://typst.app/docs]\n```\n\nThe footnote automatically attaches itself to the preceding word, even if\nthere is a space before it in the markup. To force space, you can use the\nstring `[#\" \"]` or explicit [horizontal spacing]($h).\n\nBy giving a label to a footnote, you can have multiple references to it.\n\n```example\nYou can edit Typst documents online.\n#footnote[https://typst.app/app] <fn>\nCheckout Typst's website. @fn\nAnd the online app. #footnote(<fn>)\n```\n\n_Note:_ Set and show rules in the scope where `footnote` is called may not\napply to the footnote's content. See [here][issue] for more information.\n\n[issue]: https://github.com/typst/typst/issues/1467#issuecomment-1588799440"

[reference.model.footnote.footnote.entry.clearance.details]
en = "The amount of clearance between the document body and the separator.\n\n"

[reference.model.footnote.footnote.entry.details]
en = "An entry in a footnote list.\n\nThis function is not intended to be called directly. Instead, it is used in\nset and show rules to customize footnote listings.\n\n"

[reference.model.footnote.footnote.entry.gap.details]
en = "The gap between footnote entries.\n\n"

[reference.model.footnote.footnote.entry.indent.details]
en = "The indent of each footnote entry.\n\n"

[reference.model.footnote.footnote.entry.note.details]
en = "The footnote for this entry. Its location can be used to determine\nthe footnote counter state.\n\n"

[reference.model.footnote.footnote.entry.oneliner]
en = "An entry in a footnote list."

[reference.model.footnote.footnote.entry.separator.details]
en = "The separator between the document body and the footnote listing.\n\n"

[reference.model.footnote.footnote.entry.title]
en = "Footnote Entry"

[reference.model.footnote.footnote.numbering.details]
en = "How to number footnotes.\n\nBy default, the footnote numbering continues throughout your document.\nIf you prefer per-page footnote numbering, you can reset the footnote\n[counter] in the page [header]($page.header). In the future, there might\nbe a simpler way to achieve this.\n\n"

[reference.model.footnote.footnote.oneliner]
en = "A footnote."

[reference.model.footnote.footnote.title]
en = "Footnote"

[reference.model.footnote.oneliner]
en = "A footnote."

[reference.model.footnote.title]
en = "Footnote"

[reference.model.heading.description]
en = "Documentation for the `heading` function."

[reference.model.heading.heading.body.details]
en = "The heading's title."

[reference.model.heading.heading.bookmarked.details]
en = "Whether the heading should appear as a bookmark in the exported PDF's\noutline. Doesn't affect other export formats, such as PNG.\n\nThe default value of `{auto}` indicates that the heading will only\nappear in the exported PDF's outline if its `outlined` property is set\nto `{true}`, that is, if it would also be listed in Typst's [outline].\nSetting this property to either `{true}` (bookmark) or `{false}` (don't\nbookmark) bypasses that behavior.\n\n"

[reference.model.heading.heading.depth.details]
en = "The relative nesting depth of the heading, starting from one. This is\ncombined with `{offset}` to compute the actual `{level}`.\n\nThis is set by the heading syntax, such that `[== Heading]` creates a\nheading with logical depth of 2, but actual level `{offset + 2}`. If you\nconstruct a heading manually, you should typically prefer this over\nsetting the absolute level."

[reference.model.heading.heading.details]
en = "A section heading.\n\nWith headings, you can structure your document into sections. Each heading\nhas a _level,_ which starts at one and is unbounded upwards. This level\nindicates the logical role of the following content (section, subsection,\netc.) A top-level heading indicates a top-level section of the document\n(not the document's title).\n\nTypst can automatically number your headings for you. To enable numbering,\nspecify how you want your headings to be numbered with a\n[numbering pattern or function]($numbering).\n\nIndependently of the numbering, Typst can also automatically generate an\n[outline] of all headings for you. To exclude one or more headings from this\noutline, you can set the `outlined` parameter to `{false}`.\n\n# Example\n```example\n#set heading(numbering: \"1.a)\")\n\n= Introduction\nIn recent years, ...\n\n== Preliminaries\nTo start, ...\n```\n\n# Syntax\nHeadings have dedicated syntax: They can be created by starting a line with\none or multiple equals signs, followed by a space. The number of equals\nsigns determines the heading's logical nesting depth. The `{offset}` field\ncan be set to configure the starting depth."

[reference.model.heading.heading.hanging-indent.details]
en = "The indent all but the first line of a heading should have.\n\nThe default value of `{auto}` indicates that the subsequent heading\nlines will be indented based on the width of the numbering.\n\n"

[reference.model.heading.heading.level.details]
en = "The absolute nesting depth of the heading, starting from one. If set\nto `{auto}`, it is computed from `{offset + depth}`.\n\nThis is primarily useful for usage in [show rules]($styling/#show-rules)\n(either with [`where`]($function.where) selectors or by accessing the\nlevel directly on a shown heading).\n\n"

[reference.model.heading.heading.numbering.details]
en = "How to number the heading. Accepts a\n[numbering pattern or function]($numbering).\n\n"

[reference.model.heading.heading.offset.details]
en = "The starting offset of each heading's `{level}`, used to turn its\nrelative `{depth}` into its absolute `{level}`.\n\n"

[reference.model.heading.heading.oneliner]
en = "A section heading."

[reference.model.heading.heading.outlined.details]
en = "Whether the heading should appear in the [outline].\n\nNote that this property, if set to `{true}`, ensures the heading is also\nshown as a bookmark in the exported PDF's outline (when exporting to\nPDF). To change that behavior, use the `bookmarked` property.\n\n"

[reference.model.heading.heading.supplement.details]
en = "A supplement for the heading.\n\nFor references to headings, this is added before the referenced number.\n\nIf a function is specified, it is passed the referenced heading and\nshould return content.\n\n"

[reference.model.heading.heading.title]
en = "Heading"

[reference.model.heading.oneliner]
en = "A section heading."

[reference.model.heading.title]
en = "Heading"

[reference.model.link.description]
en = "Documentation for the `link` function."

[reference.model.link.link.body.details]
en = "The content that should become a link.\n\nIf `dest` is an URL string, the parameter can be omitted. In this case,\nthe URL will be shown as the link."

[reference.model.link.link.dest.details]
en = "The destination the link points to.\n\n- To link to web pages, `dest` should be a valid URL string. If the URL\n  is in the `mailto:` or `tel:` scheme and the `body` parameter is\n  omitted, the email address or phone number will be the link's body,\n  without the scheme.\n\n- To link to another part of the document, `dest` can take one of three\n  forms:\n  - A [label] attached to an element. If you also want automatic text\n    for the link based on the element, consider using a\n    [reference]($ref) instead.\n\n  - A [`location`] (typically retrieved from [`here`], [`locate`] or\n    [`query`]).\n\n  - A dictionary with a `page` key of type [integer]($int) and `x` and\n    `y` coordinates of type [length]. Pages are counted from one, and\n    the coordinates are relative to the page's top left corner.\n\n"

[reference.model.link.link.details]
en = "Links to a URL or a location in the document.\n\nBy default, links do not look any different from normal text. However,\nyou can easily apply a style of your choice with a show rule.\n\n# Example\n```example\n#show link: underline\n\nhttps://example.com \\\n\n#link(\"https://example.com\") \\\n#link(\"https://example.com\")[\n  See example.com\n]\n```\n\n# Hyphenation\nIf you enable hyphenation or justification, by default, it will not apply to\nlinks to prevent unwanted hyphenation in URLs. You can opt out of this\ndefault via `{show link: set text(hyphenate: true)}`.\n\n# Syntax\nThis function also has dedicated syntax: Text that starts with `http://` or\n`https://` is automatically turned into a link."

[reference.model.link.link.oneliner]
en = "Links to a URL or a location in the document."

[reference.model.link.link.title]
en = "Link"

[reference.model.link.oneliner]
en = "Links to a URL or a location in the document."

[reference.model.link.title]
en = "Link"

[reference.model.list.description]
en = "Documentation for the `list` function."

[reference.model.list.list.body-indent.details]
en = "The spacing between the marker and the body of each item."

[reference.model.list.list.children.details]
en = "The bullet list's children.\n\nWhen using the list syntax, adjacent items are automatically collected\ninto lists, even through constructs like for loops.\n\n"

[reference.model.list.list.details]
en = "A bullet list.\n\nDisplays a sequence of items vertically, with each item introduced by a\nmarker.\n\n# Example\n```example\nNormal list.\n- Text\n- Math\n- Layout\n- ...\n\nMultiple lines.\n- This list item spans multiple\n  lines because it is indented.\n\nFunction call.\n#list(\n  [Foundations],\n  [Calculate],\n  [Construct],\n  [Data Loading],\n)\n```\n\n# Syntax\nThis functions also has dedicated syntax: Start a line with a hyphen,\nfollowed by a space to create a list item. A list item can contain multiple\nparagraphs and other block-level content. All content that is indented\nmore than an item's marker becomes part of that item."

[reference.model.list.list.indent.details]
en = "The indent of each item."

[reference.model.list.list.item.body.details]
en = "The item's body."

[reference.model.list.list.item.details]
en = "A bullet list item."

[reference.model.list.list.item.oneliner]
en = "A bullet list item."

[reference.model.list.list.item.title]
en = "Bullet List Item"

[reference.model.list.list.marker.details]
en = "The marker which introduces each item.\n\nInstead of plain content, you can also pass an array with multiple\nmarkers that should be used for nested lists. If the list nesting depth\nexceeds the number of markers, the markers are cycled. For total\ncontrol, you may pass a function that maps the list's nesting depth\n(starting from `{0}`) to a desired marker.\n\n"

[reference.model.list.list.oneliner]
en = "A bullet list."

[reference.model.list.list.spacing.details]
en = "The spacing between the items of the list.\n\nIf set to `{auto}`, uses paragraph [`leading`]($par.leading) for tight\nlists and paragraph [`spacing`]($par.spacing) for wide (non-tight)\nlists."

[reference.model.list.list.tight.details]
en = "Defines the default [spacing]($list.spacing) of the list. If it is\n`{false}`, the items are spaced apart with\n[paragraph spacing]($par.spacing). If it is `{true}`, they use\n[paragraph leading]($par.leading) instead. This makes the list more\ncompact, which can look better if the items are short.\n\nIn markup mode, the value of this parameter is determined based on\nwhether items are separated with a blank line. If items directly follow\neach other, this is set to `{true}`; if items are separated by a blank\nline, this is set to `{false}`. The markup-defined tightness cannot be\noverridden with set rules.\n\n"

[reference.model.list.list.title]
en = "Bullet List"

[reference.model.list.oneliner]
en = "A bullet list."

[reference.model.list.title]
en = "Bullet List"

[reference.model.model.details]
en = "Document structuring.\n\nHere, you can find functions to structure your document and interact with that\nstructure. This includes section headings, figures, bibliography management,\ncross-referencing and more.\n"

[reference.model.model.title]
en = "Model"

[reference.model.numbering.description]
en = "Documentation for the `numbering` function."

[reference.model.numbering.numbering.details]
en = "Applies a numbering to a sequence of numbers.\n\nA numbering defines how a sequence of numbers should be displayed as\ncontent. It is defined either through a pattern string or an arbitrary\nfunction.\n\nA numbering pattern consists of counting symbols, for which the actual\nnumber is substituted, their prefixes, and one suffix. The prefixes and the\nsuffix are repeated as-is.\n\n# Example\n```example\n#numbering(\"1.1)\", 1, 2, 3) \\\n#numbering(\"1.a.i\", 1, 2) \\\n#numbering(\"I – 1\", 12, 2) \\\n#numbering(\n  (..nums) => nums\n    .pos()\n    .map(str)\n    .join(\".\") + \")\",\n  1, 2, 3,\n)\n```\n\n# Numbering patterns and numbering functions\nThere are multiple instances where you can provide a numbering pattern or\nfunction in Typst. For example, when defining how to number\n[headings]($heading) or [figures]($figure). Every time, the expected format\nis the same as the one described below for the\n[`numbering`]($numbering.numbering) parameter.\n\nThe following example illustrates that a numbering function is just a\nregular [function] that accepts numbers and returns [`content`].\n```example\n#let unary(.., last) = \"|\" * last\n#set heading(numbering: unary)\n= First heading\n= Second heading\n= Third heading\n```"

[reference.model.numbering.numbering.numbering.details]
en = "Defines how the numbering works.\n\n**Counting symbols** are `1`, `a`, `A`, `i`, `I`, `α`, `Α`, `一`, `壹`,\n`あ`, `い`, `ア`, `イ`, `א`, `가`, `ㄱ`, `*`, `١`, `۱`, `१`, `১`, `ক`,\n`①`, and `⓵`. They are replaced by the number in the sequence,\npreserving the original case.\n\nThe `*` character means that symbols should be used to count, in the\norder of `*`, `†`, `‡`, `§`, `¶`, `‖`. If there are more than six\nitems, the number is represented using repeated symbols.\n\n**Suffixes** are all characters after the last counting symbol. They are\nrepeated as-is at the end of any rendered number.\n\n**Prefixes** are all characters that are neither counting symbols nor\nsuffixes. They are repeated as-is at in front of their rendered\nequivalent of their counting symbol.\n\nThis parameter can also be an arbitrary function that gets each number\nas an individual argument. When given a function, the `numbering`\nfunction just forwards the arguments to that function. While this is not\nparticularly useful in itself, it means that you can just give arbitrary\nnumberings to the `numbering` function without caring whether they are\ndefined as a pattern or function."

[reference.model.numbering.numbering.numbers.details]
en = "The numbers to apply the numbering to. Must be positive.\n\nIf `numbering` is a pattern and more numbers than counting symbols are\ngiven, the last counting symbol with its prefix is repeated."

[reference.model.numbering.numbering.oneliner]
en = "Applies a numbering to a sequence of numbers."

[reference.model.numbering.numbering.title]
en = "Numbering"

[reference.model.numbering.oneliner]
en = "Applies a numbering to a sequence of numbers."

[reference.model.numbering.title]
en = "Numbering"

[reference.model.outline.description]
en = "Documentation for the `outline` function."

[reference.model.outline.oneliner]
en = "A table of contents, figures, or other elements."

[reference.model.outline.outline.depth.details]
en = "The maximum level up to which elements are included in the outline. When\nthis argument is `{none}`, all elements are included.\n\n"

[reference.model.outline.outline.details]
en = "A table of contents, figures, or other elements.\n\nThis function generates a list of all occurrences of an element in the\ndocument, up to a given [`depth`]($outline.depth). The element's numbering\nand page number will be displayed in the outline alongside its title or\ncaption.\n\n# Example\n```example\n#set heading(numbering: \"1.\")\n#outline()\n\n= Introduction\n#lorem(5)\n\n= Methods\n== Setup\n#lorem(10)\n```\n\n# Alternative outlines\nIn its default configuration, this function generates a table of contents.\nBy setting the `target` parameter, the outline can be used to generate a\nlist of other kinds of elements than headings.\n\nIn the example below, we list all figures containing images by setting\n`target` to `{figure.where(kind: image)}`. Just the same, we could have set\nit to `{figure.where(kind: table)}` to generate a list of tables.\n\nWe could also set it to just `figure`, without using a [`where`]($function.where)\nselector, but then the list would contain _all_ figures, be it ones\ncontaining images, tables, or other material.\n\n```example\n#outline(\n  title: [List of Figures],\n  target: figure.where(kind: image),\n)\n\n#figure(\n  image(\"tiger.jpg\"),\n  caption: [A nice figure!],\n)\n```\n\n# Styling the outline\nAt the most basic level, you can style the outline by setting properties on\nit and its entries. This way, you can customize the outline's\n[title]($outline.title), how outline entries are\n[indented]($outline.indent), and how the space between an entry's text and\nits page number should be [filled]($outline.entry.fill).\n\nRicher customization is possible through configuration of the outline's\n[entries]($outline.entry). The outline generates one entry for each outlined\nelement.\n\n## Spacing the entries { #entry-spacing }\nOutline entries are [blocks]($block), so you can adjust the spacing between\nthem with normal block-spacing rules:\n\n```example\n#show outline.entry.where(\n  level: 1\n): set block(above: 1.2em)\n\n#outline()\n\n= About ACME Corp.\n== History\n=== Origins\n= Products\n== ACME Tools\n```\n\n## Building an outline entry from its parts { #building-an-entry }\nFor full control, you can also write a transformational show rule on\n`outline.entry`. However, the logic for properly formatting and indenting\noutline entries is quite complex and the outline entry itself only contains\ntwo fields: The level and the outlined element.\n\nFor this reason, various helper functions are provided. You can mix and\nmatch these to compose an entry from just the parts you like.\n\nThe default show rule for an outline entry looks like this[^1]:\n```typ\n#show outline.entry: it => link(\n  it.element.location(),\n  it.indented(it.prefix(), it.inner()),\n)\n```\n\n- The [`indented`]($outline.entry.indented) function takes an optional\n  prefix and inner content and automatically applies the proper indentation\n  to it, such that different entries align nicely and long headings wrap\n  properly.\n\n- The [`prefix`]($outline.entry.prefix) function formats the element's\n  numbering (if any). It also appends a supplement for certain elements.\n\n- The [`inner`]($outline.entry.inner) function combines the element's\n  [`body`]($outline.entry.body), the filler, and the\n  [`page` number]($outline.entry.page).\n\nYou can use these individual functions to format the outline entry in\ndifferent ways. Let's say, you'd like to fully remove the filler and page\nnumbers. To achieve this, you could write a show rule like this:\n\n```example\n#show outline.entry: it => link(\n  it.element.location(),\n  // Keep just the body, dropping\n  // the fill and the page.\n  it.indented(it.prefix(), it.body()),\n)\n\n#outline()\n\n= About ACME Corp.\n== History\n```\n\n[^1]: The outline of equations is the exception to this rule as it does not\n      have a body and thus does not use indented layout."

[reference.model.outline.outline.entry.body.details]
en = "The content which is displayed in place of the referred element at its\nentry in the outline. For a heading, this is its\n[`body`]($heading.body); for a figure a caption and for equations, it is\nempty."

[reference.model.outline.outline.entry.body.oneliner]
en = "The content which is displayed in place of the referred element at its"

[reference.model.outline.outline.entry.body.title]
en = "Body"

[reference.model.outline.outline.entry.details]
en = "Represents an entry line in an outline.\n\nWith show-set and show rules on outline entries, you can richly customize\nthe outline's appearance. See the\n[section on styling the outline]($outline/#styling-the-outline) for details."

[reference.model.outline.outline.entry.element.details]
en = "The element this entry refers to. Its location will be available\nthrough the [`location`]($content.location) method on the content\nand can be [linked]($link) to."

[reference.model.outline.outline.entry.fill.details]
en = "Content to fill the space between the title and the page number. Can be\nset to `{none}` to disable filling.\n\nThe `fill` will be placed into a fractionally sized box that spans the\nspace between the entry's body and the page number. When using show\nrules to override outline entries, it is thus recommended to wrap the\nfill in a [`box`] with fractional width, i.e.\n`{box(width: 1fr, it.fill}`.\n\nWhen using [`repeat`], the [`gap`]($repeat.gap) property can be useful\nto tweak the visual weight of the fill.\n\n"

[reference.model.outline.outline.entry.indented.details]
en = "A helper function for producing an indented entry layout: Lays out a\nprefix and the rest of the entry in an indent-aware way.\n\nIf the parent outline's [`indent`]($outline.indent) is `{auto}`, the\ninner content of all entries at level `N` is aligned with the prefix of\nall entries at level `N + 1`, leaving at least `gap` space between the\nprefix and inner parts. Furthermore, the `inner` contents of all entries\nat the same level are aligned.\n\nIf the outline's indent is a fixed value or a function, the prefixes are\nindented, but the inner contents are simply inset from the prefix by the\nspecified `gap`, rather than aligning outline-wide."

[reference.model.outline.outline.entry.indented.gap.details]
en = "The gap between the prefix and the inner content."

[reference.model.outline.outline.entry.indented.inner.details]
en = "The formatted inner content of the entry.\n\nIn the default show rule, this is just `it.inner()`, but it can be\nfreely customized."

[reference.model.outline.outline.entry.indented.oneliner]
en = "A helper function for producing an indented entry layout: Lays out a"

[reference.model.outline.outline.entry.indented.prefix.details]
en = "The `prefix` is aligned with the `inner` content of entries that\nhave level one less.\n\nIn the default show rule, this is just `it.prefix()`, but it can be\nfreely customized."

[reference.model.outline.outline.entry.indented.title]
en = "Indented"

[reference.model.outline.outline.entry.inner.details]
en = "Creates the default inner content of the entry.\n\nThis includes the body, the fill, and page number."

[reference.model.outline.outline.entry.inner.oneliner]
en = "Creates the default inner content of the entry."

[reference.model.outline.outline.entry.inner.title]
en = "Inner"

[reference.model.outline.outline.entry.level.details]
en = "The nesting level of this outline entry. Starts at `{1}` for top-level\nentries."

[reference.model.outline.outline.entry.oneliner]
en = "Represents an entry line in an outline."

[reference.model.outline.outline.entry.page.details]
en = "The page number of this entry's element, formatted with the numbering\nset for the referenced page."

[reference.model.outline.outline.entry.page.oneliner]
en = "The page number of this entry's element, formatted with the numbering"

[reference.model.outline.outline.entry.page.title]
en = "Page"

[reference.model.outline.outline.entry.prefix.details]
en = "Formats the element's numbering (if any).\n\nThis also appends the element's supplement in case of figures or\nequations. For instance, it would output `1.1` for a heading, but\n`Figure 1` for a figure, as is usual for outlines."

[reference.model.outline.outline.entry.prefix.oneliner]
en = "Formats the element's numbering (if any)."

[reference.model.outline.outline.entry.prefix.title]
en = "Prefix"

[reference.model.outline.outline.entry.title]
en = "Outline Entry"

[reference.model.outline.outline.indent.details]
en = "How to indent the outline's entries.\n\n- `{auto}`: Indents the numbering/prefix of a nested entry with the\n  title of its parent entry. If the entries are not numbered (e.g., via\n  [heading numbering]($heading.numbering)), this instead simply inserts\n  a fixed amount of `{1.2em}` indent per level.\n\n- [Relative length]($relative): Indents the entry by the specified\n  length per nesting level. Specifying `{2em}`, for instance, would\n  indent top-level headings by `{0em}` (not nested), second level\n  headings by `{2em}` (nested once), third-level headings by `{4em}`\n  (nested twice) and so on.\n\n- [Function]($function): You can further customize this setting with a\n  function. That function receives the nesting level as a parameter\n  (starting at 0 for top-level headings/elements) and should return a\n  (relative) length. For example, `{n => n * 2em}` would be equivalent\n  to just specifying `{2em}`.\n\n"

[reference.model.outline.outline.oneliner]
en = "A table of contents, figures, or other elements."

[reference.model.outline.outline.target.details]
en = "The type of element to include in the outline.\n\nTo list figures containing a specific kind of element, like an image or\na table, you can specify the desired kind in a [`where`]($function.where)\nselector. See the section on [alternative outlines]($outline/#alternative-outlines)\nfor more details.\n\n"

[reference.model.outline.outline.title]
en = "Outline"

[reference.model.outline.outline.title.details]
en = "The title of the outline.\n\n- When set to `{auto}`, an appropriate title for the\n  [text language]($text.lang) will be used.\n- When set to `{none}`, the outline will not have a title.\n- A custom title can be set by passing content.\n\nThe outline's heading will not be numbered by default, but you can\nforce it to be with a show-set rule:\n`{show outline: set heading(numbering: \"1.\")}`"

[reference.model.outline.title]
en = "Outline"

[reference.model.par.description]
en = "Documentation for the `par` function."

[reference.model.par.oneliner]
en = "A logical subdivison of textual content."

[reference.model.par.par.body.details]
en = "The contents of the paragraph."

[reference.model.par.par.details]
en = "A logical subdivison of textual content.\n\nTypst automatically collects _inline-level_ elements into paragraphs.\nInline-level elements include [text], [horizontal spacing]($h),\n[boxes]($box), and [inline equations]($math.equation).\n\nTo separate paragraphs, use a blank line (or an explicit [`parbreak`]).\nParagraphs are also automatically interrupted by any block-level element\n(like [`block`], [`place`], or anything that shows itself as one of these).\n\nThe `par` element is primarily used in set rules to affect paragraph\nproperties, but it can also be used to explicitly display its argument as a\nparagraph of its own. Then, the paragraph's body may not contain any\nblock-level content.\n\n# Boxes and blocks\nAs explained above, usually paragraphs only contain inline-level content.\nHowever, you can integrate any kind of block-level content into a paragraph\nby wrapping it in a [`box`].\n\nConversely, you can separate inline-level content from a paragraph by\nwrapping it in a [`block`]. In this case, it will not become part of any\nparagraph at all. Read the following section for an explanation of why that\nmatters and how it differs from just adding paragraph breaks around the\ncontent.\n\n# What becomes a paragraph?\nWhen you add inline-level content to your document, Typst will automatically\nwrap it in paragraphs. However, a typical document also contains some text\nthat is not semantically part of a paragraph, for example in a heading or\ncaption.\n\nThe rules for when Typst wraps inline-level content in a paragraph are as\nfollows:\n\n- All text at the root of a document is wrapped in paragraphs.\n\n- Text in a container (like a `block`) is only wrapped in a paragraph if the\n  container holds any block-level content. If all of the contents are\n  inline-level, no paragraph is created.\n\nIn the laid-out document, it's not immediately visible whether text became\npart of a paragraph. However, it is still important for various reasons:\n\n- Certain paragraph styling like `first-line-indent` will only apply to\n  proper paragraphs, not any text. Similarly, `par` show rules of course\n  only trigger on paragraphs.\n\n- A proper distinction between paragraphs and other text helps people who\n  rely on assistive technologies (such as screen readers) navigate and\n  understand the document properly. Currently, this only applies to HTML\n  export since Typst does not yet output accessible PDFs, but support for\n  this is planned for the near future.\n\n- HTML export will generate a `<p>` tag only for paragraphs.\n\nWhen creating custom reusable components, you can and should take charge\nover whether Typst creates paragraphs. By wrapping text in a [`block`]\ninstead of just adding paragraph breaks around it, you can force the absence\nof a paragraph. Conversely, by adding a [`parbreak`] after some content in a\ncontainer, you can force it to become a paragraph even if it's just one\nword. This is, for example, what [non-`tight`]($list.tight) lists do to\nforce their items to become paragraphs.\n\n# Example\n```example\n#set par(\n  first-line-indent: 1em,\n  spacing: 0.65em,\n  justify: true,\n)\n\nWe proceed by contradiction.\nSuppose that there exists a set\nof positive integers $a$, $b$, and\n$c$ that satisfies the equation\n$a^n + b^n = c^n$ for some\ninteger value of $n > 2$.\n\nWithout loss of generality,\nlet $a$ be the smallest of the\nthree integers. Then, we ...\n```"

[reference.model.par.par.first-line-indent.details]
en = "The indent the first line of a paragraph should have.\n\nBy default, only the first line of a consecutive paragraph will be\nindented (not the first one in the document or container, and not\nparagraphs immediately following other block-level elements).\n\nIf you want to indent all paragraphs instead, you can pass a dictionary\ncontaining the `amount` of indent as a length and the pair\n`{all: true}`. When `all` is omitted from the dictionary, it defaults to\n`{false}`.\n\nBy typographic convention, paragraph breaks are indicated either by some\nspace between paragraphs or by indented first lines. Consider\n- reducing the [paragraph `spacing`]($par.spacing) to the\n  [`leading`]($par.leading) using `{set par(spacing: 0.65em)}`\n- increasing the [block `spacing`]($block.spacing) (which inherits the\n  paragraph spacing by default) to the original paragraph spacing using\n  `{set block(spacing: 1.2em)}`\n\n"

[reference.model.par.par.hanging-indent.details]
en = "The indent that all but the first line of a paragraph should have.\n\n"

[reference.model.par.par.justify.details]
en = "Whether to justify text in its line.\n\nHyphenation will be enabled for justified paragraphs if the\n[text function's `hyphenate` property]($text.hyphenate) is set to\n`{auto}` and the current language is known.\n\nNote that the current [alignment]($align.alignment) still has an effect\non the placement of the last line except if it ends with a\n[justified line break]($linebreak.justify)."

[reference.model.par.par.leading.details]
en = "The spacing between lines.\n\nLeading defines the spacing between the [bottom edge]($text.bottom-edge)\nof one line and the [top edge]($text.top-edge) of the following line. By\ndefault, these two properties are up to the font, but they can also be\nconfigured manually with a text set rule.\n\nBy setting top edge, bottom edge, and leading, you can also configure a\nconsistent baseline-to-baseline distance. You could, for instance, set\nthe leading to `{1em}`, the top-edge to `{0.8em}`, and the bottom-edge\nto `{-0.2em}` to get a baseline gap of exactly `{2em}`. The exact\ndistribution of the top- and bottom-edge values affects the bounds of\nthe first and last line."

[reference.model.par.par.line.details]
en = "A paragraph line.\n\nThis element is exclusively used for line number configuration through set\nrules and cannot be placed.\n\nThe [`numbering`]($par.line.numbering) option is used to enable line\nnumbers by specifying a numbering format.\n\n"

[reference.model.par.par.line.number-align.details]
en = "The alignment of line numbers associated with each line.\n\nThe default of `{auto}` indicates a smart default where numbers grow\nhorizontally away from the text, considering the margin they're in and\nthe current text direction.\n\n"

[reference.model.par.par.line.number-clearance.details]
en = "The distance between line numbers and text.\n\nThe default value of `{auto}` results in a clearance that is adaptive to\nthe page width and yields reasonable results in most cases.\n\n"

[reference.model.par.par.line.number-margin.details]
en = "The margin at which line numbers appear.\n\n_Note:_ In a multi-column document, the line numbers for paragraphs\ninside the last column will always appear on the `{end}` margin (right\nmargin for left-to-right text and left margin for right-to-left),\nregardless of this configuration. That behavior cannot be changed at\nthis moment.\n\n"

[reference.model.par.par.line.numbering-scope.details]
en = "Controls when to reset line numbering.\n\n_Note:_ The line numbering scope must be uniform across each page run (a\npage run is a sequence of pages without an explicit pagebreak in\nbetween). For this reason, set rules for it should be defined before any\npage content, typically at the very start of the document.\n\n"

[reference.model.par.par.line.numbering.details]
en = "How to number each line. Accepts a\n[numbering pattern or function]($numbering).\n\n"

[reference.model.par.par.line.oneliner]
en = "A paragraph line."

[reference.model.par.par.line.title]
en = "Paragraph Line"

[reference.model.par.par.linebreaks.details]
en = "How to determine line breaks.\n\nWhen this property is set to `{auto}`, its default value, optimized line\nbreaks will be used for justified paragraphs. Enabling optimized line\nbreaks for ragged paragraphs may also be worthwhile to improve the\nappearance of the text.\n\n"

[reference.model.par.par.oneliner]
en = "A logical subdivison of textual content."

[reference.model.par.par.spacing.details]
en = "The spacing between paragraphs.\n\nJust like leading, this defines the spacing between the bottom edge of a\nparagraph's last line and the top edge of the next paragraph's first\nline.\n\nWhen a paragraph is adjacent to a [`block`] that is not a paragraph,\nthat block's [`above`]($block.above) or [`below`]($block.below) property\ntakes precedence over the paragraph spacing. Headings, for instance,\nreduce the spacing below them by default for a better look."

[reference.model.par.par.title]
en = "Paragraph"

[reference.model.par.title]
en = "Paragraph"

[reference.model.parbreak.description]
en = "Documentation for the `parbreak` function."

[reference.model.parbreak.oneliner]
en = "A paragraph break."

[reference.model.parbreak.parbreak.details]
en = "A paragraph break.\n\nThis starts a new paragraph. Especially useful when used within code like\n[for loops]($scripting/#loops). Multiple consecutive\nparagraph breaks collapse into a single one.\n\n# Example\n```example\n#for i in range(3) {\n  [Blind text #i: ]\n  lorem(5)\n  parbreak()\n}\n```\n\n# Syntax\nInstead of calling this function, you can insert a blank line into your\nmarkup to create a paragraph break."

[reference.model.parbreak.parbreak.oneliner]
en = "A paragraph break."

[reference.model.parbreak.parbreak.title]
en = "Paragraph Break"

[reference.model.parbreak.title]
en = "Paragraph Break"

[reference.model.quote.description]
en = "Documentation for the `quote` function."

[reference.model.quote.oneliner]
en = "Displays a quote alongside an optional attribution."

[reference.model.quote.quote.attribution.details]
en = "The attribution of this quote, usually the author or source. Can be a\nlabel pointing to a bibliography entry or any content. By default only\ndisplayed for block quotes, but can be changed using a `{show}` rule.\n\n"

[reference.model.quote.quote.block.details]
en = "Whether this is a block quote.\n\n"

[reference.model.quote.quote.body.details]
en = "The quote."

[reference.model.quote.quote.details]
en = "Displays a quote alongside an optional attribution.\n\n# Example\n```example\nPlato is often misquoted as the author of #quote[I know that I know\nnothing], however, this is a derivation form his original quote:\n\n#set quote(block: true)\n\n#quote(attribution: [Plato])[\n  ... ἔοικα γοῦν τούτου γε σμικρῷ τινι αὐτῷ τούτῳ σοφώτερος εἶναι, ὅτι\n  ἃ μὴ οἶδα οὐδὲ οἴομαι εἰδέναι.\n]\n#quote(attribution: [from the Henry Cary literal translation of 1897])[\n  ... I seem, then, in just this little thing to be wiser than this man at\n  any rate, that what I do not know I do not think I know either.\n]\n```\n\nBy default block quotes are padded left and right by `{1em}`, alignment and\npadding can be controlled with show rules:\n```example\n#set quote(block: true)\n#show quote: set align(center)\n#show quote: set pad(x: 5em)\n\n#quote[\n  You cannot pass... I am a servant of the Secret Fire, wielder of the\n  flame of Anor. You cannot pass. The dark fire will not avail you,\n  flame of Udûn. Go back to the Shadow! You cannot pass.\n]\n```"

[reference.model.quote.quote.oneliner]
en = "Displays a quote alongside an optional attribution."

[reference.model.quote.quote.quotes.details]
en = "Whether double quotes should be added around this quote.\n\nThe double quotes used are inferred from the `quotes` property on\n[smartquote], which is affected by the `lang` property on [text].\n\n- `{true}`: Wrap this quote in double quotes.\n- `{false}`: Do not wrap this quote in double quotes.\n- `{auto}`: Infer whether to wrap this quote in double quotes based on\n  the `block` property. If `block` is `{false}`, double quotes are\n  automatically added.\n\n"

[reference.model.quote.quote.title]
en = "Quote"

[reference.model.quote.title]
en = "Quote"

[reference.model.ref.description]
en = "Documentation for the `ref` function."

[reference.model.ref.oneliner]
en = "A reference to a label or bibliography."

[reference.model.ref.ref.details]
en = "A reference to a label or bibliography.\n\nTakes a label and cross-references it. There are two kind of references,\ndetermined by its [`form`]($ref.form): `{\"normal\"}` and `{\"page\"}`.\n\nThe default, a `{\"normal\"}` reference, produces a textual reference to a\nlabel. For example, a reference to a heading will yield an appropriate\nstring such as \"Section 1\" for a reference to the first heading. The\nreferences are also links to the respective element. Reference syntax can\nalso be used to [cite] from a bibliography.\n\nAs the default form requires a supplement and numbering, the label must be\nattached to a _referenceable element_. Referenceable elements include\n[headings]($heading), [figures]($figure), [equations]($math.equation), and\n[footnotes]($footnote). To create a custom referenceable element like a\ntheorem, you can create a figure of a custom [`kind`]($figure.kind) and\nwrite a show rule for it. In the future, there might be a more direct way\nto define a custom referenceable element.\n\nIf you just want to link to a labelled element and not get an automatic\ntextual reference, consider using the [`link`] function instead.\n\nA `{\"page\"}` reference produces a page reference to a label, displaying the\npage number at its location. You can use the\n[page's supplement]($page.supplement) to modify the text before the page\nnumber. Unlike a `{\"normal\"}` reference, the label can be attached to any\nelement.\n\n# Example\n```example\n#set page(numbering: \"1\")\n#set heading(numbering: \"1.\")\n#set math.equation(numbering: \"(1)\")\n\n= Introduction <intro>\nRecent developments in\ntypesetting software have\nrekindled hope in previously\nfrustrated researchers. @distress\nAs shown in @results (see\n#ref(<results>, form: \"page\")),\nwe ...\n\n= Results <results>\nWe discuss our approach in\ncomparison with others.\n\n== Performance <perf>\n@slow demonstrates what slow\nsoftware looks like.\n$ T(n) = O(2^n) $ <slow>\n\n#bibliography(\"works.bib\")\n```\n\n# Syntax\nThis function also has dedicated syntax: A `{\"normal\"}` reference to a\nlabel can be created by typing an `@` followed by the name of the label\n(e.g. `[= Introduction <intro>]` can be referenced by typing `[@intro]`).\n\nTo customize the supplement, add content in square brackets after the\nreference: `[@intro[Chapter]]`.\n\n# Customization\nIf you write a show rule for references, you can access the referenced\nelement through the `element` field of the reference. The `element` may\nbe `{none}` even if it exists if Typst hasn't discovered it yet, so you\nalways need to handle that case in your code.\n\n```example\n#set heading(numbering: \"1.\")\n#set math.equation(numbering: \"(1)\")\n\n#show ref: it => {\n  let eq = math.equation\n  let el = it.element\n  if el != none and el.func() == eq {\n    // Override equation references.\n    link(el.location(),numbering(\n      el.numbering,\n      ..counter(eq).at(el.location())\n    ))\n  } else {\n    // Other references as usual.\n    it\n  }\n}\n\n= Beginnings <beginning>\nIn @beginning we prove @pythagoras.\n$ a^2 + b^2 = c^2 $ <pythagoras>\n```"

[reference.model.ref.ref.form.details]
en = "The kind of reference to produce.\n\n"

[reference.model.ref.ref.oneliner]
en = "A reference to a label or bibliography."

[reference.model.ref.ref.supplement.details]
en = "A supplement for the reference.\n\nIf the [`form`]($ref.form) is set to `{\"normal\"}`:\n- For references to headings or figures, this is added before the\n  referenced number.\n- For citations, this can be used to add a page number.\n\nIf the [`form`]($ref.form) is set to `{\"page\"}`, then this is added\nbefore the page number of the label referenced.\n\nIf a function is specified, it is passed the referenced element and\nshould return content.\n\n"

[reference.model.ref.ref.target.details]
en = "The target label that should be referenced.\n\nCan be a label that is defined in the document or, if the\n[`form`]($ref.form) is set to `[\"normal\"]`, an entry from the\n[`bibliography`]."

[reference.model.ref.ref.title]
en = "Reference"

[reference.model.ref.title]
en = "Reference"

[reference.model.strong.description]
en = "Documentation for the `strong` function."

[reference.model.strong.oneliner]
en = "Strongly emphasizes content by increasing the font weight."

[reference.model.strong.strong.body.details]
en = "The content to strongly emphasize."

[reference.model.strong.strong.delta.details]
en = "The delta to apply on the font weight.\n\n"

[reference.model.strong.strong.details]
en = "Strongly emphasizes content by increasing the font weight.\n\nIncreases the current font weight by a given `delta`.\n\n# Example\n```example\nThis is *strong.* \\\nThis is #strong[too.] \\\n\n#show strong: set text(red)\nAnd this is *evermore.*\n```\n\n# Syntax\nThis function also has dedicated syntax: To strongly emphasize content,\nsimply enclose it in stars/asterisks (`*`). Note that this only works at\nword boundaries. To strongly emphasize part of a word, you have to use the\nfunction."

[reference.model.strong.strong.oneliner]
en = "Strongly emphasizes content by increasing the font weight."

[reference.model.strong.strong.title]
en = "Strong Emphasis"

[reference.model.strong.title]
en = "Strong Emphasis"

[reference.model.table.description]
en = "Documentation for the `table` function."

[reference.model.table.oneliner]
en = "A table of items."

[reference.model.table.table.align.details]
en = "How to align the cells' content.\n\nThis can either be a single alignment, an array of alignments\n(corresponding to each column) or a function that returns an alignment.\nThe function receives the cells' column and row indices, starting from\nzero. If set to `{auto}`, the outer alignment is used.\n\n"

[reference.model.table.table.cell.align.details]
en = "The cell's [alignment]($table.align) override."

[reference.model.table.table.cell.body.details]
en = "The cell's body."

[reference.model.table.table.cell.breakable.details]
en = "Whether rows spanned by this cell can be placed in different pages.\nWhen equal to `{auto}`, a cell spanning only fixed-size rows is\nunbreakable, while a cell spanning at least one `{auto}`-sized row is\nbreakable."

[reference.model.table.table.cell.colspan.details]
en = "The amount of columns spanned by this cell."

[reference.model.table.table.cell.details]
en = "A cell in the table. Use this to position a cell manually or to apply\nstyling. To do the latter, you can either use the function to override the\nproperties for a particular cell, or use it in show rules to apply certain\nstyles to multiple cells at once.\n\nPerhaps the most important use case of `{table.cell}` is to make a cell span\nmultiple columns and/or rows with the `colspan` and `rowspan` fields.\n\n"

[reference.model.table.table.cell.fill.details]
en = "The cell's [fill]($table.fill) override."

[reference.model.table.table.cell.inset.details]
en = "The cell's [inset]($table.inset) override."

[reference.model.table.table.cell.oneliner]
en = "A cell in the table. Use this to position a cell manually or to apply"

[reference.model.table.table.cell.rowspan.details]
en = "The amount of rows spanned by this cell."

[reference.model.table.table.cell.stroke.details]
en = "The cell's [stroke]($table.stroke) override."

[reference.model.table.table.cell.title]
en = "Table Cell"

[reference.model.table.table.cell.x.details]
en = "The cell's column (zero-indexed).\nFunctions identically to the `x` field in [`grid.cell`]($grid.cell)."

[reference.model.table.table.cell.y.details]
en = "The cell's row (zero-indexed).\nFunctions identically to the `y` field in [`grid.cell`]($grid.cell)."

[reference.model.table.table.children.details]
en = "The contents of the table cells, plus any extra table lines specified\nwith the [`table.hline`]($table.hline) and\n[`table.vline`]($table.vline) elements."

[reference.model.table.table.column-gutter.details]
en = "The gaps between columns. Takes precedence over `gutter`. See the\n[grid documentation]($grid) for more information on gutters."

[reference.model.table.table.columns.details]
en = "The column sizes. See the [grid documentation]($grid) for more\ninformation on track sizing."

[reference.model.table.table.details]
en = "A table of items.\n\nTables are used to arrange content in cells. Cells can contain arbitrary\ncontent, including multiple paragraphs and are specified in row-major order.\nFor a hands-on explanation of all the ways you can use and customize tables\nin Typst, check out the [table guide]($guides/table-guide).\n\nBecause tables are just grids with different defaults for some cell\nproperties (notably `stroke` and `inset`), refer to the [grid\ndocumentation]($grid) for more information on how to size the table tracks\nand specify the cell appearance properties.\n\nIf you are unsure whether you should be using a table or a grid, consider\nwhether the content you are arranging semantically belongs together as a set\nof related data points or similar or whether you are just want to enhance\nyour presentation by arranging unrelated content in a grid. In the former\ncase, a table is the right choice, while in the latter case, a grid is more\nappropriate. Furthermore, Typst will annotate its output in the future such\nthat screenreaders will announce content in `table` as tabular while a\ngrid's content will be announced no different than multiple content blocks\nin the document flow.\n\nNote that, to override a particular cell's properties or apply show rules on\ntable cells, you can use the [`table.cell`]($table.cell) element. See its\ndocumentation for more information.\n\nAlthough the `table` and the `grid` share most properties, set and show\nrules on one of them do not affect the other.\n\nTo give a table a caption and make it [referenceable]($ref), put it into a\n[figure].\n\n# Example\n\nThe example below demonstrates some of the most common table options.\n```example\n#table(\n  columns: (1fr, auto, auto),\n  inset: 10pt,\n  align: horizon,\n  table.header(\n    [], [*Volume*], [*Parameters*],\n  ),\n  image(\"cylinder.svg\"),\n  $ pi h (D^2 - d^2) / 4 $,\n  [\n    $h$: height \\\n    $D$: outer radius \\\n    $d$: inner radius\n  ],\n  image(\"tetrahedron.svg\"),\n  $ sqrt(2) / 12 a^3 $,\n  [$a$: edge length]\n)\n```\n\nMuch like with grids, you can use [`table.cell`]($table.cell) to customize\nthe appearance and the position of each cell.\n\n```example\n>>> #set page(width: auto)\n>>> #set text(font: \"IBM Plex Sans\")\n>>> #let gray = rgb(\"#565565\")\n>>>\n#set table(\n  stroke: none,\n  gutter: 0.2em,\n  fill: (x, y) =>\n    if x == 0 or y == 0 { gray },\n  inset: (right: 1.5em),\n)\n\n#show table.cell: it => {\n  if it.x == 0 or it.y == 0 {\n    set text(white)\n    strong(it)\n  } else if it.body == [] {\n    // Replace empty cells with 'N/A'\n    pad(..it.inset)[_N/A_]\n  } else {\n    it\n  }\n}\n\n#let a = table.cell(\n  fill: green.lighten(60%),\n)[A]\n#let b = table.cell(\n  fill: aqua.lighten(60%),\n)[B]\n\n#table(\n  columns: 4,\n  [], [Exam 1], [Exam 2], [Exam 3],\n\n  [John], [], a, [],\n  [Mary], [], a, a,\n  [Robert], b, a, b,\n)\n```"

[reference.model.table.table.fill.details]
en = "How to fill the cells.\n\nThis can be a color or a function that returns a color. The function\nreceives the cells' column and row indices, starting from zero. This can\nbe used to implement striped tables.\n\n"

[reference.model.table.table.footer.children.details]
en = "The cells and lines within the footer."

[reference.model.table.table.footer.details]
en = "A repeatable table footer.\n\nJust like the [`table.header`]($table.header) element, the footer can repeat\nitself on every page of the table. This is useful for improving legibility\nby adding the column labels in both the header and footer of a large table,\ntotals, or other information that should be visible on every page.\n\nNo other table cells may be placed after the footer."

[reference.model.table.table.footer.oneliner]
en = "A repeatable table footer."

[reference.model.table.table.footer.repeat.details]
en = "Whether this footer should be repeated across pages."

[reference.model.table.table.footer.title]
en = "Table Footer"

[reference.model.table.table.gutter.details]
en = "The gaps between rows and columns. This is a shorthand for setting\n`column-gutter` and `row-gutter` to the same value. See the [grid\ndocumentation]($grid) for more information on gutters."

[reference.model.table.table.header.children.details]
en = "The cells and lines within the header."

[reference.model.table.table.header.details]
en = "A repeatable table header.\n\nYou should wrap your tables' heading rows in this function even if you do not\nplan to wrap your table across pages because Typst will use this function to\nattach accessibility metadata to tables in the future and ensure universal\naccess to your document.\n\nYou can use the `repeat` parameter to control whether your table's header\nwill be repeated across pages.\n\n"

[reference.model.table.table.header.oneliner]
en = "A repeatable table header."

[reference.model.table.table.header.repeat.details]
en = "Whether this header should be repeated across pages."

[reference.model.table.table.header.title]
en = "Table Header"

[reference.model.table.table.hline.details]
en = "A horizontal line in the table.\n\nOverrides any per-cell stroke, including stroke specified through the\ntable's `stroke` field. Can cross spacing between cells created through the\ntable's [`column-gutter`]($table.column-gutter) option.\n\nUse this function instead of the table's `stroke` field if you want to\nmanually place a horizontal line at a specific position in a single table.\nConsider using [table's `stroke`]($table.stroke) field or [`table.cell`'s\n`stroke`]($table.cell.stroke) field instead if the line you want to place is\npart of all your tables' designs.\n\n"

[reference.model.table.table.hline.end.details]
en = "The column before which the horizontal line ends (zero-indexed,\nexclusive)."

[reference.model.table.table.hline.oneliner]
en = "A horizontal line in the table."

[reference.model.table.table.hline.position.details]
en = "The position at which the line is placed, given its row (`y`) - either\n`{top}` to draw above it or `{bottom}` to draw below it.\n\nThis setting is only relevant when row gutter is enabled (and\nshouldn't be used otherwise - prefer just increasing the `y` field by\none instead), since then the position below a row becomes different\nfrom the position above the next row due to the spacing between both."

[reference.model.table.table.hline.start.details]
en = "The column at which the horizontal line starts (zero-indexed, inclusive)."

[reference.model.table.table.hline.stroke.details]
en = "The line's stroke.\n\nSpecifying `{none}` removes any lines previously placed across this\nline's range, including hlines or per-cell stroke below it."

[reference.model.table.table.hline.title]
en = "Table Horizontal Line"

[reference.model.table.table.hline.y.details]
en = "The row above which the horizontal line is placed (zero-indexed).\nFunctions identically to the `y` field in [`grid.hline`]($grid.hline.y)."

[reference.model.table.table.inset.details]
en = "How much to pad the cells' content.\n\n"

[reference.model.table.table.oneliner]
en = "A table of items."

[reference.model.table.table.row-gutter.details]
en = "The gaps between rows. Takes precedence over `gutter`. See the\n[grid documentation]($grid) for more information on gutters."

[reference.model.table.table.rows.details]
en = "The row sizes. See the [grid documentation]($grid) for more information\non track sizing."

[reference.model.table.table.stroke.details]
en = "How to [stroke] the cells.\n\nStrokes can be disabled by setting this to `{none}`.\n\nIf it is necessary to place lines which can cross spacing between cells\nproduced by the `gutter` option, or to override the stroke between\nmultiple specific cells, consider specifying one or more of\n[`table.hline`]($table.hline) and [`table.vline`]($table.vline)\nalongside your table cells.\n\nSee the [grid documentation]($grid.stroke) for more information on\nstrokes."

[reference.model.table.table.title]
en = "Table"

[reference.model.table.table.vline.details]
en = "A vertical line in the table. See the docs for [`grid.vline`]($grid.vline)\nfor more information regarding how to use this element's fields.\n\nOverrides any per-cell stroke, including stroke specified through the\ntable's `stroke` field. Can cross spacing between cells created through the\ntable's [`row-gutter`]($table.row-gutter) option.\n\nSimilar to [`table.hline`]($table.hline), use this function if you want to\nmanually place a vertical line at a specific position in a single table and\nuse the [table's `stroke`]($table.stroke) field or [`table.cell`'s\n`stroke`]($table.cell.stroke) field instead if the line you want to place is\npart of all your tables' designs."

[reference.model.table.table.vline.end.details]
en = "The row on top of which the vertical line ends (zero-indexed,\nexclusive)."

[reference.model.table.table.vline.oneliner]
en = "A vertical line in the table. See the docs for [`grid.vline`]($grid.vline)"

[reference.model.table.table.vline.position.details]
en = "The position at which the line is placed, given its column (`x`) -\neither `{start}` to draw before it or `{end}` to draw after it.\n\nThe values `{left}` and `{right}` are also accepted, but discouraged as\nthey cause your table to be inconsistent between left-to-right and\nright-to-left documents.\n\nThis setting is only relevant when column gutter is enabled (and\nshouldn't be used otherwise - prefer just increasing the `x` field by\none instead), since then the position after a column becomes different\nfrom the position before the next column due to the spacing between\nboth."

[reference.model.table.table.vline.start.details]
en = "The row at which the vertical line starts (zero-indexed, inclusive)."

[reference.model.table.table.vline.stroke.details]
en = "The line's stroke.\n\nSpecifying `{none}` removes any lines previously placed across this\nline's range, including vlines or per-cell stroke below it."

[reference.model.table.table.vline.title]
en = "Table Vertical Line"

[reference.model.table.table.vline.x.details]
en = "The column before which the horizontal line is placed (zero-indexed).\nFunctions identically to the `x` field in [`grid.vline`]($grid.vline)."

[reference.model.table.title]
en = "Table"

[reference.model.terms.description]
en = "Documentation for the `terms` function."

[reference.model.terms.oneliner]
en = "A list of terms and their descriptions."

[reference.model.terms.terms.children.details]
en = "The term list's children.\n\nWhen using the term list syntax, adjacent items are automatically\ncollected into term lists, even through constructs like for loops.\n\n"

[reference.model.terms.terms.details]
en = "A list of terms and their descriptions.\n\nDisplays a sequence of terms and their descriptions vertically. When the\ndescriptions span over multiple lines, they use hanging indent to\ncommunicate the visual hierarchy.\n\n# Example\n```example\n/ Ligature: A merged glyph.\n/ Kerning: A spacing adjustment\n  between two adjacent letters.\n```\n\n# Syntax\nThis function also has dedicated syntax: Starting a line with a slash,\nfollowed by a term, a colon and a description creates a term list item."

[reference.model.terms.terms.hanging-indent.details]
en = "The hanging indent of the description.\n\nThis is in addition to the whole item's `indent`.\n\n"

[reference.model.terms.terms.indent.details]
en = "The indentation of each item."

[reference.model.terms.terms.item.description.details]
en = "The description of the term."

[reference.model.terms.terms.item.details]
en = "A term list item."

[reference.model.terms.terms.item.oneliner]
en = "A term list item."

[reference.model.terms.terms.item.term.details]
en = "The term described by the list item."

[reference.model.terms.terms.item.title]
en = "Term List Item"

[reference.model.terms.terms.oneliner]
en = "A list of terms and their descriptions."

[reference.model.terms.terms.separator.details]
en = "The separator between the item and the description.\n\nIf you want to just separate them with a certain amount of space, use\n`{h(2cm, weak: true)}` as the separator and replace `{2cm}` with your\ndesired amount of space.\n\n"

[reference.model.terms.terms.spacing.details]
en = "The spacing between the items of the term list.\n\nIf set to `{auto}`, uses paragraph [`leading`]($par.leading) for tight\nterm lists and paragraph [`spacing`]($par.spacing) for wide\n(non-tight) term lists."

[reference.model.terms.terms.tight.details]
en = "Defines the default [spacing]($terms.spacing) of the term list. If it is\n`{false}`, the items are spaced apart with\n[paragraph spacing]($par.spacing). If it is `{true}`, they use\n[paragraph leading]($par.leading) instead. This makes the list more\ncompact, which can look better if the items are short.\n\nIn markup mode, the value of this parameter is determined based on\nwhether items are separated with a blank line. If items directly follow\neach other, this is set to `{true}`; if items are separated by a blank\nline, this is set to `{false}`. The markup-defined tightness cannot be\noverridden with set rules.\n\n"

[reference.model.terms.terms.title]
en = "Term List"

[reference.model.terms.title]
en = "Term List"

[reference.model.title]
en = "Model"

[reference.pdf.description]
en = "Documentation for functions related to PDF in Typst."

[reference.pdf.embed.description]
en = "Documentation for the `embed` function."

[reference.pdf.embed.embed.data.details]
en = "Raw file data, optionally.\n\nIf omitted, the data is read from the specified path."

[reference.pdf.embed.embed.description.details]
en = "A description for the embedded file."

[reference.pdf.embed.embed.details]
en = "A file that will be embedded into the output PDF.\n\nThis can be used to distribute additional files that are related to the PDF\nwithin it. PDF readers will display the files in a file listing.\n\nSome international standards use this mechanism to embed machine-readable\ndata (e.g., ZUGFeRD/Factur-X for invoices) that mirrors the visual content\nof the PDF.\n\n# Example\n```typ\n#pdf.embed(\n  \"experiment.csv\",\n  relationship: \"supplement\",\n  mime-type: \"text/csv\",\n  description: \"Raw Oxygen readings from the Arctic experiment\",\n)\n```\n\n# Notes\n- This element is ignored if exporting to a format other than PDF.\n- File embeddings are not currently supported for PDF/A-2, even if the\n  embedded file conforms to PDF/A-1 or PDF/A-2."

[reference.pdf.embed.embed.mime-type.details]
en = "The MIME type of the embedded file."

[reference.pdf.embed.embed.oneliner]
en = "A file that will be embedded into the output PDF."

[reference.pdf.embed.embed.path.details]
en = "The [path]($syntax/#paths) of the file to be embedded.\n\nMust always be specified, but is only read from if no data is provided\nin the following argument."

[reference.pdf.embed.embed.relationship.details]
en = "The relationship of the embedded file to the document.\n\nIgnored if export doesn't target PDF/A-3."

[reference.pdf.embed.embed.title]
en = "Embed"

[reference.pdf.embed.oneliner]
en = "A file that will be embedded into the output PDF."

[reference.pdf.embed.title]
en = "Embed"

[reference.pdf.pdf.details]
en = "PDF files focus on accurately describing documents visually, but also have\nfacilities for annotating their structure. This hybrid approach makes\nthem a good fit for document exchange: They render exactly the same on every\ndevice, but also support extraction of a document's content and structure (at\nleast to an extent). Unlike PNG files, PDFs are not bound to a specific\nresolution. Hence, you can view them at any size without incurring a loss of\nquality.\n\n# PDF standards\nThe International Standards Organization (ISO) has published the base PDF\nstandard and various standards that extend it to make PDFs more suitable for\nspecific use-cases. By default, Typst exports PDF 1.7 files. Adobe Acrobat 8 and\nlater as well as all other commonly used PDF viewers are compatible with this\nPDF version.\n\n## PDF/A\nTypst optionally supports emitting PDF/A-conformant files. PDF/A files are\ngeared towards maximum compatibility with current and future PDF tooling. They\ndo not rely on difficult-to-implement or proprietary features and contain\nexhaustive metadata. This makes them suitable for long-term archival.\n\nThe PDF/A Standard has multiple versions (_parts_ in ISO terminology) and most\nparts have multiple profiles that indicate the file's conformance level.\nCurrently, Typst supports these PDF/A output profiles:\n\n- PDF/A-2b: The basic conformance level of ISO 19005-2. This version of PDF/A is\n  based on PDF 1.7 and results in self-contained, archivable PDF files.\n\n- PDF/A-3b: The basic conformance level of ISO 19005-3. This version of PDF/A is\n  based on PDF 1.7 and results in archivable PDF files that can contain\n  arbitrary other related files as [attachments]($pdf.embed). The only\n  difference between it and PDF/A-2b is the capability to embed\n  non-PDF/A-conformant files within.\n\nWhen choosing between exporting PDF/A and regular PDF, keep in mind that PDF/A\nfiles contain additional metadata, and that some readers will prevent the user\nfrom modifying a PDF/A file. Some features of Typst may be disabled depending on\nthe PDF standard you choose.\n\n# Exporting as PDF\n## Command Line\nPDF is Typst's default export format. Running the `compile` or `watch`\nsubcommand without specifying a format will create a PDF. When exporting to PDF,\nyou have the following configuration options:\n\n- Which PDF standards Typst should enforce conformance with by specifying\n  `--pdf-standard` followed by one or multiple comma-separated standards. Valid\n  standards are `1.7`, `a-2b`, and `a-3b`. By default, Typst outputs\n  PDF-1.7-compliant files.\n\n- Which pages to export by specifying `--pages` followed by a comma-separated\n  list of numbers or dash-separated number ranges. Ranges can be half-open.\n  Example: `2,3,7-9,11-`.\n\n## Web App\nClick the quick download button at the top right to export a PDF with default\nsettings. For further configuration, click \"File\" > \"Export as\" > \"PDF\" or click\nthe downwards-facing arrow next to the quick download button and select \"Export\nas PDF\". When exporting to PDF, you have the following configuration options:\n\n- Which PDF standards Typst should enforce conformance with. By default, Typst\n  outputs PDF-1.7-compliant files. Valid additional standards are `A-2b` and\n  `A-3b`.\n\n- Which pages to export. Valid options are \"All pages\", \"Current page\", and\n  \"Custom ranges\". Custom ranges are a comma-separated list of numbers or\n  dash-separated number ranges. Ranges can be half-open. Example: `2,3,7-9,11-`.\n\n# PDF-specific functionality\nTypst exposes PDF-specific functionality in the global `pdf` module. See below\nfor the definitions it contains.\n"

[reference.pdf.pdf.title]
en = "PDF"

[reference.pdf.title]
en = "PDF"

[reference.png.description]
en = "Documentation for functions related to PNG in Typst."

[reference.png.png.details]
en = "Instead of creating a PDF, Typst can also directly render pages to PNG raster\ngraphics. PNGs are losslessly compressed images that can contain one page at a\ntime. When exporting a multi-page document, Typst will emit multiple PNGs. PNGs\nare a good choice when you want to use Typst's output in an image editing\nsoftware or when you can use none of Typst's other export formats.\n\nIn contrast to Typst's other export formats, PNGs are bound to a specific\nresolution. When exporting to PNG, you can configure the resolution as pixels\nper inch (PPI). If the medium you view the PNG on has a finer resolution than\nthe PNG you exported, you will notice a loss of quality. Typst calculates the\nresolution of your PNGs based on each page's physical dimensions and the PPI. If\nyou need guidance for choosing a PPI value, consider the following:\n\n- A value of 300 or 600 is typical for desktop printing.\n- Professional prints of detailed graphics can go up to 1200 PPI.\n- If your document is only viewed at a distance, e.g. a poster, you may choose a\n  smaller value than 300.\n- If your document is viewed on screens, a typical PPI value for a smartphone is\n  400-500.\n\nBecause PNGs only contain a pixel raster, the text within cannot be extracted\nautomatically (without OCR), for example by copy/paste or a screen reader. If\nyou need the text to be accessible, export a PDF or HTML file instead.\n\nPNGs can have transparent backgrounds. By default, Typst will output a PNG with\nan opaque white background. You can make the background transparent using\n`[#set page(fill: none)]`. Learn more on the\n[`page` function's reference page]($page.fill).\n\n# Exporting as PNG\n## Command Line\nPass `--format png` to the `compile` or `watch` subcommand or provide an output\nfile name that ends with `.png`.\n\nIf your document has more than one page, Typst will create multiple image files.\nThe output file name must then be a template string containing at least one of\n- `[{p}]`, which will be replaced by the page number\n- `[{0p}]`, which will be replaced by the zero-padded page number (so that all\n  numbers have the same length)\n- `[{t}]`, which will be replaced by the total number of pages\n\nWhen exporting to PNG, you have the following configuration options:\n\n- Which resolution to render at by specifying `--ppi` followed by a number of\n  pixels per inch. The default is `144`.\n\n- Which pages to export by specifying `--pages` followed by a comma-separated\n  list of numbers or dash-separated number ranges. Ranges can be half-open.\n  Example: `2,3,7-9,11-`.\n\n## Web App\nClick \"File\" > \"Export as\" > \"PNG\" or click the downwards-facing arrow next to\nthe quick download button and select \"Export as PNG\". When exporting to PNG, you\nhave the following configuration options:\n\n- The resolution at which the pages should be rendered, as a number of pixels\n  per inch. The default is `144`.\n\n- Which pages to export. Valid options are \"All pages\", \"Current page\", and\n  \"Custom ranges\". Custom ranges are a comma-separated list of numbers or\n  dash-separated number ranges. Ranges can be half-open. Example: `2,3,7-9,11-`.\n"

[reference.png.png.title]
en = "PNG"

[reference.png.title]
en = "PNG"

[reference.scripting.body]
en = "\n# Scripting\nTypst embeds a powerful scripting language. You can automate your documents and\ncreate more sophisticated styles with code. Below is an overview over the\nscripting concepts.\n\n## Expressions\nIn Typst, markup and code are fused into one. All but the most common elements\nare created with _functions._ To make this as convenient as possible, Typst\nprovides compact syntax to embed a code expression into markup: An expression is\nintroduced with a hash (`#`) and normal markup parsing resumes after the\nexpression is finished. If a character would continue the expression but should\nbe interpreted as text, the expression can forcibly be ended with a semicolon\n(`;`).\n\n```example\n#emph[Hello] \\\n#emoji.face \\\n#\"hello\".len()\n```\n\nThe example above shows a few of the available expressions, including\n[function calls]($function), [field accesses]($scripting/#fields), and\n[method calls]($scripting/#methods). More kinds of expressions are\ndiscussed in the remainder of this chapter. A few kinds of expressions are not\ncompatible with the hash syntax (e.g. binary operator expressions). To embed\nthese into markup, you can use parentheses, as in `[#(1 + 2)]`.\n\n## Blocks\nTo structure your code and embed markup into it, Typst provides two kinds of\n_blocks:_\n\n- **Code block:** `{{ let x = 1; x + 2 }}` \\\n  When writing code, you'll probably want to split up your computation into\n  multiple statements, create some intermediate variables and so on. Code blocks\n  let you write multiple expressions where one is expected. The individual\n  expressions in a code block should be separated by line breaks or semicolons.\n  The output values of the individual expressions in a code block are joined to\n  determine the block's value. Expressions without useful output, like `{let}`\n  bindings yield `{none}`, which can be joined with any value without effect.\n\n- **Content block:** `{[*Hey* there!]}` \\\n  With content blocks, you can handle markup/content as a programmatic value,\n  store it in variables and pass it to [functions]($function). Content\n  blocks are delimited by square brackets and can contain arbitrary markup. A\n  content block results in a value of type [content]. An arbitrary number of\n  content blocks can be passed as trailing arguments to functions. That is,\n  `{list([A], [B])}` is equivalent to `{list[A][B]}`.\n\nContent and code blocks can be nested arbitrarily. In the example below,\n`{[hello ]}` is joined with the output of  `{a + [ the ] + b}` yielding\n`{[hello from the *world*]}`.\n\n```example\n#{\n  let a = [from]\n  let b = [*world*]\n  [hello ]\n  a + [ the ] + b\n}\n```\n\n## Bindings and Destructuring { #bindings }\nAs already demonstrated above, variables can be defined with `{let}` bindings.\nThe variable is assigned the value of the expression that follows the `=` sign.\nThe assignment of a value is optional, if no value is assigned, the variable\nwill be initialized as `{none}`. The `{let}` keyword can also be used to create\na [custom named function]($function/#defining-functions). Variables can be\naccessed for the rest of the containing block (or the rest of the file if there\nis no containing block).\n\n```example\n#let name = \"Typst\"\nThis is #name's documentation.\nIt explains #name.\n\n#let add(x, y) = x + y\nSum is #add(2, 3).\n```\n\nLet bindings can also be used to destructure [arrays]($array) and\n[dictionaries]($dictionary). In this case, the left-hand side of the\nassignment should mirror an array or dictionary. The `..` operator can be used\nonce in the pattern to collect the remainder of the array's or dictionary's\nitems.\n\n```example\n#let (x, y) = (1, 2)\nThe coordinates are #x, #y.\n\n#let (a, .., b) = (1, 2, 3, 4)\nThe first element is #a.\nThe last element is #b.\n\n#let books = (\n  Shakespeare: \"Hamlet\",\n  Homer: \"The Odyssey\",\n  Austen: \"Persuasion\",\n)\n\n#let (Austen,) = books\nAusten wrote #Austen.\n\n#let (Homer: h) = books\nHomer wrote #h.\n\n#let (Homer, ..other) = books\n#for (author, title) in other [\n  #author wrote #title.\n]\n```\n\nYou can use the underscore to discard elements in a destructuring pattern:\n\n```example\n#let (_, y, _) = (1, 2, 3)\nThe y coordinate is #y.\n```\n\nDestructuring also works in argument lists of functions ...\n\n```example\n#let left = (2, 4, 5)\n#let right = (3, 2, 6)\n#left.zip(right).map(\n  ((a,b)) => a + b\n)\n```\n\n... and on the left-hand side of normal assignments. This can be useful to\nswap variables among other things.\n\n```example\n#{\n  let a = 1\n  let b = 2\n  (a, b) = (b, a)\n  [a = #a, b = #b]\n}\n```\n\n## Conditionals\nWith a conditional, you can display or compute different things depending on\nwhether some condition is fulfilled. Typst supports `{if}`, `{else if}` and\n`{else}` expressions. When the condition evaluates to `{true}`, the conditional\nyields the value resulting from the if's body, otherwise yields the value\nresulting from the else's body.\n\n```example\n#if 1 < 2 [\n  This is shown\n] else [\n  This is not.\n]\n```\n\nEach branch can have a code or content block as its body.\n\n- `{if condition {..}}`\n- `{if condition [..]}`\n- `{if condition [..] else {..}}`\n- `{if condition [..] else if condition {..} else [..]}`\n\n## Loops\nWith loops, you can repeat content or compute something iteratively. Typst\nsupports two types of loops: `{for}` and `{while}` loops. The former iterate\nover a specified collection whereas the latter iterate as long as a condition\nstays fulfilled. Just like blocks, loops _join_ the results from each iteration\ninto one value.\n\nIn the example below, the three sentences created by the for loop join together\ninto a single content value and the length-1 arrays in the while loop join\ntogether into one larger array.\n\n```example\n#for c in \"ABC\" [\n  #c is a letter.\n]\n\n#let n = 2\n#while n < 10 {\n  n = (n * 2) - 1\n  (n,)\n}\n```\n\nFor loops can iterate over a variety of collections:\n\n- `{for value in array {..}}` \\\n  Iterates over the items in the [array]. The destructuring syntax described in\n  [Let binding]($scripting/#bindings) can also be used here.\n\n- `{for pair in dict {..}}` \\\n  Iterates over the key-value pairs of the [dictionary]. The pairs can also be\n  destructured by using `{for (key, value) in dict {..}}`. It is more efficient\n  than `{for pair in dict.pairs() {..}}` because it doesn't create a temporary\n  array of all key-value pairs.\n\n- `{for letter in \"abc\" {..}}` \\\n  Iterates over the characters of the [string]($str). Technically, it iterates\n  over the grapheme clusters of the string. Most of the time, a grapheme cluster\n  is just a single codepoint. However, a grapheme cluster could contain multiple\n  codepoints, like a flag emoji.\n\n- `{for byte in bytes(\"😀\") {..}}` \\\n  Iterates over the [bytes], which can be converted from a [string]($str) or\n  [read] from a file without encoding. Each byte value is an [integer]($int)\n  between `{0}` and `{255}`.\n\nTo control the execution of the loop, Typst provides the `{break}` and\n`{continue}` statements. The former performs an early exit from the loop while\nthe latter skips ahead to the next iteration of the loop.\n\n```example\n#for letter in \"abc nope\" {\n  if letter == \" \" {\n    break\n  }\n\n  letter\n}\n```\n\nThe body of a loop can be a code or content block:\n\n- `{for .. in collection {..}}`\n- `{for .. in collection [..]}`\n- `{while condition {..}}`\n- `{while condition [..]}`\n\n## Fields\nYou can use _dot notation_ to access fields on a value. For values of type\n[`content`], you can also use the [`fields`]($content.fields) function to list\nthe fields.\n\nThe value in question can be either:\n- a [dictionary] that has the specified key,\n- a [symbol] that has the specified modifier,\n- a [module] containing the specified definition,\n- [content] consisting of an element that has the specified field. The\n  available fields match the arguments of the\n  [element function]($function/#element-functions) that were given when the\n  element was constructed.\n\n```example\n#let it = [= Heading]\n#it.body \\\n#it.depth \\\n#it.fields()\n\n#let dict = (greet: \"Hello\")\n#dict.greet \\\n#emoji.face\n\n```\n\n## Methods\nA _method call_ is a convenient way to call a function that is scoped to a\nvalue's [type]. For example, we can call the [`str.len`]($str.len) function in\nthe following two equivalent ways:\n\n```example\n#str.len(\"abc\") is the same as\n#\"abc\".len()\n```\n\nThe structure of a method call is `{value.method(..args)}` and its equivalent\nfull function call is `{type(value).method(value, ..args)}`. The documentation\nof each type lists its scoped functions. You cannot currently define your own\nmethods.\n\n```example\n#let values = (1, 2, 3, 4)\n#values.pop() \\\n#values.len() \\\n\n#(\"a, b, c\"\n    .split(\", \")\n    .join[ --- ])\n\n#\"abc\".len() is the same as\n#str.len(\"abc\")\n```\n\nThere are a few special functions that modify the value they are called on (e.g.\n[`array.push`]($array.push)). These functions _must_ be called in method form.\nIn some cases, when the method is only called for its side effect, its return\nvalue should be ignored (and not participate in joining). The canonical way to\ndiscard a value is with a let binding: `{let _ = array.remove(1)}`.\n\n## Modules\nYou can split up your Typst projects into multiple files called _modules._ A\nmodule can refer to the content and definitions of another module in multiple\nways:\n\n- **Including:** `{include \"bar.typ\"}` \\\n  Evaluates the file at the path `bar.typ` and returns the resulting [content].\n\n- **Import:** `{import \"bar.typ\"}` \\\n  Evaluates the file at the path `bar.typ` and inserts the resulting [module]\n  into the current scope as `bar` (filename without extension). You can use the\n  `as` keyword to rename the imported module: `{import \"bar.typ\" as baz}`. You\n  can import nested items using dot notation: `{import \"bar.typ\": baz.a}`.\n\n- **Import items:** `{import \"bar.typ\": a, b}` \\\n  Evaluates the file at the path `bar.typ`, extracts the values of the variables\n  `a` and `b` (that need to be defined in `bar.typ`, e.g. through `{let}`\n  bindings) and defines them in the current file. Replacing `a, b` with `*`\n  loads all variables defined in a module. You can use the `as` keyword to\n  rename the individual items: `{import \"bar.typ\": a as one, b as two}`\n\nInstead of a path, you can also use a [module value]($module), as shown in the\nfollowing example:\n\n```example\n#import emoji: face\n#face.grin\n```\n\n## Packages\nTo reuse building blocks across projects, you can also create and import Typst\n_packages._ A package import is specified as a triple of a namespace, a name,\nand a version.\n\n```example\n>>> #let add(x, y) = x + y\n<<< #import \"@preview/example:0.1.0\": add\n#add(2, 7)\n```\n\nThe `preview` namespace contains packages shared by the community. You can find\nall available community packages on [Typst Universe]($universe).\n\nIf you are using Typst locally, you can also create your own system-local\npackages. For more details on this, see the\n[package repository](https://github.com/typst/packages).\n\n## Operators\nThe following table lists all available unary and binary operators with effect,\narity (unary, binary) and precedence level (higher binds stronger). Some\noperations, such as [modulus]($calc.rem-euclid), do not have a special syntax\nand can be achieved using functions from the\n[`calc`]($category/foundations/calc) module.\n\n| Operator   | Effect                          | Arity  | Precedence |\n|:----------:|---------------------------------|:------:|:----------:|\n|  `{-}`     | Negation                        | Unary  |     7      |\n|  `{+}`     | No effect (exists for symmetry) | Unary  |     7      |\n|  `{*}`     | Multiplication                  | Binary |     6      |\n|  `{/}`     | Division                        | Binary |     6      |\n|  `{+}`     | Addition                        | Binary |     5      |\n|  `{-}`     | Subtraction                     | Binary |     5      |\n|  `{==}`    | Check equality                  | Binary |     4      |\n|  `{!=}`    | Check inequality                | Binary |     4      |\n|  `{<}`     | Check less-than                 | Binary |     4      |\n|  `{<=}`    | Check less-than or equal        | Binary |     4      |\n|  `{>}`     | Check greater-than              | Binary |     4      |\n|  `{>=}`    | Check greater-than or equal     | Binary |     4      |\n|  `{in}`    | Check if in collection          | Binary |     4      |\n| `{not in}` | Check if not in collection      | Binary |     4      |\n|  `{not}`   | Logical \"not\"                   | Unary  |     3      |\n|  `{and}`   | Short-circuiting logical \"and\"  | Binary |     3      |\n|  `{or}`    | Short-circuiting logical \"or\"   | Binary |     2      |\n|  `{=}`     | Assignment                      | Binary |     1      |\n|  `{+=}`    | Add-Assignment                  | Binary |     1      |\n|  `{-=}`    | Subtraction-Assignment          | Binary |     1      |\n|  `{*=}`    | Multiplication-Assignment       | Binary |     1      |\n|  `{/=}`    | Division-Assignment             | Binary |     1      |\n\n[semver]: https://semver.org/"

[reference.scripting.description]
en = "Automate your document with Typst's scripting capabilities."

[reference.scripting.title]
en = "Scripting"

[reference.styling.body]
en = "\n# Styling\nTypst includes a flexible styling system that automatically applies styling of\nyour choice to your document. With _set rules,_ you can configure basic\nproperties of elements. This way, you create most common styles. However, there\nmight not be a built-in property for everything you wish to do. For this reason,\nTypst further supports _show rules_ that can completely redefine the appearance\nof elements.\n\n## Set rules\nWith set rules, you can customize the appearance of elements. They are written\nas a [function call]($function) to an [element\nfunction]($function/#element-functions) preceded by the `{set}` keyword (or\n`[#set]` in markup). Only optional parameters of that function can be provided\nto the set rule. Refer to each function's documentation to see which parameters\nare optional. In the example below, we use two set rules to change the\n[font family]($text.font) and [heading numbering]($heading.numbering).\n\n```example\n#set heading(numbering: \"I.\")\n#set text(\n  font: \"New Computer Modern\"\n)\n\n= Introduction\nWith set rules, you can style\nyour document.\n```\n\nA top level set rule stays in effect until the end of the file. When nested\ninside of a block, it is only in effect until the end of that block. With a\nblock, you can thus restrict the effect of a rule to a particular segment of\nyour document. Below, we use a content block to scope the list styling to one\nparticular list.\n\n```example\nThis list is affected: #[\n  #set list(marker: [--])\n  - Dash\n]\n\nThis one is not:\n- Bullet\n```\n\nSometimes, you'll want to apply a set rule conditionally. For this, you can use\na _set-if_ rule.\n\n```example\n#let task(body, critical: false) = {\n  set text(red) if critical\n  [- #body]\n}\n\n#task(critical: true)[Food today?]\n#task(critical: false)[Work deadline]\n```\n\n## Show rules\nWith show rules, you can deeply customize the look of a type of element. The\nmost basic form of show rule is a _show-set rule._ Such a rule is written as the\n`{show}` keyword followed by a [selector], a colon and then a set rule. The most\nbasic form of selector is an [element function]($function/#element-functions).\nThis lets the set rule only apply to the selected element. In the example below,\nheadings become dark blue while all other text stays black.\n\n```example\n#show heading: set text(navy)\n\n= This is navy-blue\nBut this stays black.\n```\n\nWith show-set rules you can mix and match properties from different functions to\nachieve many different effects. But they still limit you to what is predefined\nin Typst. For maximum flexibility, you can instead write a show rule that\ndefines how to format an element from scratch. To write such a show rule,\nreplace the set rule after the colon with an arbitrary [function]. This function\nreceives the element in question and can return arbitrary content. The available\n[fields]($scripting/#fields) on the element passed to the function again match\nthe parameters of the respective element function. Below, we define a show rule\nthat formats headings for a fantasy encyclopedia.\n\n```example\n#set heading(numbering: \"(I)\")\n#show heading: it => [\n  #set align(center)\n  #set text(font: \"Inria Serif\")\n  \\~ #emph(it.body)\n     #counter(heading).display(\n       it.numbering\n     ) \\~\n]\n\n= Dragon\nWith a base health of 15, the\ndragon is the most powerful\ncreature.\n\n= Manticore\nWhile less powerful than the\ndragon, the manticore gets\nextra style points.\n```\n\nLike set rules, show rules are in effect until the end of the current block or\nfile.\n\nInstead of a function, the right-hand side of a show rule can also take a\nliteral string or content block that should be directly substituted for the\nelement. And apart from a function, the left-hand side of a show rule can also\ntake a number of other _selectors_ that define what to apply the transformation\nto:\n\n- **Everything:** `{show: rest => ..}` \\\n  Transform everything after the show rule. This is useful to apply a more\n  complex layout to your whole document without wrapping everything in a giant\n  function call.\n\n- **Text:** `{show \"Text\": ..}` \\\n  Style, transform or replace text.\n\n- **Regex:** `{show regex(\"\\w+\"): ..}` \\\n  Select and transform text with a regular expression for even more flexibility.\n  See the documentation of the [`regex` type]($regex) for details.\n\n- **Function with fields:** `{show heading.where(level: 1): ..}` \\\n  Transform only elements that have the specified fields. For example, you might\n  want to only change the style of level-1 headings.\n\n- **Label:** `{show <intro>: ..}` \\\n  Select and transform elements that have the specified label. See the\n  documentation of the [`label` type]($label) for more details.\n\n```example\n#show \"Project\": smallcaps\n#show \"badly\": \"great\"\n\nWe started Project in 2019\nand are still working on it.\nProject is progressing badly.\n```"

[reference.styling.description]
en = "All concepts needed to style your document with Typst."

[reference.styling.title]
en = "Styling"

[reference.svg.description]
en = "Documentation for functions related to SVG in Typst."

[reference.svg.svg.details]
en = "Instead of creating a PDF, Typst can also directly render pages to scalable\nvector graphics (SVGs), which are the preferred format for embedding vector\ngraphics in web pages. Like PDF files, SVGs display your document exactly how\nyou have laid it out in Typst. Likewise, they share the benefit of not being\nbound to a specific resolution. Hence, you can print or view SVG files on any\ndevice without incurring a loss of quality. (Note that font printing quality may\nbe better with a PDF.) In contrast to a PDF, an SVG cannot contain multiple\npages. When exporting a multi-page document, Typst will emit multiple SVGs.\n\nSVGs can represent text in two ways: By embedding the text itself and rendering\nit with the fonts available on the viewer's computer or by embedding the shapes\nof each glyph in the font used to create the document. To ensure that the SVG\nfile looks the same across all devices it is viewed on, Typst chooses the latter\nmethod. This means that the text in the SVG cannot be extracted automatically,\nfor example by copy/paste or a screen reader. If you need the text to be\naccessible, export a PDF or HTML file instead.\n\nSVGs can have transparent backgrounds. By default, Typst will output an SVG with\nan opaque white background. You can make the background transparent using\n`[#set page(fill: none)]`. Learn more on the\n[`page` function's reference page]($page.fill).\n\n# Exporting as SVG\n## Command Line\nPass `--format svg` to the `compile` or `watch` subcommand or provide an output\nfile name that ends with `.svg`.\n\nIf your document has more than one page, Typst will create multiple image files.\nThe output file name must then be a template string containing at least one of\n- `[{p}]`, which will be replaced by the page number\n- `[{0p}]`, which will be replaced by the zero-padded page number (so that all\n  numbers have the same length)\n- `[{t}]`, which will be replaced by the total number of pages\n\nWhen exporting to SVG, you have the following configuration options:\n\n- Which pages to export by specifying `--pages` followed by a comma-separated\n  list of numbers or dash-separated number ranges. Ranges can be half-open.\n  Example: `2,3,7-9,11-`.\n\n## Web App\nClick \"File\" > \"Export as\" > \"SVG\" or click the downwards-facing arrow next to\nthe quick download button and select \"Export as SVG\". When exporting to SVG, you\nhave the following configuration options:\n\n- Which pages to export. Valid options are \"All pages\", \"Current page\", and\n  \"Custom ranges\". Custom ranges are a comma-separated list of numbers or\n  dash-separated number ranges. Ranges can be half-open. Example: `2,3,7-9,11-`.\n"

[reference.svg.svg.title]
en = "SVG"

[reference.svg.title]
en = "SVG"

[reference.symbols.description]
en = "Documentation for functions related to Symbols in Typst."

[reference.symbols.emoji.description]
en = "Documentation for the `emoji` module."

[reference.symbols.emoji.emoji.details]
en = "Named emoji.\n\nFor example, `#emoji.face` produces the 😀 emoji. If you frequently use\ncertain emojis, you can also import them from the `emoji` module (`[#import\nemoji: face]`) to use them without the `#emoji.` prefix.\n"

[reference.symbols.emoji.emoji.title]
en = "Emoji"

[reference.symbols.emoji.oneliner]
en = "These two modules give names to symbols and emoji to make them easy to insert"

[reference.symbols.emoji.title]
en = "Emoji"

[reference.symbols.sym.description]
en = "Documentation for the `sym` module."

[reference.symbols.sym.oneliner]
en = "These two modules give names to symbols and emoji to make them easy to insert"

[reference.symbols.sym.sym.10757.deprecation]
en = "`sect` is deprecated, use `inter` instead"

[reference.symbols.sym.sym.10777.deprecation]
en = "`integral.sect` is deprecated, use `integral.inter` instead"

[reference.symbols.sym.sym.10816.deprecation]
en = "`sect` is deprecated, use `inter` instead"

[reference.symbols.sym.sym.10820.deprecation]
en = "`sect` is deprecated, use `inter` instead"

[reference.symbols.sym.sym.10830.deprecation]
en = "`sect` is deprecated, use `inter` instead"

[reference.symbols.sym.sym.8745.deprecation]
en = "`sect` is deprecated, use `inter` instead"

[reference.symbols.sym.sym.8851.deprecation]
en = "`sect` is deprecated, use `inter` instead"

[reference.symbols.sym.sym.8898.deprecation]
en = "`sect` is deprecated, use `inter` instead"

[reference.symbols.sym.sym.8914.deprecation]
en = "`sect` is deprecated, use `inter` instead"

[reference.symbols.sym.sym.details]
en = "Named general symbols.\n\nFor example, `#sym.arrow` produces the → symbol. Within\n[formulas]($category/math), these symbols can be used without the `#sym.`\nprefix.\n\nThe `d` in an integral's `dx` can be written as `[$dif x$]`.\nOutside math formulas, `dif` can be accessed as `math.dif`.\n"

[reference.symbols.sym.sym.title]
en = "General"

[reference.symbols.sym.title]
en = "General"

[reference.symbols.symbols.details]
en = "These two modules give names to symbols and emoji to make them easy to insert\nwith a normal keyboard. Alternatively, you can also always directly enter\nUnicode symbols into your text and formulas. In addition to the symbols listed\nbelow, math mode defines `dif` and `Dif`. These are not normal symbol values\nbecause they also affect spacing and font style.\n"

[reference.symbols.symbols.title]
en = "Symbols"

[reference.symbols.title]
en = "Symbols"

[reference.syntax.body]
en = "\n# Syntax\nTypst is a markup language. This means that you can use simple syntax to\naccomplish common layout tasks. The lightweight markup syntax is complemented by\nset and show rules, which let you style your document easily and automatically.\nAll this is backed by a tightly integrated scripting language with built-in and\nuser-defined functions.\n\n## Modes\nTypst has three syntactical modes: Markup, math, and code. Markup mode is the\ndefault in a Typst document, math mode lets you write mathematical formulas, and\ncode mode lets you use Typst's scripting features.\n\nYou can switch to a specific mode at any point by referring to the following\ntable:\n\n| New mode | Syntax                          | Example                         |\n|----------|---------------------------------|---------------------------------|\n| Code     | Prefix the code with `#`        | `[Number: #(1 + 2)]`            |\n| Math     | Surround equation with `[$..$]` | `[$-x$ is the opposite of $x$]` |\n| Markup   | Surround markup with `[[..]]`   | `{let name = [*Typst!*]}`       |\n\nOnce you have entered code mode with `#`, you don't need to use further hashes\nunless you switched back to markup or math mode in between.\n\n## Markup\nTypst provides built-in markup for the most common document elements. Most of\nthe syntax elements are just shortcuts for a corresponding function. The table\nbelow lists all markup that is available and links to the  best place to learn\nmore about their syntax and usage.\n\n| Name               | Example                      | See                      |\n| ------------------ | ---------------------------- | ------------------------ |\n| Paragraph break    | Blank line                   | [`parbreak`]             |\n| Strong emphasis    | `[*strong*]`                 | [`strong`]               |\n| Emphasis           | `[_emphasis_]`               | [`emph`]                 |\n| Raw text           | ``[`print(1)`]``             | [`raw`]                  |\n| Link               | `[https://typst.app/]`       | [`link`]                 |\n| Label              | `[<intro>]`                  | [`label`]                |\n| Reference          | `[@intro]`                   | [`ref`]                  |\n| Heading            | `[= Heading]`                | [`heading`]              |\n| Bullet list        | `[- item]`                   | [`list`]                 |\n| Numbered list      | `[+ item]`                   | [`enum`]                 |\n| Term list          | `[/ Term: description]`      | [`terms`]                |\n| Math               | `[$x^2$]`                    | [Math]($category/math)   |\n| Line break         | `[\\]`                        | [`linebreak`]            |\n| Smart quote        | `['single' or \"double\"]`     | [`smartquote`]           |\n| Symbol shorthand   | `[~]`, `[---]`               | [Symbols]($category/symbols/sym) |\n| Code expression    | `[#rect(width: 1cm)]`        | [Scripting]($scripting/#expressions) |\n| Character escape   | `[Tweet at us \\#ad]`         | [Below](#escapes)        |\n| Comment            | `[/* block */]`, `[// line]` | [Below](#comments)       |\n\n## Math mode { #math }\nMath mode is a special markup mode that is used to typeset mathematical\nformulas. It is entered by wrapping an equation in `[$]` characters. This works\nboth in markup and code. The equation will be typeset into its own block if it\nstarts and ends with at least one space (e.g. `[$ x^2 $]`). Inline math can be\nproduced by omitting the whitespace (e.g. `[$x^2$]`). An overview over the\nsyntax specific to math mode follows:\n\n| Name                   | Example                  | See                      |\n| ---------------------- | ------------------------ | ------------------------ |\n| Inline math            | `[$x^2$]`                | [Math]($category/math)   |\n| Block-level math       | `[$ x^2 $]`              | [Math]($category/math)   |\n| Bottom attachment      | `[$x_1$]`                | [`attach`]($category/math/attach) |\n| Top attachment         | `[$x^2$]`                | [`attach`]($category/math/attach) |\n| Fraction               | `[$1 + (a+b)/5$]`        | [`frac`]($math.frac)     |\n| Line break             | `[$x \\ y$]`              | [`linebreak`]            |\n| Alignment point        | `[$x &= 2 \\ &= 3$]`      | [Math]($category/math)   |\n| Variable access        | `[$#x$, $pi$]`           | [Math]($category/math)   |\n| Field access           | `[$arrow.r.long$]`       | [Scripting]($scripting/#fields) |\n| Implied multiplication | `[$x y$]`                | [Math]($category/math)   |\n| Symbol shorthand       | `[$->$]`, `[$!=$]`       | [Symbols]($category/symbols/sym) |\n| Text/string in math    | `[$a \"is natural\"$]`     | [Math]($category/math)   |\n| Math function call     | `[$floor(x)$]`           | [Math]($category/math)   |\n| Code expression        | `[$#rect(width: 1cm)$]`  | [Scripting]($scripting/#expressions) |\n| Character escape       | `[$x\\^2$]`               | [Below](#escapes)        |\n| Comment                | `[$/* comment */$]`      | [Below](#comments)       |\n\n## Code mode { #code }\nWithin code blocks and expressions, new expressions can start without a leading\n`#` character. Many syntactic elements are specific to expressions. Below is\na table listing all syntax that is available in code mode:\n\n| Name                     | Example                       | See                                |\n| ------------------------ | ----------------------------- | ---------------------------------- |\n| None                     | `{none}`                      | [`none`]                           |\n| Auto                     | `{auto}`                      | [`auto`]                           |\n| Boolean                  | `{false}`, `{true}`           | [`bool`]                           |\n| Integer                  | `{10}`, `{0xff}`              | [`int`]                            |\n| Floating-point number    | `{3.14}`, `{1e5}`             | [`float`]                          |\n| Length                   | `{2pt}`, `{3mm}`, `{1em}`, .. | [`length`]                         |\n| Angle                    | `{90deg}`, `{1rad}`           | [`angle`]                          |\n| Fraction                 | `{2fr}`                       | [`fraction`]                       |\n| Ratio                    | `{50%}`                       | [`ratio`]                          |\n| String                   | `{\"hello\"}`                   | [`str`]                            |\n| Label                    | `{<intro>}`                   | [`label`]                          |\n| Math                     | `[$x^2$]`                     | [Math]($category/math)             |\n| Raw text                 | ``[`print(1)`]``              | [`raw`]                            |\n| Variable access          | `{x}`                         | [Scripting]($scripting/#blocks)    |\n| Code block               | `{{ let x = 1; x + 2 }}`      | [Scripting]($scripting/#blocks)    |\n| Content block            | `{[*Hello*]}`                 | [Scripting]($scripting/#blocks)    |\n| Parenthesized expression | `{(1 + 2)}`                   | [Scripting]($scripting/#blocks)    |\n| Array                    | `{(1, 2, 3)}`                 | [Array]($array)                    |\n| Dictionary               | `{(a: \"hi\", b: 2)}`           | [Dictionary]($dictionary)          |\n| Unary operator           | `{-x}`                        | [Scripting]($scripting/#operators) |\n| Binary operator          | `{x + y}`                     | [Scripting]($scripting/#operators) |\n| Assignment               | `{x = 1}`                     | [Scripting]($scripting/#operators) |\n| Field access             | `{x.y}`                       | [Scripting]($scripting/#fields)    |\n| Method call              | `{x.flatten()}`               | [Scripting]($scripting/#methods)   |\n| Function call            | `{min(x, y)}`                 | [Function]($function)              |\n| Argument spreading       | `{min(..nums)}`               | [Arguments]($arguments)            |\n| Unnamed function         | `{(x, y) => x + y}`           | [Function]($function)              |\n| Let binding              | `{let x = 1}`                 | [Scripting]($scripting/#bindings)  |\n| Named function           | `{let f(x) = 2 * x}`          | [Function]($function)              |\n| Set rule                 | `{set text(14pt)}`            | [Styling]($styling/#set-rules)     |\n| Set-if rule              | `{set text(..) if .. }`       | [Styling]($styling/#set-rules)     |\n| Show-set rule            | `{show heading: set block(..)}` | [Styling]($styling/#show-rules)  |\n| Show rule with function  | `{show raw: it => {..}}`      | [Styling]($styling/#show-rules)    |\n| Show-everything rule     | `{show: template}`            | [Styling]($styling/#show-rules)    |\n| Context expression       | `{context text.lang}`         | [Context]($context)                |\n| Conditional              | `{if x == 1 {..} else {..}}`  | [Scripting]($scripting/#conditionals) |\n| For loop                 | `{for x in (1, 2, 3) {..}}`   | [Scripting]($scripting/#loops)     |\n| While loop               | `{while x < 10 {..}}`         | [Scripting]($scripting/#loops)     |\n| Loop control flow        | `{break, continue}`           | [Scripting]($scripting/#loops)     |\n| Return from function     | `{return x}`                  | [Function]($function)              |\n| Include module           | `{include \"bar.typ\"}`         | [Scripting]($scripting/#modules)   |\n| Import module            | `{import \"bar.typ\"}`          | [Scripting]($scripting/#modules)   |\n| Import items from module | `{import \"bar.typ\": a, b, c}` | [Scripting]($scripting/#modules)   |\n| Comment                  | `{/* block */}`, `{// line}`  | [Below](#comments)                 |\n\n## Comments\nComments are ignored by Typst and will not be included in the output. This is\nuseful to exclude old versions or to add annotations. To comment out a single\nline, start it with `//`:\n```example\n// our data barely supports\n// this claim\n\nWe show with $p < 0.05$\nthat the difference is\nsignificant.\n```\n\nComments can also be wrapped between `/*` and `*/`. In this case, the comment\ncan span over multiple lines:\n```example\nOur study design is as follows:\n/* Somebody write this up:\n   - 1000 participants.\n   - 2x2 data design. */\n```\n\n## Escape sequences { #escapes }\nEscape sequences are used to insert special characters that are hard to type or\notherwise have special meaning in Typst. To escape a character, precede it with\na backslash. To insert any Unicode codepoint, you can write a hexadecimal escape\nsequence: `[\\u{1f600}]`. The same kind of escape sequences also work in\n[strings]($str).\n\n```example\nI got an ice cream for\n\\$1.50! \\u{1f600}\n```\n\n## Paths\nTypst has various features that require a file path to reference external\nresources such as images, Typst files, or data files. Paths are represented as\n[strings]($str). There are two kinds of paths: Relative and absolute.\n\n- A **relative path** searches from the location of the Typst file where the\n  feature is invoked. It is the default:\n  ```typ\n  #image(\"images/logo.png\")\n  ```\n\n- An **absolute path** searches from the _root_ of the project. It starts with a\n  leading `/`:\n  ```typ\n  #image(\"/assets/logo.png\")\n  ```\n\n### Project root\nBy default, the project root is the parent directory of the main Typst file.\nFor security reasons, you cannot read any files outside of the root directory.\n\nIf you want to set a specific folder as the root of your project, you can use\nthe CLI's `--root` flag. Make sure that the main file is contained in the\nfolder's subtree!\n```bash\ntypst compile --root .. file.typ\n```\n\nIn the web app, the project itself is the root directory. You can always read\nall files within it, no matter which one is previewed (via the eye toggle next\nto each Typst file in the file panel).\n\n### Paths and packages\nA package can only load files from its own directory. Within it, absolute paths\npoint to the package root, rather than the project root. For this reason, it\ncannot directly load files from the project directory. If a package needs\nresources from the project (such as a logo image), you must pass the already\nloaded image, e.g. as a named parameter `{logo: image(\"mylogo.svg\")}`. Note that\nyou can then still customize the image's appearance with a set rule within the\npackage.\n\nIn the future, paths might become a\n[distinct type from strings](https://github.com/typst/typst/issues/971), so that\nthey can retain knowledge of where they were constructed. This way, resources\ncould be loaded from a different root."

[reference.syntax.description]
en = "A compact reference for Typst's syntax. Learn more about the language within\nmarkup, math, and code mode.\n"

[reference.syntax.title]
en = "Syntax"

[reference.text.description]
en = "Documentation for functions related to Text in Typst."

[reference.text.highlight.description]
en = "Documentation for the `highlight` function."

[reference.text.highlight.highlight.body.details]
en = "The content that should be highlighted."

[reference.text.highlight.highlight.bottom-edge.details]
en = "The bottom end of the background rectangle.\n\n"

[reference.text.highlight.highlight.details]
en = "Highlights text with a background color.\n\n# Example\n```example\nThis is #highlight[important].\n```"

[reference.text.highlight.highlight.extent.details]
en = "The amount by which to extend the background to the sides beyond\n(or within if negative) the content.\n\n"

[reference.text.highlight.highlight.fill.details]
en = "The color to highlight the text with.\n\n"

[reference.text.highlight.highlight.oneliner]
en = "Highlights text with a background color."

[reference.text.highlight.highlight.radius.details]
en = "How much to round the highlight's corners. See the\n[rectangle's documentation]($rect.radius) for more details.\n\n"

[reference.text.highlight.highlight.stroke.details]
en = "The highlight's border color. See the\n[rectangle's documentation]($rect.stroke) for more details.\n\n"

[reference.text.highlight.highlight.title]
en = "Highlight"

[reference.text.highlight.highlight.top-edge.details]
en = "The top end of the background rectangle.\n\n"

[reference.text.highlight.oneliner]
en = "Highlights text with a background color."

[reference.text.highlight.title]
en = "Highlight"

[reference.text.linebreak.description]
en = "Documentation for the `linebreak` function."

[reference.text.linebreak.linebreak.details]
en = "Inserts a line break.\n\nAdvances the paragraph to the next line. A single trailing line break at the\nend of a paragraph is ignored, but more than one creates additional empty\nlines.\n\n# Example\n```example\n*Date:* 26.12.2022 \\\n*Topic:* Infrastructure Test \\\n*Severity:* High \\\n```\n\n# Syntax\nThis function also has dedicated syntax: To insert a line break, simply write\na backslash followed by whitespace. This always creates an unjustified\nbreak."

[reference.text.linebreak.linebreak.justify.details]
en = "Whether to justify the line before the break.\n\nThis is useful if you found a better line break opportunity in your\njustified text than Typst did.\n\n"

[reference.text.linebreak.linebreak.oneliner]
en = "Inserts a line break."

[reference.text.linebreak.linebreak.title]
en = "Line Break"

[reference.text.linebreak.oneliner]
en = "Inserts a line break."

[reference.text.linebreak.title]
en = "Line Break"

[reference.text.lorem.description]
en = "Documentation for the `lorem` function."

[reference.text.lorem.lorem.details]
en = "Creates blind text.\n\nThis function yields a Latin-like _Lorem Ipsum_ blind text with the given\nnumber of words. The sequence of words generated by the function is always\nthe same but randomly chosen. As usual for blind texts, it does not make any\nsense. Use it as a placeholder to try layouts.\n\n# Example\n```example\n= Blind Text\n#lorem(30)\n\n= More Blind Text\n#lorem(15)\n```"

[reference.text.lorem.lorem.oneliner]
en = "Creates blind text."

[reference.text.lorem.lorem.title]
en = "Lorem"

[reference.text.lorem.lorem.words.details]
en = "The length of the blind text in words."

[reference.text.lorem.oneliner]
en = "Creates blind text."

[reference.text.lorem.title]
en = "Lorem"

[reference.text.lower.description]
en = "Documentation for the `lower` function."

[reference.text.lower.lower.details]
en = "Converts a string or content to lowercase.\n\n# Example\n```example\n#lower(\"ABC\") \\\n#lower[*My Text*] \\\n#lower[already low]\n```"

[reference.text.lower.lower.oneliner]
en = "Converts a string or content to lowercase."

[reference.text.lower.lower.text.details]
en = "The text to convert to lowercase."

[reference.text.lower.lower.title]
en = "Lowercase"

[reference.text.lower.oneliner]
en = "Converts a string or content to lowercase."

[reference.text.lower.title]
en = "Lowercase"

[reference.text.overline.description]
en = "Documentation for the `overline` function."

[reference.text.overline.oneliner]
en = "Adds a line over text."

[reference.text.overline.overline.background.details]
en = "Whether the line is placed behind the content it overlines.\n\n"

[reference.text.overline.overline.body.details]
en = "The content to add a line over."

[reference.text.overline.overline.details]
en = "Adds a line over text.\n\n# Example\n```example\n#overline[A line over text.]\n```"

[reference.text.overline.overline.evade.details]
en = "Whether the line skips sections in which it would collide with the\nglyphs.\n\n"

[reference.text.overline.overline.extent.details]
en = "The amount by which to extend the line beyond (or within if negative)\nthe content.\n\n"

[reference.text.overline.overline.offset.details]
en = "The position of the line relative to the baseline. Read from the font\ntables if `{auto}`.\n\n"

[reference.text.overline.overline.oneliner]
en = "Adds a line over text."

[reference.text.overline.overline.stroke.details]
en = "How to [stroke] the line.\n\nIf set to `{auto}`, takes on the text's color and a thickness defined in\nthe current font.\n\n"

[reference.text.overline.overline.title]
en = "Overline"

[reference.text.overline.title]
en = "Overline"

[reference.text.raw.description]
en = "Documentation for the `raw` function."

[reference.text.raw.oneliner]
en = "Raw text with optional syntax highlighting."

[reference.text.raw.raw.align.details]
en = "The horizontal alignment that each line in a raw block should have.\nThis option is ignored if this is not a raw block (if specified\n`block: false` or single backticks were used in markup mode).\n\nBy default, this is set to `{start}`, meaning that raw text is\naligned towards the start of the text direction inside the block\nby default, regardless of the current context's alignment (allowing\nyou to center the raw block itself without centering the text inside\nit, for example).\n\n"

[reference.text.raw.raw.block.details]
en = "Whether the raw text is displayed as a separate block.\n\nIn markup mode, using one-backtick notation makes this `{false}`.\nUsing three-backtick notation makes it `{true}` if the enclosed content\ncontains at least one line break.\n\n"

[reference.text.raw.raw.details]
en = "Raw text with optional syntax highlighting.\n\nDisplays the text verbatim and in a monospace font. This is typically used\nto embed computer code into your document.\n\n# Example\n````example\nAdding `rbx` to `rcx` gives\nthe desired result.\n\nWhat is ```rust fn main()``` in Rust\nwould be ```c int main()``` in C.\n\n```rust\nfn main() {\n    println!(\"Hello World!\");\n}\n```\n\nThis has ``` `backticks` ``` in it\n(but the spaces are trimmed). And\n``` here``` the leading space is\nalso trimmed.\n````\n\nYou can also construct a [`raw`] element programmatically from a string (and\nprovide the language tag via the optional [`lang`]($raw.lang) argument).\n```example\n#raw(\"fn \" + \"main() {}\", lang: \"rust\")\n```\n\n# Syntax\nThis function also has dedicated syntax. You can enclose text in 1 or 3+\nbackticks (`` ` ``) to make it raw. Two backticks produce empty raw text.\nThis works both in markup and code.\n\nWhen you use three or more backticks, you can additionally specify a\nlanguage tag for syntax highlighting directly after the opening backticks.\nWithin raw blocks, everything (except for the language tag, if applicable)\nis rendered as is, in particular, there are no escape sequences.\n\nThe language tag is an identifier that directly follows the opening\nbackticks only if there are three or more backticks. If your text starts\nwith something that looks like an identifier, but no syntax highlighting is\nneeded, start the text with a single space (which will be trimmed) or use\nthe single backtick syntax. If your text should start or end with a\nbacktick, put a space before or after it (it will be trimmed)."

[reference.text.raw.raw.lang.details]
en = "The language to syntax-highlight in.\n\nApart from typical language tags known from Markdown, this supports the\n`{\"typ\"}`, `{\"typc\"}`, and `{\"typm\"}` tags for\n[Typst markup]($reference/syntax/#markup),\n[Typst code]($reference/syntax/#code), and\n[Typst math]($reference/syntax/#math), respectively.\n\n"

[reference.text.raw.raw.line.body.details]
en = "The highlighted raw text."

[reference.text.raw.raw.line.count.details]
en = "The total number of lines in the raw block."

[reference.text.raw.raw.line.details]
en = "A highlighted line of raw text.\n\nThis is a helper element that is synthesized by [`raw`] elements.\n\nIt allows you to access various properties of the line, such as the line\nnumber, the raw non-highlighted text, the highlighted text, and whether it\nis the first or last line of the raw block."

[reference.text.raw.raw.line.number.details]
en = "The line number of the raw line inside of the raw block, starts at 1."

[reference.text.raw.raw.line.oneliner]
en = "A highlighted line of raw text."

[reference.text.raw.raw.line.text.details]
en = "The line of raw text."

[reference.text.raw.raw.line.title]
en = "Raw Text / Code Line"

[reference.text.raw.raw.oneliner]
en = "Raw text with optional syntax highlighting."

[reference.text.raw.raw.syntaxes.details]
en = "Additional syntax definitions to load. The syntax definitions should be\nin the [`sublime-syntax` file format](https://www.sublimetext.com/docs/syntax.html).\n\nYou can pass any of the following values:\n\n- A path string to load a syntax file from the given path. For more\n  details about paths, see the [Paths section]($syntax/#paths).\n- Raw bytes from which the syntax should be decoded.\n- An array where each item is one the above.\n\n"

[reference.text.raw.raw.tab-size.details]
en = "The size for a tab stop in spaces. A tab is replaced with enough spaces to\nalign with the next multiple of the size.\n\n"

[reference.text.raw.raw.text.details]
en = "The raw text.\n\nYou can also use raw blocks creatively to create custom syntaxes for\nyour automations.\n\n"

[reference.text.raw.raw.theme.details]
en = "The theme to use for syntax highlighting. Themes should be in the\n[`tmTheme` file format](https://www.sublimetext.com/docs/color_schemes_tmtheme.html).\n\nYou can pass any of the following values:\n\n- `{none}`: Disables syntax highlighting.\n- `{auto}`: Highlights with Typst's default theme.\n- A path string to load a theme file from the given path. For more\n  details about paths, see the [Paths section]($syntax/#paths).\n- Raw bytes from which the theme should be decoded.\n\nApplying a theme only affects the color of specifically highlighted\ntext. It does not consider the theme's foreground and background\nproperties, so that you retain control over the color of raw text. You\ncan apply the foreground color yourself with the [`text`] function and\nthe background with a [filled block]($block.fill). You could also use\nthe [`xml`] function to extract these properties from the theme.\n\n"

[reference.text.raw.raw.title]
en = "Raw Text / Code"

[reference.text.raw.title]
en = "Raw Text / Code"

[reference.text.smallcaps.description]
en = "Documentation for the `smallcaps` function."

[reference.text.smallcaps.oneliner]
en = "Displays text in small capitals."

[reference.text.smallcaps.smallcaps.all.details]
en = "Whether to turn uppercase letters into small capitals as well.\n\nUnless overridden by a show rule, this enables the `c2sc` OpenType\nfeature.\n\n"

[reference.text.smallcaps.smallcaps.body.details]
en = "The content to display in small capitals."

[reference.text.smallcaps.smallcaps.details]
en = "Displays text in small capitals.\n\n# Example\n```example\nHello \\\n#smallcaps[Hello]\n```\n\n# Smallcaps fonts\nBy default, this uses the `smcp` and `c2sc` OpenType features on the font.\nNot all fonts support these features. Sometimes, smallcaps are part of a\ndedicated font. This is, for example, the case for the _Latin Modern_ family\nof fonts. In those cases, you can use a show-set rule to customize the\nappearance of the text in smallcaps:\n\n```typ\n#show smallcaps: set text(font: \"Latin Modern Roman Caps\")\n```\n\nIn the future, this function will support synthesizing smallcaps from normal\nletters, but this is not yet implemented.\n\n# Smallcaps headings\nYou can use a [show rule]($styling/#show-rules) to apply smallcaps\nformatting to all your headings. In the example below, we also center-align\nour headings and disable the standard bold font.\n\n```example\n#set par(justify: true)\n#set heading(numbering: \"I.\")\n\n#show heading: smallcaps\n#show heading: set align(center)\n#show heading: set text(\n  weight: \"regular\"\n)\n\n= Introduction\n#lorem(40)\n```"

[reference.text.smallcaps.smallcaps.oneliner]
en = "Displays text in small capitals."

[reference.text.smallcaps.smallcaps.title]
en = "Small Capitals"

[reference.text.smallcaps.title]
en = "Small Capitals"

[reference.text.smartquote.description]
en = "Documentation for the `smartquote` function."

[reference.text.smartquote.oneliner]
en = "A language-aware quote that reacts to its context."

[reference.text.smartquote.smartquote.alternative.details]
en = "Whether to use alternative quotes.\n\nDoes nothing for languages that don't have alternative quotes, or if\nexplicit quotes were set.\n\n"

[reference.text.smartquote.smartquote.details]
en = "A language-aware quote that reacts to its context.\n\nAutomatically turns into an appropriate opening or closing quote based on\nthe active [text language]($text.lang).\n\n# Example\n```example\n\"This is in quotes.\"\n\n#set text(lang: \"de\")\n\"Das ist in Anführungszeichen.\"\n\n#set text(lang: \"fr\")\n\"C'est entre guillemets.\"\n```\n\n# Syntax\nThis function also has dedicated syntax: The normal quote characters\n(`'` and `\"`). Typst automatically makes your quotes smart."

[reference.text.smartquote.smartquote.double.details]
en = "Whether this should be a double quote."

[reference.text.smartquote.smartquote.enabled.details]
en = "Whether smart quotes are enabled.\n\nTo disable smartness for a single quote, you can also escape it with a\nbackslash.\n\n"

[reference.text.smartquote.smartquote.oneliner]
en = "A language-aware quote that reacts to its context."

[reference.text.smartquote.smartquote.quotes.details]
en = "The quotes to use.\n\n- When set to `{auto}`, the appropriate single quotes for the\n  [text language]($text.lang) will be used. This is the default.\n- Custom quotes can be passed as a string, array, or dictionary of either\n  - [string]($str): a string consisting of two characters containing the\n    opening and closing double quotes (characters here refer to Unicode\n    grapheme clusters)\n  - [array]: an array containing the opening and closing double quotes\n  - [dictionary]: an array containing the double and single quotes, each\n    specified as either `{auto}`, string, or array\n\n"

[reference.text.smartquote.smartquote.title]
en = "Smartquote"

[reference.text.smartquote.title]
en = "Smartquote"

[reference.text.strike.description]
en = "Documentation for the `strike` function."

[reference.text.strike.oneliner]
en = "Strikes through text."

[reference.text.strike.strike.background.details]
en = "Whether the line is placed behind the content.\n\n"

[reference.text.strike.strike.body.details]
en = "The content to strike through."

[reference.text.strike.strike.details]
en = "Strikes through text.\n\n# Example\n```example\nThis is #strike[not] relevant.\n```"

[reference.text.strike.strike.extent.details]
en = "The amount by which to extend the line beyond (or within if negative)\nthe content.\n\n"

[reference.text.strike.strike.offset.details]
en = "The position of the line relative to the baseline. Read from the font\ntables if `{auto}`.\n\nThis is useful if you are unhappy with the offset your font provides.\n\n"

[reference.text.strike.strike.oneliner]
en = "Strikes through text."

[reference.text.strike.strike.stroke.details]
en = "How to [stroke] the line.\n\nIf set to `{auto}`, takes on the text's color and a thickness defined in\nthe current font.\n\n_Note:_ Please don't use this for real redaction as you can still copy\npaste the text.\n\n"

[reference.text.strike.strike.title]
en = "Strikethrough"

[reference.text.strike.title]
en = "Strikethrough"

[reference.text.sub.description]
en = "Documentation for the `sub` function."

[reference.text.sub.oneliner]
en = "Renders text in subscript."

[reference.text.sub.sub.baseline.details]
en = "The baseline shift for synthetic subscripts. Does not apply if\n`typographic` is true and the font has subscript codepoints for the\ngiven `body`."

[reference.text.sub.sub.body.details]
en = "The text to display in subscript."

[reference.text.sub.sub.details]
en = "Renders text in subscript.\n\nThe text is rendered smaller and its baseline is lowered.\n\n# Example\n```example\nRevenue#sub[yearly]\n```"

[reference.text.sub.sub.oneliner]
en = "Renders text in subscript."

[reference.text.sub.sub.size.details]
en = "The font size for synthetic subscripts. Does not apply if\n`typographic` is true and the font has subscript codepoints for the\ngiven `body`."

[reference.text.sub.sub.title]
en = "Subscript"

[reference.text.sub.sub.typographic.details]
en = "Whether to prefer the dedicated subscript characters of the font.\n\nIf this is enabled, Typst first tries to transform the text to subscript\ncodepoints. If that fails, it falls back to rendering lowered and shrunk\nnormal letters.\n\n"

[reference.text.sub.title]
en = "Subscript"

[reference.text.super.description]
en = "Documentation for the `super` function."

[reference.text.super.oneliner]
en = "Renders text in superscript."

[reference.text.super.super.baseline.details]
en = "The baseline shift for synthetic superscripts. Does not apply if\n`typographic` is true and the font has superscript codepoints for the\ngiven `body`."

[reference.text.super.super.body.details]
en = "The text to display in superscript."

[reference.text.super.super.details]
en = "Renders text in superscript.\n\nThe text is rendered smaller and its baseline is raised.\n\n# Example\n```example\n1#super[st] try!\n```"

[reference.text.super.super.oneliner]
en = "Renders text in superscript."

[reference.text.super.super.size.details]
en = "The font size for synthetic superscripts. Does not apply if\n`typographic` is true and the font has superscript codepoints for the\ngiven `body`."

[reference.text.super.super.title]
en = "Superscript"

[reference.text.super.super.typographic.details]
en = "Whether to prefer the dedicated superscript characters of the font.\n\nIf this is enabled, Typst first tries to transform the text to\nsuperscript codepoints. If that fails, it falls back to rendering\nraised and shrunk normal letters.\n\n"

[reference.text.super.title]
en = "Superscript"

[reference.text.text.description]
en = "Documentation for the `text` function."

[reference.text.text.details]
en = "Text styling.\n\nThe [text function]($text) is of particular interest.\n"

[reference.text.text.oneliner]
en = "Customizes the look and layout of text in a variety of ways."

[reference.text.text.text.alternates.details]
en = "Whether to apply stylistic alternates.\n\nSometimes fonts contain alternative glyphs for the same codepoint.\nSetting this to `{true}` switches to these by enabling the OpenType\n`salt` font feature.\n\n"

[reference.text.text.text.baseline.details]
en = "An amount to shift the text baseline by.\n\n"

[reference.text.text.text.body.details]
en = "Content in which all text is styled according to the other arguments."

[reference.text.text.text.bottom-edge.details]
en = "The bottom end of the conceptual frame around the text used for layout\nand positioning. This affects the size of containers that hold text.\n\n"

[reference.text.text.text.cjk-latin-spacing.details]
en = "Whether to automatically insert spacing between CJK and Latin characters.\n\n"

[reference.text.text.text.costs.details]
en = "The \"cost\" of various choices when laying out text. A higher cost means\nthe layout engine will make the choice less often. Costs are specified\nas a ratio of the default cost, so `{50%}` will make text layout twice\nas eager to make a given choice, while `{200%}` will make it half as\neager.\n\nCurrently, the following costs can be customized:\n- `hyphenation`: splitting a word across multiple lines\n- `runt`: ending a paragraph with a line with a single word\n- `widow`: leaving a single line of paragraph on the next page\n- `orphan`: leaving single line of paragraph on the previous page\n\nHyphenation is generally avoided by placing the whole word on the next\nline, so a higher hyphenation cost can result in awkward justification\nspacing. Note: Hyphenation costs will only be applied when the\n[`linebreaks`]($par.linebreaks) are set to \"optimized\". (For example\nby default implied by [`justify`]($par.justify).)\n\nRunts are avoided by placing more or fewer words on previous lines, so a\nhigher runt cost can result in more awkward in justification spacing.\n\nText layout prevents widows and orphans by default because they are\ngenerally discouraged by style guides. However, in some contexts they\nare allowed because the prevention method, which moves a line to the\nnext page, can result in an uneven number of lines between pages. The\n`widow` and `orphan` costs allow disabling these modifications.\n(Currently, `{0%}` allows widows/orphans; anything else, including the\ndefault of `{100%}`, prevents them. More nuanced cost specification for\nthese modifications is planned for the future.)\n\n"

[reference.text.text.text.details]
en = "Customizes the look and layout of text in a variety of ways.\n\nThis function is used frequently, both with set rules and directly. While\nthe set rule is often the simpler choice, calling the `text` function\ndirectly can be useful when passing text as an argument to another function.\n\n# Example\n```example\n#set text(18pt)\nWith a set rule.\n\n#emph(text(blue)[\n  With a function call.\n])\n```"

[reference.text.text.text.dir.details]
en = "The dominant direction for text and inline objects. Possible values are:\n\n- `{auto}`: Automatically infer the direction from the `lang` property.\n- `{ltr}`: Layout text from left to right.\n- `{rtl}`: Layout text from right to left.\n\nWhen writing in right-to-left scripts like Arabic or Hebrew, you should\nset the [text language]($text.lang) or direction. While individual runs\nof text are automatically layouted in the correct direction, setting the\ndominant direction gives the bidirectional reordering algorithm the\nnecessary information to correctly place punctuation and inline objects.\nFurthermore, setting the direction affects the alignment values `start`\nand `end`, which are equivalent to `left` and `right` in `ltr` text and\nthe other way around in `rtl` text.\n\nIf you set this to `rtl` and experience bugs or in some way bad looking\noutput, please get in touch with us through the\n[Forum](https://forum.typst.app/),\n[Discord server](https://discord.gg/2uDybryKPe),\nor our [contact form](https://typst.app/contact).\n\n"

[reference.text.text.text.discretionary-ligatures.details]
en = "Whether ligatures that should be used sparingly are active. Setting this\nto `{true}` enables the OpenType `dlig` font feature."

[reference.text.text.text.fallback.details]
en = "Whether to allow last resort font fallback when the primary font list\ncontains no match. This lets Typst search through all available fonts\nfor the most similar one that has the necessary glyphs.\n\n_Note:_ Currently, there are no warnings when fallback is disabled and\nno glyphs are found. Instead, your text shows up in the form of \"tofus\":\nSmall boxes that indicate the lack of an appropriate glyph. In the\nfuture, you will be able to instruct Typst to issue warnings so you know\nsomething is up.\n\n"

[reference.text.text.text.features.details]
en = "Raw OpenType features to apply.\n\n- If given an array of strings, sets the features identified by the\n  strings to `{1}`.\n- If given a dictionary mapping to numbers, sets the features\n  identified by the keys to the values.\n\n"

[reference.text.text.text.fill.details]
en = "The glyph fill paint.\n\n"

[reference.text.text.text.font.details]
en = "A font family descriptor or priority list of font family descriptor.\n\nA font family descriptor can be a plain string representing the family\nname or a dictionary with the following keys:\n\n- `name` (required): The font family name.\n- `covers` (optional): Defines the Unicode codepoints for which the\n  family shall be used. This can be:\n  - A predefined coverage set:\n    - `{\"latin-in-cjk\"}` covers all codepoints except for those which\n      exist in Latin fonts, but should preferrably be taken from CJK\n      fonts.\n  - A [regular expression]($regex) that defines exactly which codepoints\n    shall be covered. Accepts only the subset of regular expressions\n    which consist of exactly one dot, letter, or character class.\n\nWhen processing text, Typst tries all specified font families in order\nuntil it finds a font that has the necessary glyphs. In the example\nbelow, the font `Inria Serif` is preferred, but since it does not\ncontain Arabic glyphs, the arabic text uses `Noto Sans Arabic` instead.\n\nThe collection of available fonts differs by platform:\n\n- In the web app, you can see the list of available fonts by clicking on\n  the \"Ag\" button. You can provide additional fonts by uploading `.ttf`\n  or `.otf` files into your project. They will be discovered\n  automatically. The priority is: project fonts > server fonts.\n\n- Locally, Typst uses your installed system fonts or embedded fonts in\n  the CLI, which are `Libertinus Serif`, `New Computer Modern`,\n  `New Computer Modern Math`, and `DejaVu Sans Mono`. In addition, you\n  can use the `--font-path` argument or `TYPST_FONT_PATHS` environment\n  variable to add directories that should be scanned for fonts. The\n  priority is: `--font-paths` > system fonts > embedded fonts. Run\n  `typst fonts` to see the fonts that Typst has discovered on your\n  system. Note that you can pass the `--ignore-system-fonts` parameter\n  to the CLI to ensure Typst won't search for system fonts.\n\n"

[reference.text.text.text.fractions.details]
en = "Whether to turn numbers into fractions. Setting this to `{true}`\nenables the OpenType `frac` font feature.\n\nIt is not advisable to enable this property globally as it will mess\nwith all appearances of numbers after a slash (e.g., in URLs). Instead,\nenable it locally when you want a fraction.\n\n"

[reference.text.text.text.historical-ligatures.details]
en = "Whether historical ligatures are active. Setting this to `{true}`\nenables the OpenType `hlig` font feature."

[reference.text.text.text.hyphenate.details]
en = "Whether to hyphenate text to improve line breaking. When `{auto}`, text\nwill be hyphenated if and only if justification is enabled.\n\nSetting the [text language]($text.lang) ensures that the correct\nhyphenation patterns are used.\n\n"

[reference.text.text.text.kerning.details]
en = "Whether to apply kerning.\n\nWhen enabled, specific letter pairings move closer together or further\napart for a more visually pleasing result. The example below\ndemonstrates how decreasing the gap between the \"T\" and \"o\" results in a\nmore natural look. Setting this to `{false}` disables kerning by turning\noff the OpenType `kern` font feature.\n\n"

[reference.text.text.text.lang.details]
en = "An [ISO 639-1/2/3 language code.](https://en.wikipedia.org/wiki/ISO_639)\n\nSetting the correct language affects various parts of Typst:\n\n- The text processing pipeline can make more informed choices.\n- Hyphenation will use the correct patterns for the language.\n- [Smart quotes]($smartquote) turns into the correct quotes for the\n  language.\n- And all other things which are language-aware.\n\n"

[reference.text.text.text.ligatures.details]
en = "Whether standard ligatures are active.\n\nCertain letter combinations like \"fi\" are often displayed as a single\nmerged glyph called a _ligature._ Setting this to `{false}` disables\nthese ligatures by turning off the OpenType `liga` and `clig` font\nfeatures.\n\n"

[reference.text.text.text.number-type.details]
en = "Which kind of numbers / figures to select. When set to `{auto}`, the\ndefault numbers for the font are used.\n\n"

[reference.text.text.text.number-width.details]
en = "The width of numbers / figures. When set to `{auto}`, the default\nnumbers for the font are used.\n\n"

[reference.text.text.text.oneliner]
en = "Customizes the look and layout of text in a variety of ways."

[reference.text.text.text.overhang.details]
en = "Whether certain glyphs can hang over into the margin in justified text.\nThis can make justification visually more pleasing.\n\n"

[reference.text.text.text.region.details]
en = "An [ISO 3166-1 alpha-2 region code.](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n\nThis lets the text processing pipeline make more informed choices."

[reference.text.text.text.script.details]
en = "The OpenType writing script.\n\nThe combination of `{lang}` and `{script}` determine how font features,\nsuch as glyph substitution, are implemented. Frequently the value is a\nmodified (all-lowercase) ISO 15924 script identifier, and the `math`\nwriting script is used for features appropriate for mathematical\nsymbols.\n\nWhen set to `{auto}`, the default and recommended setting, an\nappropriate script is chosen for each block of characters sharing a\ncommon Unicode script property.\n\n"

[reference.text.text.text.size.details]
en = "The size of the glyphs. This value forms the basis of the `em` unit:\n`{1em}` is equivalent to the font size.\n\nYou can also give the font size itself in `em` units. Then, it is\nrelative to the previous font size.\n\n"

[reference.text.text.text.slashed-zero.details]
en = "Whether to have a slash through the zero glyph. Setting this to `{true}`\nenables the OpenType `zero` font feature.\n\n"

[reference.text.text.text.spacing.details]
en = "The amount of space between words.\n\nCan be given as an absolute length, but also relative to the width of\nthe space character in the font.\n\nIf you want to adjust the amount of space between characters rather than\nwords, use the [`tracking`]($text.tracking) property instead.\n\n"

[reference.text.text.text.stretch.details]
en = "The desired width of the glyphs. Accepts a ratio between `{50%}` and\n`{200%}`. When the desired width is not available, Typst selects the\nfont from the family that is closest in stretch. This will only stretch\nthe text if a condensed or expanded version of the font is available.\n\nIf you want to adjust the amount of space between characters instead of\nstretching the glyphs itself, use the [`tracking`]($text.tracking)\nproperty instead.\n\n"

[reference.text.text.text.stroke.details]
en = "How to stroke the text.\n\n"

[reference.text.text.text.style.details]
en = "The desired font style.\n\nWhen an italic style is requested and only an oblique one is available,\nit is used. Similarly, the other way around, an italic style can stand\nin for an oblique one.  When neither an italic nor an oblique style is\navailable, Typst selects the normal style. Since most fonts are only\navailable either in an italic or oblique style, the difference between\nitalic and oblique style is rarely observable.\n\nIf you want to emphasize your text, you should do so using the [emph]\nfunction instead. This makes it easy to adapt the style later if you\nchange your mind about how to signify the emphasis.\n\n"

[reference.text.text.text.stylistic-set.details]
en = "Which stylistic sets to apply. Font designers can categorize alternative\nglyphs forms into stylistic sets. As this value is highly font-specific,\nyou need to consult your font to know which sets are available.\n\nThis can be set to an integer or an array of integers, all\nof which must be between `{1}` and `{20}`, enabling the\ncorresponding OpenType feature(s) from `ss01` to `ss20`.\nSetting this to `{none}` will disable all stylistic sets.\n\n"

[reference.text.text.text.text.details]
en = "The text."

[reference.text.text.text.title]
en = "Text"

[reference.text.text.text.top-edge.details]
en = "The top end of the conceptual frame around the text used for layout and\npositioning. This affects the size of containers that hold text.\n\n"

[reference.text.text.text.tracking.details]
en = "The amount of space that should be added between characters.\n\n"

[reference.text.text.text.weight.details]
en = "The desired thickness of the font's glyphs. Accepts an integer between\n`{100}` and `{900}` or one of the predefined weight names. When the\ndesired weight is not available, Typst selects the font from the family\nthat is closest in weight.\n\nIf you want to strongly emphasize your text, you should do so using the\n[strong] function instead. This makes it easy to adapt the style later\nif you change your mind about how to signify the strong emphasis.\n\n"

[reference.text.text.title]
en = "Text"

[reference.text.title]
en = "Text"

[reference.text.underline.description]
en = "Documentation for the `underline` function."

[reference.text.underline.oneliner]
en = "Underlines text."

[reference.text.underline.title]
en = "Underline"

[reference.text.underline.underline.background.details]
en = "Whether the line is placed behind the content it underlines.\n\n"

[reference.text.underline.underline.body.details]
en = "The content to underline."

[reference.text.underline.underline.details]
en = "Underlines text.\n\n# Example\n```example\nThis is #underline[important].\n```"

[reference.text.underline.underline.evade.details]
en = "Whether the line skips sections in which it would collide with the\nglyphs.\n\n"

[reference.text.underline.underline.extent.details]
en = "The amount by which to extend the line beyond (or within if negative)\nthe content.\n\n"

[reference.text.underline.underline.offset.details]
en = "The position of the line relative to the baseline, read from the font\ntables if `{auto}`.\n\n"

[reference.text.underline.underline.oneliner]
en = "Underlines text."

[reference.text.underline.underline.stroke.details]
en = "How to [stroke] the line.\n\nIf set to `{auto}`, takes on the text's color and a thickness defined in\nthe current font.\n\n"

[reference.text.underline.underline.title]
en = "Underline"

[reference.text.upper.description]
en = "Documentation for the `upper` function."

[reference.text.upper.oneliner]
en = "Converts a string or content to uppercase."

[reference.text.upper.title]
en = "Uppercase"

[reference.text.upper.upper.details]
en = "Converts a string or content to uppercase.\n\n# Example\n```example\n#upper(\"abc\") \\\n#upper[*my text*] \\\n#upper[ALREADY HIGH]\n```"

[reference.text.upper.upper.oneliner]
en = "Converts a string or content to uppercase."

[reference.text.upper.upper.text.details]
en = "The text to convert to uppercase."

[reference.text.upper.upper.title]
en = "Uppercase"

[reference.title]
en = "Reference"

[reference.visualize.circle.circle.body.details]
en = "The content to place into the circle. The circle expands to fit this\ncontent, keeping the 1-1 aspect ratio."

[reference.visualize.circle.circle.details]
en = "A circle with optional content.\n\n# Example\n```example\n// Without content.\n#circle(radius: 25pt)\n\n// With content.\n#circle[\n  #set align(center + horizon)\n  Automatically \\\n  sized to fit.\n]\n```"

[reference.visualize.circle.circle.fill.details]
en = "How to fill the circle. See the [rectangle's documentation]($rect.fill)\nfor more details."

[reference.visualize.circle.circle.height.details]
en = "The circle's height. This is mutually exclusive with `radius` and\n`width`.\n\nIn contrast to `radius`, this can be relative to the parent container's\nheight."

[reference.visualize.circle.circle.inset.details]
en = "How much to pad the circle's content. See the\n[box's documentation]($box.inset) for more details."

[reference.visualize.circle.circle.oneliner]
en = "A circle with optional content."

[reference.visualize.circle.circle.outset.details]
en = "How much to expand the circle's size without affecting the layout. See\nthe [box's documentation]($box.outset) for more details."

[reference.visualize.circle.circle.radius.details]
en = "The circle's radius. This is mutually exclusive with `width` and\n`height`."

[reference.visualize.circle.circle.stroke.details]
en = "How to stroke the circle. See the\n[rectangle's documentation]($rect.stroke) for more details."

[reference.visualize.circle.circle.title]
en = "Circle"

[reference.visualize.circle.circle.width.details]
en = "The circle's width. This is mutually exclusive with `radius` and\n`height`.\n\nIn contrast to `radius`, this can be relative to the parent container's\nwidth."

[reference.visualize.circle.description]
en = "Documentation for the `circle` function."

[reference.visualize.circle.oneliner]
en = "A circle with optional content."

[reference.visualize.circle.title]
en = "Circle"

[reference.visualize.color.color.cmyk.color.details]
en = "Alternatively: The color to convert to CMYK.\n\nIf this is given, the individual components should not be given."

[reference.visualize.color.color.cmyk.cyan.details]
en = "The cyan component."

[reference.visualize.color.color.cmyk.details]
en = "Create a CMYK color.\n\nThis is useful if you want to target a specific printer. The conversion\nto RGB for display preview might differ from how your printer reproduces\nthe color.\n\nA CMYK color is represented internally by an array of four components:\n- cyan ([`ratio`])\n- magenta ([`ratio`])\n- yellow ([`ratio`])\n- key ([`ratio`])\n\nThese components are also available using the\n[`components`]($color.components) method.\n\nNote that CMYK colors are not currently supported when PDF/A output is\nenabled.\n\n"

[reference.visualize.color.color.cmyk.key.details]
en = "The key component."

[reference.visualize.color.color.cmyk.magenta.details]
en = "The magenta component."

[reference.visualize.color.color.cmyk.oneliner]
en = "Create a CMYK color."

[reference.visualize.color.color.cmyk.title]
en = "CMYK"

[reference.visualize.color.color.cmyk.yellow.details]
en = "The yellow component."

[reference.visualize.color.color.components.alpha.details]
en = "Whether to include the alpha component."

[reference.visualize.color.color.components.details]
en = "Extracts the components of this color.\n\nThe size and values of this array depends on the color space. You can\nobtain the color space using [`space`]($color.space). Below is a table\nof the color spaces and their components:\n\n|       Color space       |     C1    |     C2     |     C3    |   C4   |\n|-------------------------|-----------|------------|-----------|--------|\n| [`luma`]($color.luma)   | Lightness |            |           |        |\n| [`oklab`]($color.oklab) | Lightness |    `a`     |    `b`    |  Alpha |\n| [`oklch`]($color.oklch) | Lightness |   Chroma   |    Hue    |  Alpha |\n| [`linear-rgb`]($color.linear-rgb) | Red  |   Green |    Blue |  Alpha |\n| [`rgb`]($color.rgb)     |    Red    |   Green    |    Blue   |  Alpha |\n| [`cmyk`]($color.cmyk)   |    Cyan   |   Magenta  |   Yellow  |  Key   |\n| [`hsl`]($color.hsl)     |     Hue   | Saturation | Lightness |  Alpha |\n| [`hsv`]($color.hsv)     |     Hue   | Saturation |   Value   |  Alpha |\n\nFor the meaning and type of each individual value, see the documentation\nof the corresponding color space. The alpha component is optional and\nonly included if the `alpha` argument is `true`. The length of the\nreturned array depends on the number of components and whether the alpha\ncomponent is included.\n\n"

[reference.visualize.color.color.components.oneliner]
en = "Extracts the components of this color."

[reference.visualize.color.color.components.title]
en = "Components"

[reference.visualize.color.color.darken.details]
en = "Darkens a color by a given factor."

[reference.visualize.color.color.darken.factor.details]
en = "The factor to darken the color by."

[reference.visualize.color.color.darken.oneliner]
en = "Darkens a color by a given factor."

[reference.visualize.color.color.darken.title]
en = "Darken"

[reference.visualize.color.color.desaturate.details]
en = "Decreases the saturation of a color by a given factor."

[reference.visualize.color.color.desaturate.factor.details]
en = "The factor to desaturate the color by."

[reference.visualize.color.color.desaturate.oneliner]
en = "Decreases the saturation of a color by a given factor."

[reference.visualize.color.color.desaturate.title]
en = "Desaturate"

[reference.visualize.color.color.details]
en = "A color in a specific color space.\n\nTypst supports:\n- sRGB through the [`rgb` function]($color.rgb)\n- Device CMYK through [`cmyk` function]($color.cmyk)\n- D65 Gray through the [`luma` function]($color.luma)\n- Oklab through the [`oklab` function]($color.oklab)\n- Oklch through the [`oklch` function]($color.oklch)\n- Linear RGB through the [`color.linear-rgb` function]($color.linear-rgb)\n- HSL through the [`color.hsl` function]($color.hsl)\n- HSV through the [`color.hsv` function]($color.hsv)\n\n\n# Example\n\n```example\n#rect(fill: aqua)\n```\n\n# Predefined colors\nTypst defines the following built-in colors:\n\n| Color     | Definition         |\n|-----------|:-------------------|\n| `black`   | `{luma(0)}`        |\n| `gray`    | `{luma(170)}`      |\n| `silver`  | `{luma(221)}`      |\n| `white`   | `{luma(255)}`      |\n| `navy`    | `{rgb(\"#001f3f\")}` |\n| `blue`    | `{rgb(\"#0074d9\")}` |\n| `aqua`    | `{rgb(\"#7fdbff\")}` |\n| `teal`    | `{rgb(\"#39cccc\")}` |\n| `eastern` | `{rgb(\"#239dad\")}` |\n| `purple`  | `{rgb(\"#b10dc9\")}` |\n| `fuchsia` | `{rgb(\"#f012be\")}` |\n| `maroon`  | `{rgb(\"#85144b\")}` |\n| `red`     | `{rgb(\"#ff4136\")}` |\n| `orange`  | `{rgb(\"#ff851b\")}` |\n| `yellow`  | `{rgb(\"#ffdc00\")}` |\n| `olive`   | `{rgb(\"#3d9970\")}` |\n| `green`   | `{rgb(\"#2ecc40\")}` |\n| `lime`    | `{rgb(\"#01ff70\")}` |\n\nThe predefined colors and the most important color constructors are\navailable globally and also in the color type's scope, so you can write\neither `color.red` or just `red`.\n\n```preview\n#let colors = (\n  \"black\", \"gray\", \"silver\", \"white\",\n  \"navy\", \"blue\", \"aqua\", \"teal\",\n  \"eastern\", \"purple\", \"fuchsia\",\n  \"maroon\", \"red\", \"orange\", \"yellow\",\n  \"olive\", \"green\", \"lime\",\n)\n\n#set text(font: \"PT Sans\")\n#set page(width: auto)\n#grid(\n  columns: 9,\n  gutter: 10pt,\n  ..colors.map(name => {\n      let col = eval(name)\n      let luminance = luma(col).components().first()\n      set text(fill: white) if luminance < 50%\n      set square(stroke: black) if col == white\n      set align(center + horizon)\n      square(size: 50pt,  fill: col, name)\n  })\n)\n```\n\n# Predefined color maps\nTypst also includes a number of preset color maps that can be used for\n[gradients]($gradient.linear). These are simply arrays of colors defined in\nthe module `color.map`.\n\n```example\n#circle(fill: gradient.linear(..color.map.crest))\n```\n\n| Map        | Details                                                     |\n|------------|:------------------------------------------------------------|\n| `turbo`    | A perceptually uniform rainbow-like color map. Read [this blog post](https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html) for more details. |\n| `cividis`  | A blue to gray to yellow color map. See [this blog post](https://bids.github.io/colormap/) for more details. |\n| `rainbow`  | Cycles through the full color spectrum. This color map is best used by setting the interpolation color space to [HSL]($color.hsl). The rainbow gradient is **not suitable** for data visualization because it is not perceptually uniform, so the differences between values become unclear to your readers. It should only be used for decorative purposes. |\n| `spectral` | Red to yellow to blue color map.                            |\n| `viridis`  | A purple to teal to yellow color map.                       |\n| `inferno`  | A black to red to yellow color map.                         |\n| `magma`    | A black to purple to yellow color map.                      |\n| `plasma`   | A purple to pink to yellow color map.                       |\n| `rocket`   | A black to red to white color map.                          |\n| `mako`     | A black to teal to yellow color map.                        |\n| `vlag`     | A light blue to white to red color map.                     |\n| `icefire`  | A light teal to black to yellow color map.                  |\n| `flare`    | A orange to purple color map that is perceptually uniform.  |\n| `crest`    | A blue to white to red color map.                           |\n\nSome popular presets are not included because they are not available under a\nfree licence. Others, like\n[Jet](https://jakevdp.github.io/blog/2014/10/16/how-bad-is-your-colormap/),\nare not included because they are not color blind friendly. Feel free to use\nor create a package with other presets that are useful to you!\n\n```preview\n#set page(width: auto, height: auto)\n#set text(font: \"PT Sans\", size: 8pt)\n\n#let maps = (\n  \"turbo\", \"cividis\", \"rainbow\", \"spectral\",\n  \"viridis\", \"inferno\", \"magma\", \"plasma\",\n  \"rocket\", \"mako\", \"vlag\", \"icefire\",\n  \"flare\", \"crest\",\n)\n\n#stack(dir: ltr, spacing: 3pt, ..maps.map((name) => {\n  let map = eval(\"color.map.\" + name)\n  stack(\n    dir: ttb,\n    block(\n      width: 15pt,\n      height: 100pt,\n      fill: gradient.linear(..map, angle: 90deg),\n    ),\n    block(\n      width: 15pt,\n      height: 32pt,\n      move(dy: 8pt, rotate(90deg, name)),\n    ),\n  )\n}))\n```"

[reference.visualize.color.color.hsl.alpha.details]
en = "The alpha component."

[reference.visualize.color.color.hsl.color.details]
en = "Alternatively: The color to convert to HSL.\n\nIf this is given, the individual components should not be given."

[reference.visualize.color.color.hsl.details]
en = "Create an HSL color.\n\nThis color space is useful for specifying colors by hue, saturation and\nlightness. It is also useful for color manipulation, such as saturating\nwhile keeping perceived hue.\n\nAn HSL color is represented internally by an array of four components:\n- hue ([`angle`])\n- saturation ([`ratio`])\n- lightness ([`ratio`])\n- alpha ([`ratio`])\n\nThese components are also available using the\n[`components`]($color.components) method.\n\n"

[reference.visualize.color.color.hsl.hue.details]
en = "The hue angle."

[reference.visualize.color.color.hsl.lightness.details]
en = "The lightness component."

[reference.visualize.color.color.hsl.oneliner]
en = "Create an HSL color."

[reference.visualize.color.color.hsl.saturation.details]
en = "The saturation component."

[reference.visualize.color.color.hsl.title]
en = "HSL"

[reference.visualize.color.color.hsv.alpha.details]
en = "The alpha component."

[reference.visualize.color.color.hsv.color.details]
en = "Alternatively: The color to convert to HSL.\n\nIf this is given, the individual components should not be given."

[reference.visualize.color.color.hsv.details]
en = "Create an HSV color.\n\nThis color space is useful for specifying colors by hue, saturation and\nvalue. It is also useful for color manipulation, such as saturating\nwhile keeping perceived hue.\n\nAn HSV color is represented internally by an array of four components:\n- hue ([`angle`])\n- saturation ([`ratio`])\n- value ([`ratio`])\n- alpha ([`ratio`])\n\nThese components are also available using the\n[`components`]($color.components) method.\n\n"

[reference.visualize.color.color.hsv.hue.details]
en = "The hue angle."

[reference.visualize.color.color.hsv.oneliner]
en = "Create an HSV color."

[reference.visualize.color.color.hsv.saturation.details]
en = "The saturation component."

[reference.visualize.color.color.hsv.title]
en = "HSV"

[reference.visualize.color.color.hsv.value.details]
en = "The value component."

[reference.visualize.color.color.lighten.details]
en = "Lightens a color by a given factor."

[reference.visualize.color.color.lighten.factor.details]
en = "The factor to lighten the color by."

[reference.visualize.color.color.lighten.oneliner]
en = "Lightens a color by a given factor."

[reference.visualize.color.color.lighten.title]
en = "Lighten"

[reference.visualize.color.color.linear-rgb.alpha.details]
en = "The alpha component."

[reference.visualize.color.color.linear-rgb.blue.details]
en = "The blue component."

[reference.visualize.color.color.linear-rgb.color.details]
en = "Alternatively: The color to convert to linear RGB(A).\n\nIf this is given, the individual components should not be given."

[reference.visualize.color.color.linear-rgb.details]
en = "Create an RGB(A) color with linear luma.\n\nThis color space is similar to sRGB, but with the distinction that the\ncolor component are not gamma corrected. This makes it easier to perform\ncolor operations such as blending and interpolation. Although, you\nshould prefer to use the [`oklab` function]($color.oklab) for these.\n\nA linear RGB(A) color is represented internally by an array of four\ncomponents:\n- red ([`ratio`])\n- green ([`ratio`])\n- blue ([`ratio`])\n- alpha ([`ratio`])\n\nThese components are also available using the\n[`components`]($color.components) method.\n\n"

[reference.visualize.color.color.linear-rgb.green.details]
en = "The green component."

[reference.visualize.color.color.linear-rgb.oneliner]
en = "Create an RGB(A) color with linear luma."

[reference.visualize.color.color.linear-rgb.red.details]
en = "The red component."

[reference.visualize.color.color.linear-rgb.title]
en = "Linear RGB"

[reference.visualize.color.color.luma.alpha.details]
en = "The alpha component."

[reference.visualize.color.color.luma.color.details]
en = "Alternatively: The color to convert to grayscale.\n\nIf this is given, the `lightness` should not be given."

[reference.visualize.color.color.luma.details]
en = "Create a grayscale color.\n\nA grayscale color is represented internally by a single `lightness`\ncomponent.\n\nThese components are also available using the\n[`components`]($color.components) method.\n\n"

[reference.visualize.color.color.luma.lightness.details]
en = "The lightness component."

[reference.visualize.color.color.luma.oneliner]
en = "Create a grayscale color."

[reference.visualize.color.color.luma.title]
en = "Luma"

[reference.visualize.color.color.mix.colors.details]
en = "The colors, optionally with weights, specified as a pair (array of\nlength two) of color and weight (float or ratio).\n\nThe weights do not need to add to `{100%}`, they are relative to the\nsum of all weights."

[reference.visualize.color.color.mix.details]
en = "Create a color by mixing two or more colors.\n\nIn color spaces with a hue component (hsl, hsv, oklch), only two colors\ncan be mixed at once. Mixing more than two colors in such a space will\nresult in an error!\n\n"

[reference.visualize.color.color.mix.oneliner]
en = "Create a color by mixing two or more colors."

[reference.visualize.color.color.mix.space.details]
en = "The color space to mix in. By default, this happens in a perceptual\ncolor space ([`oklab`]($color.oklab))."

[reference.visualize.color.color.mix.title]
en = "Mix"

[reference.visualize.color.color.negate.details]
en = "Produces the complementary color using a provided color space.\nYou can think of it as the opposite side on a color wheel.\n\n"

[reference.visualize.color.color.negate.oneliner]
en = "Produces the complementary color using a provided color space."

[reference.visualize.color.color.negate.space.details]
en = "The color space used for the transformation. By default, a perceptual color space is used."

[reference.visualize.color.color.negate.title]
en = "Negate"

[reference.visualize.color.color.oklab.a.details]
en = "The a (\"green/red\") component."

[reference.visualize.color.color.oklab.alpha.details]
en = "The alpha component."

[reference.visualize.color.color.oklab.b.details]
en = "The b (\"blue/yellow\") component."

[reference.visualize.color.color.oklab.color.details]
en = "Alternatively: The color to convert to Oklab.\n\nIf this is given, the individual components should not be given."

[reference.visualize.color.color.oklab.details]
en = "Create an [Oklab](https://bottosson.github.io/posts/oklab/) color.\n\nThis color space is well suited for the following use cases:\n- Color manipulation such as saturating while keeping perceived hue\n- Creating grayscale images with uniform perceived lightness\n- Creating smooth and uniform color transition and gradients\n\nA linear Oklab color is represented internally by an array of four\ncomponents:\n- lightness ([`ratio`])\n- a ([`float`] or [`ratio`].\n  Ratios are relative to `{0.4}`; meaning `{50%}` is equal to `{0.2}`)\n- b ([`float`] or [`ratio`].\n  Ratios are relative to `{0.4}`; meaning `{50%}` is equal to `{0.2}`)\n- alpha ([`ratio`])\n\nThese components are also available using the\n[`components`]($color.components) method.\n\n"

[reference.visualize.color.color.oklab.lightness.details]
en = "The lightness component."

[reference.visualize.color.color.oklab.oneliner]
en = "Create an [Oklab](https://bottosson.github.io/posts/oklab/) color."

[reference.visualize.color.color.oklab.title]
en = "Oklab"

[reference.visualize.color.color.oklch.alpha.details]
en = "The alpha component."

[reference.visualize.color.color.oklch.chroma.details]
en = "The chroma component."

[reference.visualize.color.color.oklch.color.details]
en = "Alternatively: The color to convert to Oklch.\n\nIf this is given, the individual components should not be given."

[reference.visualize.color.color.oklch.details]
en = "Create an [Oklch](https://bottosson.github.io/posts/oklab/) color.\n\nThis color space is well suited for the following use cases:\n- Color manipulation involving lightness, chroma, and hue\n- Creating grayscale images with uniform perceived lightness\n- Creating smooth and uniform color transition and gradients\n\nA linear Oklch color is represented internally by an array of four\ncomponents:\n- lightness ([`ratio`])\n- chroma ([`float`] or [`ratio`].\n  Ratios are relative to `{0.4}`; meaning `{50%}` is equal to `{0.2}`)\n- hue ([`angle`])\n- alpha ([`ratio`])\n\nThese components are also available using the\n[`components`]($color.components) method.\n\n"

[reference.visualize.color.color.oklch.hue.details]
en = "The hue component."

[reference.visualize.color.color.oklch.lightness.details]
en = "The lightness component."

[reference.visualize.color.color.oklch.oneliner]
en = "Create an [Oklch](https://bottosson.github.io/posts/oklab/) color."

[reference.visualize.color.color.oklch.title]
en = "Oklch"

[reference.visualize.color.color.oneliner]
en = "A color in a specific color space."

[reference.visualize.color.color.opacify.details]
en = "Makes a color more opaque by a given scale.\n\nThis method is relative to the existing alpha value.\nIf the scale is positive, calculates `alpha + scale - alpha * scale`.\nNegative scales behave like `color.transparentize(-scale)`.\n\n"

[reference.visualize.color.color.opacify.oneliner]
en = "Makes a color more opaque by a given scale."

[reference.visualize.color.color.opacify.scale.details]
en = "The scale to change the alpha value by."

[reference.visualize.color.color.opacify.title]
en = "Opacify"

[reference.visualize.color.color.rgb.alpha.details]
en = "The alpha component."

[reference.visualize.color.color.rgb.blue.details]
en = "The blue component."

[reference.visualize.color.color.rgb.color.details]
en = "Alternatively: The color to convert to RGB(a).\n\nIf this is given, the individual components should not be given."

[reference.visualize.color.color.rgb.details]
en = "Create an RGB(A) color.\n\nThe color is specified in the sRGB color space.\n\nAn RGB(A) color is represented internally by an array of four components:\n- red ([`ratio`])\n- green ([`ratio`])\n- blue ([`ratio`])\n- alpha ([`ratio`])\n\nThese components are also available using the [`components`]($color.components)\nmethod.\n\n"

[reference.visualize.color.color.rgb.green.details]
en = "The green component."

[reference.visualize.color.color.rgb.hex.details]
en = "Alternatively: The color in hexadecimal notation.\n\nAccepts three, four, six or eight hexadecimal digits and optionally\na leading hash.\n\nIf this is given, the individual components should not be given.\n\n"

[reference.visualize.color.color.rgb.oneliner]
en = "Create an RGB(A) color."

[reference.visualize.color.color.rgb.red.details]
en = "The red component."

[reference.visualize.color.color.rgb.title]
en = "RGB"

[reference.visualize.color.color.rotate.angle.details]
en = "The angle to rotate the hue by."

[reference.visualize.color.color.rotate.details]
en = "Rotates the hue of the color by a given angle."

[reference.visualize.color.color.rotate.oneliner]
en = "Rotates the hue of the color by a given angle."

[reference.visualize.color.color.rotate.space.details]
en = "The color space used to rotate. By default, this happens in a perceptual\ncolor space ([`oklch`]($color.oklch))."

[reference.visualize.color.color.rotate.title]
en = "Rotate"

[reference.visualize.color.color.saturate.details]
en = "Increases the saturation of a color by a given factor."

[reference.visualize.color.color.saturate.factor.details]
en = "The factor to saturate the color by."

[reference.visualize.color.color.saturate.oneliner]
en = "Increases the saturation of a color by a given factor."

[reference.visualize.color.color.saturate.title]
en = "Saturate"

[reference.visualize.color.color.space.details]
en = "Returns the constructor function for this color's space:\n- [`luma`]($color.luma)\n- [`oklab`]($color.oklab)\n- [`oklch`]($color.oklch)\n- [`linear-rgb`]($color.linear-rgb)\n- [`rgb`]($color.rgb)\n- [`cmyk`]($color.cmyk)\n- [`hsl`]($color.hsl)\n- [`hsv`]($color.hsv)\n\n"

[reference.visualize.color.color.space.oneliner]
en = "Returns the constructor function for this color's space:"

[reference.visualize.color.color.space.title]
en = "Space"

[reference.visualize.color.color.title]
en = "Color"

[reference.visualize.color.color.to-hex.details]
en = "Returns the color's RGB(A) hex representation (such as `#ffaa32` or\n`#020304fe`). The alpha component (last two digits in `#020304fe`) is\nomitted if it is equal to `ff` (255 / 100%)."

[reference.visualize.color.color.to-hex.oneliner]
en = "Returns the color's RGB(A) hex representation (such as `#ffaa32` or"

[reference.visualize.color.color.to-hex.title]
en = "To Hex"

[reference.visualize.color.color.transparentize.details]
en = "Makes a color more transparent by a given factor.\n\nThis method is relative to the existing alpha value.\nIf the scale is positive, calculates `alpha - alpha * scale`.\nNegative scales behave like `color.opacify(-scale)`.\n\n"

[reference.visualize.color.color.transparentize.oneliner]
en = "Makes a color more transparent by a given factor."

[reference.visualize.color.color.transparentize.scale.details]
en = "The factor to change the alpha value by."

[reference.visualize.color.color.transparentize.title]
en = "Transparentize"

[reference.visualize.color.description]
en = "Documentation for the Color type."

[reference.visualize.color.oneliner]
en = "A color in a specific color space."

[reference.visualize.color.title]
en = "Color"

[reference.visualize.curve.curve.close.details]
en = "Closes the curve by adding a segment from the last point to the start of the\ncurve (or the last preceding `curve.move` point).\n\n"

[reference.visualize.curve.curve.close.mode.details]
en = "How to close the curve."

[reference.visualize.curve.curve.close.oneliner]
en = "Closes the curve by adding a segment from the last point to the start of the"

[reference.visualize.curve.curve.close.title]
en = "Curve Close"

[reference.visualize.curve.curve.components.details]
en = "The components of the curve, in the form of moves, line and Bézier\nsegment, and closes."

[reference.visualize.curve.curve.cubic.control-end.details]
en = "The control point going into the end point of the curve segment.\n\nIf set to `{none}`, the curve has no end control point, or equivalently,\nthe control point defaults to the curve's end point."

[reference.visualize.curve.curve.cubic.control-start.details]
en = "The control point going out from the start of the curve segment.\n\n- If `{auto}` and this element follows another `curve.cubic` element,\n  the last control point will be mirrored. In SVG terms, this makes\n  `curve.cubic` behave like the `S` operator instead of the `C` operator.\n\n- If `{none}`, the curve has no first control point, or equivalently,\n  the control point defaults to the curve's starting point.\n\n"

[reference.visualize.curve.curve.cubic.details]
en = "Adds a cubic Bézier curve segment from the last point to `end`, using\n`control-start` and `control-end` as the control points.\n\n"

[reference.visualize.curve.curve.cubic.end.details]
en = "The point at which the curve segment shall end."

[reference.visualize.curve.curve.cubic.oneliner]
en = "Adds a cubic Bézier curve segment from the last point to `end`, using"

[reference.visualize.curve.curve.cubic.relative.details]
en = "Whether the `control-start`, `control-end`, and `end` coordinates are\nrelative to the previous point."

[reference.visualize.curve.curve.cubic.title]
en = "Curve Cubic Segment"

[reference.visualize.curve.curve.details]
en = "A curve consisting of movements, lines, and Bézier segments.\n\nAt any point in time, there is a conceptual pen or cursor.\n- Move elements move the cursor without drawing.\n- Line/Quadratic/Cubic elements draw a segment from the cursor to a new\n  position, potentially with control point for a Bézier curve.\n- Close elements draw a straight or smooth line back to the start of the\n  curve or the latest preceding move segment.\n\nFor layout purposes, the bounding box of the curve is a tight rectangle\ncontaining all segments as well as the point `{(0pt, 0pt)}`.\n\nPositions may be specified absolutely (i.e. relatively to `{(0pt, 0pt)}`),\nor relative to the current pen/cursor position, that is, the position where\nthe previous segment ended.\n\nBézier curve control points can be skipped by passing `{none}` or\nautomatically mirrored from the preceding segment by passing `{auto}`.\n\n# Example\n```example\n#curve(\n  fill: blue.lighten(80%),\n  stroke: blue,\n  curve.move((0pt, 50pt)),\n  curve.line((100pt, 50pt)),\n  curve.cubic(none, (90pt, 0pt), (50pt, 0pt)),\n  curve.close(),\n)\n```"

[reference.visualize.curve.curve.fill-rule.details]
en = "The drawing rule used to fill the curve.\n\n"

[reference.visualize.curve.curve.fill.details]
en = "How to fill the curve.\n\nWhen setting a fill, the default stroke disappears. To create a\nrectangle with both fill and stroke, you have to configure both."

[reference.visualize.curve.curve.line.details]
en = "Adds a straight line from the current point to a following one.\n\n"

[reference.visualize.curve.curve.line.end.details]
en = "The point at which the line shall end."

[reference.visualize.curve.curve.line.oneliner]
en = "Adds a straight line from the current point to a following one."

[reference.visualize.curve.curve.line.relative.details]
en = "Whether the coordinates are relative to the previous point.\n\n"

[reference.visualize.curve.curve.line.title]
en = "Curve Line"

[reference.visualize.curve.curve.move.details]
en = "Starts a new curve component.\n\nIf no `curve.move` element is passed, the curve will start at\n`{(0pt, 0pt)}`.\n\n"

[reference.visualize.curve.curve.move.oneliner]
en = "Starts a new curve component."

[reference.visualize.curve.curve.move.relative.details]
en = "Whether the coordinates are relative to the previous point."

[reference.visualize.curve.curve.move.start.details]
en = "The starting point for the new component."

[reference.visualize.curve.curve.move.title]
en = "Curve Move"

[reference.visualize.curve.curve.oneliner]
en = "A curve consisting of movements, lines, and Bézier segments."

[reference.visualize.curve.curve.quad.control.details]
en = "The control point of the quadratic Bézier curve.\n\n- If `{auto}` and this segment follows another quadratic Bézier curve,\n  the previous control point will be mirrored.\n- If `{none}`, the control point defaults to `end`, and the curve will\n  be a straight line.\n\n"

[reference.visualize.curve.curve.quad.details]
en = "Adds a quadratic Bézier curve segment from the last point to `end`, using\n`control` as the control point.\n\n"

[reference.visualize.curve.curve.quad.end.details]
en = "The point at which the segment shall end."

[reference.visualize.curve.curve.quad.oneliner]
en = "Adds a quadratic Bézier curve segment from the last point to `end`, using"

[reference.visualize.curve.curve.quad.relative.details]
en = "Whether the `control` and `end` coordinates are relative to the previous\npoint."

[reference.visualize.curve.curve.quad.title]
en = "Curve Quadratic Segment"

[reference.visualize.curve.curve.stroke.details]
en = "How to [stroke] the curve. This can be:\n\nCan be set to `{none}` to disable the stroke or to `{auto}` for a\nstroke of `{1pt}` black if and if only if no fill is given.\n\n"

[reference.visualize.curve.curve.title]
en = "Curve"

[reference.visualize.curve.description]
en = "Documentation for the `curve` function."

[reference.visualize.curve.oneliner]
en = "A curve consisting of movements, lines, and Bézier segments."

[reference.visualize.curve.title]
en = "Curve"

[reference.visualize.description]
en = "Documentation for functions related to Visualize in Typst."

[reference.visualize.ellipse.description]
en = "Documentation for the `ellipse` function."

[reference.visualize.ellipse.ellipse.body.details]
en = "The content to place into the ellipse.\n\nWhen this is omitted, the ellipse takes on a default size of at most\n`{45pt}` by `{30pt}`."

[reference.visualize.ellipse.ellipse.details]
en = "An ellipse with optional content.\n\n# Example\n```example\n// Without content.\n#ellipse(width: 35%, height: 30pt)\n\n// With content.\n#ellipse[\n  #set align(center)\n  Automatically sized \\\n  to fit the content.\n]\n```"

[reference.visualize.ellipse.ellipse.fill.details]
en = "How to fill the ellipse. See the [rectangle's documentation]($rect.fill)\nfor more details."

[reference.visualize.ellipse.ellipse.height.details]
en = "The ellipse's height, relative to its parent container."

[reference.visualize.ellipse.ellipse.inset.details]
en = "How much to pad the ellipse's content. See the\n[box's documentation]($box.inset) for more details."

[reference.visualize.ellipse.ellipse.oneliner]
en = "An ellipse with optional content."

[reference.visualize.ellipse.ellipse.outset.details]
en = "How much to expand the ellipse's size without affecting the layout. See\nthe [box's documentation]($box.outset) for more details."

[reference.visualize.ellipse.ellipse.stroke.details]
en = "How to stroke the ellipse. See the\n[rectangle's documentation]($rect.stroke) for more details."

[reference.visualize.ellipse.ellipse.title]
en = "Ellipse"

[reference.visualize.ellipse.ellipse.width.details]
en = "The ellipse's width, relative to its parent container."

[reference.visualize.ellipse.oneliner]
en = "An ellipse with optional content."

[reference.visualize.ellipse.title]
en = "Ellipse"

[reference.visualize.gradient.description]
en = "Documentation for the Gradient type."

[reference.visualize.gradient.gradient.angle.details]
en = "Returns the angle of this gradient.\n\nReturns `{none}` if the gradient is neither linear nor conic."

[reference.visualize.gradient.gradient.angle.oneliner]
en = "Returns the angle of this gradient."

[reference.visualize.gradient.gradient.angle.title]
en = "Angle"

[reference.visualize.gradient.gradient.center.details]
en = "Returns the center of this gradient.\n\nReturns `{none}` if the gradient is neither radial nor conic."

[reference.visualize.gradient.gradient.center.oneliner]
en = "Returns the center of this gradient."

[reference.visualize.gradient.gradient.center.title]
en = "Center"

[reference.visualize.gradient.gradient.conic.angle.details]
en = "The angle of the gradient."

[reference.visualize.gradient.gradient.conic.center.details]
en = "The center of the last circle of the gradient.\n\nA value of `{(50%, 50%)}` means that the end circle is\ncentered inside of its container."

[reference.visualize.gradient.gradient.conic.details]
en = "Creates a new conic gradient, in which colors change radially around a\ncenter point.\n\nYou can control the center point of the gradient by using the `center`\nargument. By default, the center point is the center of the shape.\n\n"

[reference.visualize.gradient.gradient.conic.oneliner]
en = "Creates a new conic gradient, in which colors change radially around a"

[reference.visualize.gradient.gradient.conic.relative.details]
en = "The [relative placement](#relativeness) of the gradient.\n\nFor an element placed at the root/top level of the document, the parent\nis the page itself. For other elements, the parent is the innermost block,\nbox, column, grid, or stack that contains the element."

[reference.visualize.gradient.gradient.conic.space.details]
en = "The color space in which to interpolate the gradient.\n\nDefaults to a perceptually uniform color space called\n[Oklab]($color.oklab)."

[reference.visualize.gradient.gradient.conic.stops.details]
en = "The color [stops](#stops) of the gradient."

[reference.visualize.gradient.gradient.conic.title]
en = "Conic"

[reference.visualize.gradient.gradient.details]
en = "A color gradient.\n\nTypst supports linear gradients through the\n[`gradient.linear` function]($gradient.linear), radial gradients through\nthe [`gradient.radial` function]($gradient.radial), and conic gradients\nthrough the [`gradient.conic` function]($gradient.conic).\n\nA gradient can be used for the following purposes:\n- As a fill to paint the interior of a shape:\n  `{rect(fill: gradient.linear(..))}`\n- As a stroke to paint the outline of a shape:\n  `{rect(stroke: 1pt + gradient.linear(..))}`\n- As the fill of text:\n  `{set text(fill: gradient.linear(..))}`\n- As a color map you can [sample]($gradient.sample) from:\n  `{gradient.linear(..).sample(50%)}`\n\n# Examples\n```example\n>>> #set square(size: 50pt)\n#stack(\n  dir: ltr,\n  spacing: 1fr,\n  square(fill: gradient.linear(..color.map.rainbow)),\n  square(fill: gradient.radial(..color.map.rainbow)),\n  square(fill: gradient.conic(..color.map.rainbow)),\n)\n```\n\nGradients are also supported on text, but only when setting the\n[relativeness]($gradient.relative) to either `{auto}` (the default value) or\n`{\"parent\"}`. To create word-by-word or glyph-by-glyph gradients, you can\nwrap the words or characters of your text in [boxes]($box) manually or\nthrough a [show rule]($styling/#show-rules).\n\n```example\n>>> #set page(width: auto, height: auto, margin: 12pt)\n>>> #set text(size: 12pt)\n#set text(fill: gradient.linear(red, blue))\n#let rainbow(content) = {\n  set text(fill: gradient.linear(..color.map.rainbow))\n  box(content)\n}\n\nThis is a gradient on text, but with a #rainbow[twist]!\n```\n\n# Stops\nA gradient is composed of a series of stops. Each of these stops has a color\nand an offset. The offset is a [ratio]($ratio) between `{0%}` and `{100%}` or\nan angle between `{0deg}` and `{360deg}`. The offset is a relative position\nthat determines how far along the gradient the stop is located. The stop's\ncolor is the color of the gradient at that position. You can choose to omit\nthe offsets when defining a gradient. In this case, Typst will space all\nstops evenly.\n\n# Relativeness\nThe location of the `{0%}` and `{100%}` stops depends on the dimensions\nof a container. This container can either be the shape that it is being\npainted on, or the closest surrounding container. This is controlled by the\n`relative` argument of a gradient constructor. By default, gradients are\nrelative to the shape they are being painted on, unless the gradient is\napplied on text, in which case they are relative to the closest ancestor\ncontainer.\n\nTypst determines the ancestor container as follows:\n- For shapes that are placed at the root/top level of the document, the\n  closest ancestor is the page itself.\n- For other shapes, the ancestor is the innermost [`block`] or [`box`] that\n  contains the shape. This includes the boxes and blocks that are implicitly\n  created by show rules and elements. For example, a [`rotate`] will not\n  affect the parent of a gradient, but a [`grid`] will.\n\n# Color spaces and interpolation\nGradients can be interpolated in any color space. By default, gradients are\ninterpolated in the [Oklab]($color.oklab) color space, which is a\n[perceptually uniform](https://programmingdesignsystems.com/color/perceptually-uniform-color-spaces/index.html)\ncolor space. This means that the gradient will be perceived as having a\nsmooth progression of colors. This is particularly useful for data\nvisualization.\n\nHowever, you can choose to interpolate the gradient in any supported color\nspace you want, but beware that some color spaces are not suitable for\nperceptually interpolating between colors. Consult the table below when\nchoosing an interpolation space.\n\n|           Color space           | Perceptually uniform? |\n| ------------------------------- |-----------------------|\n| [Oklab]($color.oklab)           | *Yes*                 |\n| [Oklch]($color.oklch)           | *Yes*                 |\n| [sRGB]($color.rgb)              | *No*                  |\n| [linear-RGB]($color.linear-rgb) | *Yes*                 |\n| [CMYK]($color.cmyk)             | *No*                  |\n| [Grayscale]($color.luma)        | *Yes*                 |\n| [HSL]($color.hsl)               | *No*                  |\n| [HSV]($color.hsv)               | *No*                  |\n\n```preview\n>>> #set text(fill: white, font: \"IBM Plex Sans\", 8pt)\n>>> #set block(spacing: 0pt)\n#let spaces = (\n  (\"Oklab\", color.oklab),\n  (\"Oklch\", color.oklch),\n  (\"linear-RGB\", color.linear-rgb),\n  (\"sRGB\", color.rgb),\n  (\"CMYK\", color.cmyk),\n  (\"HSL\", color.hsl),\n  (\"HSV\", color.hsv),\n  (\"Grayscale\", color.luma),\n)\n\n#for (name, space) in spaces {\n  block(\n    width: 100%,\n    inset: 4pt,\n    fill: gradient.linear(\n      red,\n      blue,\n      space: space,\n    ),\n    strong(upper(name)),\n  )\n}\n```\n\n# Direction\nSome gradients are sensitive to direction. For example, a linear gradient\nhas an angle that determines its direction. Typst uses a clockwise angle,\nwith 0° being from left to right, 90° from top to bottom, 180° from right to\nleft, and 270° from bottom to top.\n\n```example\n>>> #set square(size: 50pt)\n#stack(\n  dir: ltr,\n  spacing: 1fr,\n  square(fill: gradient.linear(red, blue, angle: 0deg)),\n  square(fill: gradient.linear(red, blue, angle: 90deg)),\n  square(fill: gradient.linear(red, blue, angle: 180deg)),\n  square(fill: gradient.linear(red, blue, angle: 270deg)),\n)\n```\n\n# Presets\nTypst predefines color maps that you can use with your gradients. See the\n[`color`]($color/#predefined-color-maps) documentation for more details.\n\n# Note on file sizes\n\nGradients can be quite large, especially if they have many stops. This is\nbecause gradients are stored as a list of colors and offsets, which can\ntake up a lot of space. If you are concerned about file sizes, you should\nconsider the following:\n- SVG gradients are currently inefficiently encoded. This will be improved\n  in the future.\n- PDF gradients in the [`color.oklab`]($color.oklab), [`color.hsv`]($color.hsv),\n  [`color.hsl`]($color.hsl), and [`color.oklch`]($color.oklch) color spaces\n  are stored as a list of [`color.rgb`]($color.rgb) colors with extra stops\n  in between. This avoids needing to encode these color spaces in your PDF\n  file, but it does add extra stops to your gradient, which can increase\n  the file size."

[reference.visualize.gradient.gradient.focal-center.details]
en = "Returns the focal-center of this gradient.\n\nReturns `{none}` if the gradient is not radial."

[reference.visualize.gradient.gradient.focal-center.oneliner]
en = "Returns the focal-center of this gradient."

[reference.visualize.gradient.gradient.focal-center.title]
en = "Focal Center"

[reference.visualize.gradient.gradient.focal-radius.details]
en = "Returns the focal-radius of this gradient.\n\nReturns `{none}` if the gradient is not radial."

[reference.visualize.gradient.gradient.focal-radius.oneliner]
en = "Returns the focal-radius of this gradient."

[reference.visualize.gradient.gradient.focal-radius.title]
en = "Focal Radius"

[reference.visualize.gradient.gradient.kind.details]
en = "Returns the kind of this gradient."

[reference.visualize.gradient.gradient.kind.oneliner]
en = "Returns the kind of this gradient."

[reference.visualize.gradient.gradient.kind.title]
en = "Kind"

[reference.visualize.gradient.gradient.linear.angle.details]
en = "The angle of the gradient."

[reference.visualize.gradient.gradient.linear.details]
en = "Creates a new linear gradient, in which colors transition along a\nstraight line.\n\n"

[reference.visualize.gradient.gradient.linear.dir.details]
en = "The direction of the gradient."

[reference.visualize.gradient.gradient.linear.oneliner]
en = "Creates a new linear gradient, in which colors transition along a"

[reference.visualize.gradient.gradient.linear.relative.details]
en = "The [relative placement](#relativeness) of the gradient.\n\nFor an element placed at the root/top level of the document, the\nparent is the page itself. For other elements, the parent is the\ninnermost block, box, column, grid, or stack that contains the\nelement."

[reference.visualize.gradient.gradient.linear.space.details]
en = "The color space in which to interpolate the gradient.\n\nDefaults to a perceptually uniform color space called\n[Oklab]($color.oklab)."

[reference.visualize.gradient.gradient.linear.stops.details]
en = "The color [stops](#stops) of the gradient."

[reference.visualize.gradient.gradient.linear.title]
en = "Linear Gradient"

[reference.visualize.gradient.gradient.oneliner]
en = "A color gradient."

[reference.visualize.gradient.gradient.radial.center.details]
en = "The center of the end circle of the gradient.\n\nA value of `{(50%, 50%)}` means that the end circle is\ncentered inside of its container."

[reference.visualize.gradient.gradient.radial.details]
en = "Creates a new radial gradient, in which colors radiate away from an\norigin.\n\nThe gradient is defined by two circles: the focal circle and the end\ncircle. The focal circle is a circle with center `focal-center` and\nradius `focal-radius`, that defines the points at which the gradient\nstarts and has the color of the first stop. The end circle is a circle\nwith center `center` and radius `radius`, that defines the points at\nwhich the gradient ends and has the color of the last stop. The gradient\nis then interpolated between these two circles.\n\nUsing these four values, also called the focal point for the starting\ncircle and the center and radius for the end circle, we can define a\ngradient with more interesting properties than a basic radial gradient.\n\n"

[reference.visualize.gradient.gradient.radial.focal-center.details]
en = "The center of the focal circle of the gradient.\n\nThe focal center must be inside of the end circle.\n\nA value of `{(50%, 50%)}` means that the focal circle is\ncentered inside of its container.\n\nBy default it is set to the same as the center of the last circle."

[reference.visualize.gradient.gradient.radial.focal-radius.details]
en = "The radius of the focal circle of the gradient.\n\nThe focal center must be inside of the end circle.\n\nBy default, it is set to `{0%}`. The focal radius must be smaller\nthan the ending radius`."

[reference.visualize.gradient.gradient.radial.oneliner]
en = "Creates a new radial gradient, in which colors radiate away from an"

[reference.visualize.gradient.gradient.radial.radius.details]
en = "The radius of the end circle of the gradient.\n\nBy default, it is set to `{50%}`. The ending radius must be bigger\nthan the focal radius."

[reference.visualize.gradient.gradient.radial.relative.details]
en = "The [relative placement](#relativeness) of the gradient.\n\nFor an element placed at the root/top level of the document, the parent\nis the page itself. For other elements, the parent is the innermost block,\nbox, column, grid, or stack that contains the element."

[reference.visualize.gradient.gradient.radial.space.details]
en = "The color space in which to interpolate the gradient.\n\nDefaults to a perceptually uniform color space called\n[Oklab]($color.oklab)."

[reference.visualize.gradient.gradient.radial.stops.details]
en = "The color [stops](#stops) of the gradient."

[reference.visualize.gradient.gradient.radial.title]
en = "Radial"

[reference.visualize.gradient.gradient.radius.details]
en = "Returns the radius of this gradient.\n\nReturns `{none}` if the gradient is not radial."

[reference.visualize.gradient.gradient.radius.oneliner]
en = "Returns the radius of this gradient."

[reference.visualize.gradient.gradient.radius.title]
en = "Radius"

[reference.visualize.gradient.gradient.relative.details]
en = "Returns the relative placement of this gradient."

[reference.visualize.gradient.gradient.relative.oneliner]
en = "Returns the relative placement of this gradient."

[reference.visualize.gradient.gradient.relative.title]
en = "Relative"

[reference.visualize.gradient.gradient.repeat.details]
en = "Repeats this gradient a given number of times, optionally mirroring it\nat each repetition.\n\n"

[reference.visualize.gradient.gradient.repeat.mirror.details]
en = "Whether to mirror the gradient at each repetition."

[reference.visualize.gradient.gradient.repeat.oneliner]
en = "Repeats this gradient a given number of times, optionally mirroring it"

[reference.visualize.gradient.gradient.repeat.repetitions.details]
en = "The number of times to repeat the gradient."

[reference.visualize.gradient.gradient.repeat.title]
en = "Repeat"

[reference.visualize.gradient.gradient.sample.details]
en = "Sample the gradient at a given position.\n\nThe position is either a position along the gradient (a [ratio] between\n`{0%}` and `{100%}`) or an [angle]. Any value outside of this range will\nbe clamped."

[reference.visualize.gradient.gradient.sample.oneliner]
en = "Sample the gradient at a given position."

[reference.visualize.gradient.gradient.sample.t.details]
en = "The position at which to sample the gradient."

[reference.visualize.gradient.gradient.sample.title]
en = "Sample"

[reference.visualize.gradient.gradient.samples.details]
en = "Samples the gradient at multiple positions at once and returns the\nresults as an array."

[reference.visualize.gradient.gradient.samples.oneliner]
en = "Samples the gradient at multiple positions at once and returns the"

[reference.visualize.gradient.gradient.samples.title]
en = "Samples"

[reference.visualize.gradient.gradient.samples.ts.details]
en = "The positions at which to sample the gradient."

[reference.visualize.gradient.gradient.sharp.details]
en = "Creates a sharp version of this gradient.\n\nSharp gradients have discrete jumps between colors, instead of a\nsmooth transition. They are particularly useful for creating color\nlists for a preset gradient.\n\n"

[reference.visualize.gradient.gradient.sharp.oneliner]
en = "Creates a sharp version of this gradient."

[reference.visualize.gradient.gradient.sharp.smoothness.details]
en = "How much to smooth the gradient."

[reference.visualize.gradient.gradient.sharp.steps.details]
en = "The number of stops in the gradient."

[reference.visualize.gradient.gradient.sharp.title]
en = "Sharp"

[reference.visualize.gradient.gradient.space.details]
en = "Returns the mixing space of this gradient."

[reference.visualize.gradient.gradient.space.oneliner]
en = "Returns the mixing space of this gradient."

[reference.visualize.gradient.gradient.space.title]
en = "Space"

[reference.visualize.gradient.gradient.stops.details]
en = "Returns the stops of this gradient."

[reference.visualize.gradient.gradient.stops.oneliner]
en = "Returns the stops of this gradient."

[reference.visualize.gradient.gradient.stops.title]
en = "Stops"

[reference.visualize.gradient.gradient.title]
en = "Gradient"

[reference.visualize.gradient.oneliner]
en = "A color gradient."

[reference.visualize.gradient.title]
en = "Gradient"

[reference.visualize.image.description]
en = "Documentation for the `image` function."

[reference.visualize.image.image.alt.details]
en = "A text describing the image."

[reference.visualize.image.image.decode.alt.details]
en = "A text describing the image."

[reference.visualize.image.image.decode.data.details]
en = "The data to decode as an image. Can be a string for SVGs."

[reference.visualize.image.image.decode.deprecation]
en = "`image.decode` is deprecated, directly pass bytes to `image` instead"

[reference.visualize.image.image.decode.details]
en = "Decode a raster or vector graphic from bytes or a string."

[reference.visualize.image.image.decode.fit.details]
en = "How the image should adjust itself to a given area."

[reference.visualize.image.image.decode.format.details]
en = "The image's format. Detected automatically by default."

[reference.visualize.image.image.decode.height.details]
en = "The height of the image."

[reference.visualize.image.image.decode.oneliner]
en = "Decode a raster or vector graphic from bytes or a string."

[reference.visualize.image.image.decode.scaling.details]
en = "A hint to viewers how they should scale the image."

[reference.visualize.image.image.decode.title]
en = "Decode Image"

[reference.visualize.image.image.decode.width.details]
en = "The width of the image."

[reference.visualize.image.image.details]
en = "A raster or vector graphic.\n\nYou can wrap the image in a [`figure`] to give it a number and caption.\n\nLike most elements, images are _block-level_ by default and thus do not\nintegrate themselves into adjacent paragraphs. To force an image to become\ninline, put it into a [`box`].\n\n# Example\n```example\n#figure(\n  image(\"molecular.jpg\", width: 80%),\n  caption: [\n    A step in the molecular testing\n    pipeline of our lab.\n  ],\n)\n```"

[reference.visualize.image.image.fit.details]
en = "How the image should adjust itself to a given area (the area is defined\nby the `width` and `height` fields). Note that `fit` doesn't visually\nchange anything if the area's aspect ratio is the same as the image's\none.\n\n"

[reference.visualize.image.image.format.details]
en = "The image's format.\n\nBy default, the format is detected automatically. Typically, you thus\nonly need to specify this when providing raw bytes as the\n[`source`]($image.source) (even then, Typst will try to figure out the\nformat automatically, but that's not always possible).\n\nSupported formats are `{\"png\"}`, `{\"jpg\"}`, `{\"gif\"}`, `{\"svg\"}` as well\nas raw pixel data. Embedding PDFs as images is\n[not currently supported](https://github.com/typst/typst/issues/145).\n\nWhen providing raw pixel data as the `source`, you must specify a\ndictionary with the following keys as the `format`:\n- `encoding` ([str]): The encoding of the pixel data. One of:\n  - `{\"rgb8\"}` (three 8-bit channels: red, green, blue)\n  - `{\"rgba8\"}` (four 8-bit channels: red, green, blue, alpha)\n  - `{\"luma8\"}` (one 8-bit channel)\n  - `{\"lumaa8\"}` (two 8-bit channels: luma and alpha)\n- `width` ([int]): The pixel width of the image.\n- `height` ([int]): The pixel height of the image.\n\nThe pixel width multiplied by the height multiplied by the channel count\nfor the specified encoding must then match the `source` data.\n\n"

[reference.visualize.image.image.height.details]
en = "The height of the image."

[reference.visualize.image.image.icc.details]
en = "An ICC profile for the image.\n\nICC profiles define how to interpret the colors in an image. When set\nto `{auto}`, Typst will try to extract an ICC profile from the image."

[reference.visualize.image.image.oneliner]
en = "A raster or vector graphic."

[reference.visualize.image.image.scaling.details]
en = "A hint to viewers how they should scale the image.\n\nWhen set to `{auto}`, the default is left up to the viewer. For PNG\nexport, Typst will default to smooth scaling, like most PDF and SVG\nviewers.\n\n_Note:_ The exact look may differ across PDF viewers."

[reference.visualize.image.image.source.details]
en = "A [path]($syntax/#paths) to an image file or raw bytes making up an\nimage in one of the supported [formats]($image.format).\n\nBytes can be used to specify raw pixel data in a row-major,\nleft-to-right, top-to-bottom format.\n\n"

[reference.visualize.image.image.title]
en = "Image"

[reference.visualize.image.image.width.details]
en = "The width of the image."

[reference.visualize.image.oneliner]
en = "A raster or vector graphic."

[reference.visualize.image.title]
en = "Image"

[reference.visualize.line.description]
en = "Documentation for the `line` function."

[reference.visualize.line.line.angle.details]
en = "The angle at which the line points away from the origin. This is only\nrespected if `end` is `{none}`."

[reference.visualize.line.line.details]
en = "A line from one point to another.\n\n# Example\n```example\n#set page(height: 100pt)\n\n#line(length: 100%)\n#line(end: (50%, 50%))\n#line(\n  length: 4cm,\n  stroke: 2pt + maroon,\n)\n```"

[reference.visualize.line.line.end.details]
en = "The point where the line ends."

[reference.visualize.line.line.length.details]
en = "The line's length. This is only respected if `end` is `{none}`."

[reference.visualize.line.line.oneliner]
en = "A line from one point to another."

[reference.visualize.line.line.start.details]
en = "The start point of the line.\n\nMust be an array of exactly two relative lengths."

[reference.visualize.line.line.stroke.details]
en = "How to [stroke] the line.\n\n"

[reference.visualize.line.line.title]
en = "Line"

[reference.visualize.line.oneliner]
en = "A line from one point to another."

[reference.visualize.line.title]
en = "Line"

[reference.visualize.path.description]
en = "Documentation for the `path` function."

[reference.visualize.path.oneliner]
en = "A path through a list of points, connected by Bézier curves."

[reference.visualize.path.path.closed.details]
en = "Whether to close this path with one last Bézier curve. This curve will\ntake into account the adjacent control points. If you want to close\nwith a straight line, simply add one last point that's the same as the\nstart point."

[reference.visualize.path.path.deprecation]
en = "the `path` function is deprecated, use `curve` instead"

[reference.visualize.path.path.details]
en = "A path through a list of points, connected by Bézier curves.\n\n# Example\n```example\n#path(\n  fill: blue.lighten(80%),\n  stroke: blue,\n  closed: true,\n  (0pt, 50pt),\n  (100%, 50pt),\n  ((50%, 0pt), (40pt, 0pt)),\n)\n```"

[reference.visualize.path.path.fill-rule.details]
en = "The drawing rule used to fill the path.\n\n"

[reference.visualize.path.path.fill.details]
en = "How to fill the path.\n\nWhen setting a fill, the default stroke disappears. To create a\nrectangle with both fill and stroke, you have to configure both."

[reference.visualize.path.path.oneliner]
en = "A path through a list of points, connected by Bézier curves."

[reference.visualize.path.path.stroke.details]
en = "How to [stroke] the path. This can be:\n\nCan be set to  `{none}` to disable the stroke or to `{auto}` for a\nstroke of `{1pt}` black if and if only if no fill is given."

[reference.visualize.path.path.title]
en = "Path"

[reference.visualize.path.path.vertices.details]
en = "The vertices of the path.\n\nEach vertex can be defined in 3 ways:\n\n- A regular point, as given to the [`line`] or [`polygon`] function.\n- An array of two points, the first being the vertex and the second\n  being the control point. The control point is expressed relative to\n  the vertex and is mirrored to get the second control point. The given\n  control point is the one that affects the curve coming _into_ this\n  vertex (even for the first point). The mirrored control point affects\n  the curve going out of this vertex.\n- An array of three points, the first being the vertex and the next\n  being the control points (control point for curves coming in and out,\n  respectively)."

[reference.visualize.path.title]
en = "Path"

[reference.visualize.polygon.description]
en = "Documentation for the `polygon` function."

[reference.visualize.polygon.oneliner]
en = "A closed polygon."

[reference.visualize.polygon.polygon.details]
en = "A closed polygon.\n\nThe polygon is defined by its corner points and is closed automatically.\n\n# Example\n```example\n#polygon(\n  fill: blue.lighten(80%),\n  stroke: blue,\n  (20%, 0pt),\n  (60%, 0pt),\n  (80%, 2cm),\n  (0%,  2cm),\n)\n```"

[reference.visualize.polygon.polygon.fill-rule.details]
en = "The drawing rule used to fill the polygon.\n\nSee the [curve documentation]($curve.fill-rule) for an example."

[reference.visualize.polygon.polygon.fill.details]
en = "How to fill the polygon.\n\nWhen setting a fill, the default stroke disappears. To create a\nrectangle with both fill and stroke, you have to configure both."

[reference.visualize.polygon.polygon.oneliner]
en = "A closed polygon."

[reference.visualize.polygon.polygon.regular.details]
en = "A regular polygon, defined by its size and number of vertices.\n\n"

[reference.visualize.polygon.polygon.regular.fill.details]
en = "How to fill the polygon. See the general\n[polygon's documentation]($polygon.fill) for more details."

[reference.visualize.polygon.polygon.regular.oneliner]
en = "A regular polygon, defined by its size and number of vertices."

[reference.visualize.polygon.polygon.regular.size.details]
en = "The diameter of the [circumcircle](https://en.wikipedia.org/wiki/Circumcircle)\nof the regular polygon."

[reference.visualize.polygon.polygon.regular.stroke.details]
en = "How to stroke the polygon. See the general\n[polygon's documentation]($polygon.stroke) for more details."

[reference.visualize.polygon.polygon.regular.title]
en = "Regular Polygon"

[reference.visualize.polygon.polygon.regular.vertices.details]
en = "The number of vertices in the polygon."

[reference.visualize.polygon.polygon.stroke.details]
en = "How to [stroke] the polygon. This can be:\n\nCan be set to  `{none}` to disable the stroke or to `{auto}` for a\nstroke of `{1pt}` black if and if only if no fill is given."

[reference.visualize.polygon.polygon.title]
en = "Polygon"

[reference.visualize.polygon.polygon.vertices.details]
en = "The vertices of the polygon. Each point is specified as an array of two\n[relative lengths]($relative)."

[reference.visualize.polygon.title]
en = "Polygon"

[reference.visualize.rect.description]
en = "Documentation for the `rect` function."

[reference.visualize.rect.oneliner]
en = "A rectangle with optional content."

[reference.visualize.rect.rect.body.details]
en = "The content to place into the rectangle.\n\nWhen this is omitted, the rectangle takes on a default size of at most\n`{45pt}` by `{30pt}`."

[reference.visualize.rect.rect.details]
en = "A rectangle with optional content.\n\n# Example\n```example\n// Without content.\n#rect(width: 35%, height: 30pt)\n\n// With content.\n#rect[\n  Automatically sized \\\n  to fit the content.\n]\n```"

[reference.visualize.rect.rect.fill.details]
en = "How to fill the rectangle.\n\nWhen setting a fill, the default stroke disappears. To create a\nrectangle with both fill and stroke, you have to configure both.\n\n"

[reference.visualize.rect.rect.height.details]
en = "The rectangle's height, relative to its parent container."

[reference.visualize.rect.rect.inset.details]
en = "How much to pad the rectangle's content.\nSee the [box's documentation]($box.outset) for more details."

[reference.visualize.rect.rect.oneliner]
en = "A rectangle with optional content."

[reference.visualize.rect.rect.outset.details]
en = "How much to expand the rectangle's size without affecting the layout.\nSee the [box's documentation]($box.outset) for more details."

[reference.visualize.rect.rect.radius.details]
en = "How much to round the rectangle's corners, relative to the minimum of\nthe width and height divided by two. This can be:\n\n- A relative length for a uniform corner radius.\n- A dictionary: With a dictionary, the stroke for each side can be set\n  individually. The dictionary can contain the following keys in order\n  of precedence:\n  - `top-left`: The top-left corner radius.\n  - `top-right`: The top-right corner radius.\n  - `bottom-right`: The bottom-right corner radius.\n  - `bottom-left`: The bottom-left corner radius.\n  - `left`: The top-left and bottom-left corner radii.\n  - `top`: The top-left and top-right corner radii.\n  - `right`: The top-right and bottom-right corner radii.\n  - `bottom`: The bottom-left and bottom-right corner radii.\n  - `rest`: The radii for all corners except those for which the\n    dictionary explicitly sets a size.\n\n"

[reference.visualize.rect.rect.stroke.details]
en = "How to stroke the rectangle. This can be:\n\n- `{none}` to disable stroking\n- `{auto}` for a stroke of `{1pt + black}` if and if only if no fill is\n  given.\n- Any kind of [stroke]\n- A dictionary describing the stroke for each side individually. The\n  dictionary can contain the following keys in order of precedence:\n  - `top`: The top stroke.\n  - `right`: The right stroke.\n  - `bottom`: The bottom stroke.\n  - `left`: The left stroke.\n  - `x`: The horizontal stroke.\n  - `y`: The vertical stroke.\n  - `rest`: The stroke on all sides except those for which the\n    dictionary explicitly sets a size.\n\n"

[reference.visualize.rect.rect.title]
en = "Rectangle"

[reference.visualize.rect.rect.width.details]
en = "The rectangle's width, relative to its parent container."

[reference.visualize.rect.title]
en = "Rectangle"

[reference.visualize.square.description]
en = "Documentation for the `square` function."

[reference.visualize.square.oneliner]
en = "A square with optional content."

[reference.visualize.square.square.body.details]
en = "The content to place into the square. The square expands to fit this\ncontent, keeping the 1-1 aspect ratio.\n\nWhen this is omitted, the square takes on a default size of at most\n`{30pt}`."

[reference.visualize.square.square.details]
en = "A square with optional content.\n\n# Example\n```example\n// Without content.\n#square(size: 40pt)\n\n// With content.\n#square[\n  Automatically \\\n  sized to fit.\n]\n```"

[reference.visualize.square.square.fill.details]
en = "How to fill the square. See the [rectangle's documentation]($rect.fill)\nfor more details."

[reference.visualize.square.square.height.details]
en = "The square's height. This is mutually exclusive with `size` and `width`.\n\nIn contrast to `size`, this can be relative to the parent container's\nheight."

[reference.visualize.square.square.inset.details]
en = "How much to pad the square's content. See the\n[box's documentation]($box.inset) for more details."

[reference.visualize.square.square.oneliner]
en = "A square with optional content."

[reference.visualize.square.square.outset.details]
en = "How much to expand the square's size without affecting the layout. See\nthe [box's documentation]($box.outset) for more details."

[reference.visualize.square.square.radius.details]
en = "How much to round the square's corners. See the\n[rectangle's documentation]($rect.radius) for more details."

[reference.visualize.square.square.size.details]
en = "The square's side length. This is mutually exclusive with `width` and\n`height`."

[reference.visualize.square.square.stroke.details]
en = "How to stroke the square. See the\n[rectangle's documentation]($rect.stroke) for more details."

[reference.visualize.square.square.title]
en = "Square"

[reference.visualize.square.square.width.details]
en = "The square's width. This is mutually exclusive with `size` and `height`.\n\nIn contrast to `size`, this can be relative to the parent container's\nwidth."

[reference.visualize.square.title]
en = "Square"

[reference.visualize.stroke.description]
en = "Documentation for the Stroke type."

[reference.visualize.stroke.oneliner]
en = "Defines how to draw a line."

[reference.visualize.stroke.stroke.details]
en = "Defines how to draw a line.\n\nA stroke has a _paint_ (a solid color or gradient), a _thickness,_ a line\n_cap,_ a line _join,_ a _miter limit,_ and a _dash_ pattern. All of these\nvalues are optional and have sensible defaults.\n\n# Example\n```example\n#set line(length: 100%)\n#stack(\n  spacing: 1em,\n  line(stroke: 2pt + red),\n  line(stroke: (paint: blue, thickness: 4pt, cap: \"round\")),\n  line(stroke: (paint: blue, thickness: 1pt, dash: \"dashed\")),\n  line(stroke: 2pt + gradient.linear(..color.map.rainbow)),\n)\n```\n\n# Simple strokes\nYou can create a simple solid stroke from a color, a thickness, or a\ncombination of the two. Specifically, wherever a stroke is expected you can\npass any of the following values:\n\n- A length specifying the stroke's thickness. The color is inherited,\n  defaulting to black.\n- A color to use for the stroke. The thickness is inherited, defaulting to\n  `{1pt}`.\n- A stroke combined from color and thickness using the `+` operator as in\n  `{2pt + red}`.\n\nFor full control, you can also provide a [dictionary] or a `{stroke}` object\nto any function that expects a stroke. The dictionary's keys may include any\nof the parameters for the constructor function, shown below.\n\n# Fields\nOn a stroke object, you can access any of the fields listed in the\nconstructor function. For example, `{(2pt + blue).thickness}` is `{2pt}`.\nMeanwhile, `{stroke(red).cap}` is `{auto}` because it's unspecified. Fields\nset to `{auto}` are inherited."

[reference.visualize.stroke.stroke.oneliner]
en = "Defines how to draw a line."

[reference.visualize.stroke.stroke.stroke.cap.details]
en = "How the ends of the stroke are rendered.\n\nIf set to `{auto}`, the value is inherited, defaulting to `{\"butt\"}`."

[reference.visualize.stroke.stroke.stroke.dash.details]
en = "The dash pattern to use. This can be:\n\n- One of the predefined patterns:\n  - `{\"solid\"}` or `{none}`\n  - `{\"dotted\"}`\n  - `{\"densely-dotted\"}`\n  - `{\"loosely-dotted\"}`\n  - `{\"dashed\"}`\n  - `{\"densely-dashed\"}`\n  - `{\"loosely-dashed\"}`\n  - `{\"dash-dotted\"}`\n  - `{\"densely-dash-dotted\"}`\n  - `{\"loosely-dash-dotted\"}`\n- An [array] with alternating lengths for dashes and gaps. You can\n  also use the string `{\"dot\"}` for a length equal to the line\n  thickness.\n- A [dictionary] with the keys `array` (same as the array above),\n  and `phase` (of type [length]), which defines where in the pattern\n  to start drawing.\n\nIf set to `{auto}`, the value is inherited, defaulting to `{none}`.\n\n"

[reference.visualize.stroke.stroke.stroke.details]
en = "Converts a value to a stroke or constructs a stroke with the given\nparameters.\n\nNote that in most cases you do not need to convert values to strokes in\norder to use them, as they will be converted automatically. However,\nthis constructor can be useful to ensure a value has all the fields of a\nstroke.\n\n"

[reference.visualize.stroke.stroke.stroke.join.details]
en = "How sharp turns are rendered.\n\nIf set to `{auto}`, the value is inherited, defaulting to `{\"miter\"}`."

[reference.visualize.stroke.stroke.stroke.miter-limit.details]
en = "Number at which protruding sharp bends are rendered with a bevel\ninstead or a miter join. The higher the number, the sharper an angle\ncan be before it is bevelled. Only applicable if `join` is\n`{\"miter\"}`.\n\nSpecifically, the miter limit is the maximum ratio between the\ncorner's protrusion length and the stroke's thickness.\n\nIf set to `{auto}`, the value is inherited, defaulting to `{4.0}`.\n\n"

[reference.visualize.stroke.stroke.stroke.oneliner]
en = "Converts a value to a stroke or constructs a stroke with the given"

[reference.visualize.stroke.stroke.stroke.paint.details]
en = "The color or gradient to use for the stroke.\n\nIf set to `{auto}`, the value is inherited, defaulting to `{black}`."

[reference.visualize.stroke.stroke.stroke.thickness.details]
en = "The stroke's thickness.\n\nIf set to `{auto}`, the value is inherited, defaulting to `{1pt}`."

[reference.visualize.stroke.stroke.stroke.title]
en = "Construct"

[reference.visualize.stroke.stroke.title]
en = "Stroke"

[reference.visualize.stroke.title]
en = "Stroke"

[reference.visualize.tiling.description]
en = "Documentation for the Tiling type."

[reference.visualize.tiling.oneliner]
en = "A repeating tiling fill."

[reference.visualize.tiling.tiling.details]
en = "A repeating tiling fill.\n\nTypst supports the most common type of tilings, where a pattern is repeated\nin a grid-like fashion, covering the entire area of an element that is\nfilled or stroked. The pattern is defined by a tile size and a body defining\nthe content of each cell. You can also add horizontal or vertical spacing\nbetween the cells of the tiling.\n\n# Examples\n\n```example\n#let pat = tiling(size: (30pt, 30pt))[\n  #place(line(start: (0%, 0%), end: (100%, 100%)))\n  #place(line(start: (0%, 100%), end: (100%, 0%)))\n]\n\n#rect(fill: pat, width: 100%, height: 60pt, stroke: 1pt)\n```\n\nTilings are also supported on text, but only when setting the\n[relativeness]($tiling.relative) to either `{auto}` (the default value) or\n`{\"parent\"}`. To create word-by-word or glyph-by-glyph tilings, you can\nwrap the words or characters of your text in [boxes]($box) manually or\nthrough a [show rule]($styling/#show-rules).\n\n```example\n#let pat = tiling(\n  size: (30pt, 30pt),\n  relative: \"parent\",\n  square(\n    size: 30pt,\n    fill: gradient\n      .conic(..color.map.rainbow),\n  )\n)\n\n#set text(fill: pat)\n#lorem(10)\n```\n\nYou can also space the elements further or closer apart using the\n[`spacing`]($tiling.spacing) feature of the tiling. If the spacing\nis lower than the size of the tiling, the tiling will overlap.\nIf it is higher, the tiling will have gaps of the same color as the\nbackground of the tiling.\n\n```example\n#let pat = tiling(\n  size: (30pt, 30pt),\n  spacing: (10pt, 10pt),\n  relative: \"parent\",\n  square(\n    size: 30pt,\n    fill: gradient\n     .conic(..color.map.rainbow),\n  ),\n)\n\n#rect(\n  width: 100%,\n  height: 60pt,\n  fill: pat,\n)\n```\n\n# Relativeness\nThe location of the starting point of the tiling is dependent on the\ndimensions of a container. This container can either be the shape that it is\nbeing painted on, or the closest surrounding container. This is controlled\nby the `relative` argument of a tiling constructor. By default, tilings\nare relative to the shape they are being painted on, unless the tiling is\napplied on text, in which case they are relative to the closest ancestor\ncontainer.\n\nTypst determines the ancestor container as follows:\n- For shapes that are placed at the root/top level of the document, the\n  closest ancestor is the page itself.\n- For other shapes, the ancestor is the innermost [`block`] or [`box`] that\n  contains the shape. This includes the boxes and blocks that are implicitly\n  created by show rules and elements. For example, a [`rotate`] will not\n  affect the parent of a gradient, but a [`grid`] will.\n\n# Compatibility\nThis type used to be called `pattern`. The name remains as an alias, but is\ndeprecated since Typst 0.13."

[reference.visualize.tiling.tiling.oneliner]
en = "A repeating tiling fill."

[reference.visualize.tiling.tiling.tiling.body.details]
en = "The content of each cell of the tiling."

[reference.visualize.tiling.tiling.tiling.details]
en = "Construct a new tiling.\n\n"

[reference.visualize.tiling.tiling.tiling.oneliner]
en = "Construct a new tiling."

[reference.visualize.tiling.tiling.tiling.relative.details]
en = "The [relative placement](#relativeness) of the tiling.\n\nFor an element placed at the root/top level of the document, the\nparent is the page itself. For other elements, the parent is the\ninnermost block, box, column, grid, or stack that contains the\nelement."

[reference.visualize.tiling.tiling.tiling.size.details]
en = "The bounding box of each cell of the tiling."

[reference.visualize.tiling.tiling.tiling.spacing.details]
en = "The spacing between cells of the tiling."

[reference.visualize.tiling.tiling.tiling.title]
en = "Construct"

[reference.visualize.tiling.tiling.title]
en = "Tiling"

[reference.visualize.tiling.title]
en = "Tiling"

[reference.visualize.title]
en = "Visualize"

[reference.visualize.visualize.details]
en = "Drawing and data visualization.\n\nIf you want to create more advanced drawings or plots, also have a look at the\n[CetZ](https://github.com/johannes-wolf/cetz) package as well as more\nspecialized [packages]($universe) for your use case.\n"

[reference.visualize.visualize.title]
en = "Visualize"

[tutorial.advanced-styling.body]
en = "\n# Advanced Styling\nIn the previous two chapters of this tutorial, you have learned how to write a\ndocument in Typst and how to change its formatting. The report you wrote\nthroughout the last two chapters got a straight A and your supervisor wants to\nbase a conference paper on it! The report will of course have to comply with the\nconference's style guide. Let's see how we can achieve that.\n\nBefore we start, let's create a team, invite your supervisor and add them to the\nteam. You can do this by going back to the app dashboard with the back icon in\nthe top left corner of the editor. Then, choose the plus icon in the left\ntoolbar and create a team. Finally, click on the new team and go to its settings\nby clicking 'manage team' next to the team name. Now you can invite your\nsupervisor by email.\n\n![The team settings](3-advanced-team-settings.png)\n\nNext, move your project into the team: Open it, going to its settings by\nchoosing the gear icon in the left toolbar and selecting your new team from the\nowners dropdown. Don't forget to save your changes!\n\nNow, your supervisor can also edit the project and you can both see the changes\nin real time. You can join our [Discord server](https://discord.gg/2uDybryKPe)\nto find other users and try teams with them!\n\n## The conference guidelines { #guidelines }\nThe layout guidelines are available on the conference website. Let's take a look\nat them:\n\n- The font should be an 11pt serif font\n- The title should be in 17pt and bold\n- The paper contains a single-column abstract and two-column main text\n- The abstract should be centered\n- The main text should be justified\n- First level section headings should be 13pt, centered, and rendered in small\n  capitals\n- Second level headings are run-ins, italicized and have the same size as the\n  body text\n- Finally, the pages should be US letter sized, numbered in the center of the\n  footer and the top right corner of each page should contain the title of the\n  paper\n\nWe already know how to do many of these things, but for some of them, we'll need\nto learn some new tricks.\n\n## Writing the right set rules { #set-rules }\nLet's start by writing some set rules for the document.\n\n```example\n#set page(\n>>>  margin: auto,\n  paper: \"us-letter\",\n  header: align(right)[\n    A fluid dynamic model for\n    glacier flow\n  ],\n  numbering: \"1\",\n)\n#set par(justify: true)\n#set text(\n  font: \"Libertinus Serif\",\n  size: 11pt,\n)\n\n#lorem(600)\n```\n\nYou are already familiar with most of what is going on here. We set the text\nsize to `{11pt}` and the font to Libertinus Serif. We also enable paragraph\njustification and set the page size to US letter.\n\nThe `header` argument is new: With it, we can provide content to fill the top\nmargin of every page. In the header, we specify our paper's title as requested\nby the conference style guide. We use the `align` function to align the text to\nthe right.\n\nLast but not least is the `numbering` argument. Here, we can provide a\n[numbering pattern]($numbering) that defines how to number the pages. By\nsetting into to `{\"1\"}`, Typst only displays the bare page number. Setting it to\n`{\"(1/1)\"}` would have displayed the current page and total number of pages\nsurrounded by parentheses. And we could even have provided a completely custom\nfunction here to format things to our liking.\n\n## Creating a title and abstract { #title-and-abstract }\nNow, let's add a title and an abstract. We'll start with the title. We center\nalign it and increase its font weight by enclosing it in `[*stars*]`.\n\n```example\n>>> #set page(width: 300pt, margin: 30pt)\n>>> #set text(font: \"Libertinus Serif\", 11pt)\n#align(center, text(17pt)[\n  *A fluid dynamic model\n  for glacier flow*\n])\n```\n\nThis looks right. We used the `text` function to override the previous text\nset rule locally, increasing the size to 17pt for the function's argument. Let's\nalso add the author list: Since we are writing this paper together with our\nsupervisor, we'll add our own and their name.\n\n```example\n>>> #set page(width: 300pt, margin: 30pt)\n>>> #set text(font: \"Libertinus Serif\", 11pt)\n>>>\n>>> #align(center, text(17pt)[\n>>>   *A fluid dynamic model\n>>>   for glacier flow*\n>>> ])\n#grid(\n  columns: (1fr, 1fr),\n  align(center)[\n    Therese Tungsten \\\n    Artos Institute \\\n    #link(\"mailto:tung@artos.edu\")\n  ],\n  align(center)[\n    Dr. John Doe \\\n    Artos Institute \\\n    #link(\"mailto:doe@artos.edu\")\n  ]\n)\n```\n\nThe two author blocks are laid out next to each other. We use the [`grid`]\nfunction to create this layout. With a grid, we can control exactly how large\neach column is and which content goes into which cell. The `columns` argument\ntakes an array of [relative lengths]($relative) or [fractions]($fraction). In\nthis case, we passed it two equal fractional sizes, telling it to split the\navailable space into two equal columns. We then passed two content arguments to\nthe grid function. The first with our own details, and the second with our\nsupervisors'. We again use the `align` function to center the content within the\ncolumn. The grid takes an arbitrary number of content arguments specifying the\ncells. Rows are added automatically, but they can also be manually sized with\nthe `rows` argument.\n\nNow, let's add the abstract. Remember that the conference wants the abstract to\nbe set ragged and centered.\n\n```example:0,0,612,317.5\n>>> #set text(font: \"Libertinus Serif\", 11pt)\n>>> #set par(justify: true)\n>>> #set page(\n>>>   \"us-letter\",\n>>>   margin: auto,\n>>>   header: align(right + horizon)[\n>>>     A fluid dynamic model for\n>>>     glacier flow\n>>>   ],\n>>>   numbering: \"1\",\n>>> )\n>>>\n>>> #align(center, text(17pt)[\n>>>   *A fluid dynamic model\n>>>   for glacier flow*\n>>> ])\n>>>\n>>> #grid(\n>>>   columns: (1fr, 1fr),\n>>>   align(center)[\n>>>     Therese Tungsten \\\n>>>     Artos Institute \\\n>>>     #link(\"mailto:tung@artos.edu\")\n>>>   ],\n>>>   align(center)[\n>>>     Dr. John Doe \\\n>>>     Artos Institute \\\n>>>     #link(\"mailto:doe@artos.edu\")\n>>>   ]\n>>> )\n>>>\n<<< ...\n\n#align(center)[\n  #set par(justify: false)\n  *Abstract* \\\n  #lorem(80)\n]\n>>> #lorem(600)\n```\n\nWell done! One notable thing is that we used a set rule within the content\nargument of `align` to turn off justification for the abstract. This does not\naffect the remainder of the document even though it was specified after the\nfirst set rule because content blocks _scope_ styling. Anything set within a\ncontent block will only affect the content within that block.\n\nAnother tweak could be to save the paper title in a variable, so that we do not\nhave to type it twice, for header and title. We can do that with the `{let}`\nkeyword:\n\n```example:single\n#let title = [\n  A fluid dynamic model\n  for glacier flow\n]\n\n<<< ...\n\n>>> #set text(font: \"Libertinus Serif\", 11pt)\n>>> #set par(justify: true)\n#set page(\n>>>   \"us-letter\",\n>>>   margin: auto,\n  header: align(\n    right + horizon,\n    title\n  ),\n<<<   ...\n>>>   numbering: \"1\",\n)\n\n#align(center, text(17pt)[\n  *#title*\n])\n\n<<< ...\n\n>>> #grid(\n>>>   columns: (1fr, 1fr),\n>>>   align(center)[\n>>>     Therese Tungsten \\\n>>>     Artos Institute \\\n>>>     #link(\"mailto:tung@artos.edu\")\n>>>   ],\n>>>   align(center)[\n>>>     Dr. John Doe \\\n>>>     Artos Institute \\\n>>>     #link(\"mailto:doe@artos.edu\")\n>>>   ]\n>>> )\n>>>\n>>> #align(center)[\n>>>   #set par(justify: false)\n>>>   *Abstract* \\\n>>>   #lorem(80)\n>>> ]\n>>>\n>>> #lorem(600)\n```\n\nAfter we bound the content to the `title` variable, we can use it in functions\nand also within markup (prefixed by `#`, like functions). This way, if we decide\non another title, we can easily change it in one place.\n\n## Adding columns and headings { #columns-and-headings }\nThe paper above unfortunately looks like a wall of lead. To fix that, let's add\nsome headings and switch our paper to a two-column layout. Fortunately, that's\neasy to do: We just need to amend our `page` set rule with the `columns`\nargument.\n\nBy adding `{columns: 2}` to the argument list, we have wrapped the whole\ndocument in two columns. However, that would also affect the title and authors\noverview. To keep them spanning the whole page, we can wrap them in a function\ncall to [`{place}`]($place). Place expects an alignment and the content it\nshould place as positional arguments. Using the named `{scope}` argument, we can\ndecide if the items should be placed relative to the current column or its\nparent (the page). There is one more thing to configure: If no other arguments\nare provided, `{place}` takes its content out of the flow of the document and\npositions it over the other content without affecting the layout of other\ncontent in its container:\n\n```example\n#place(\n  top + center,\n  rect(fill: black),\n)\n#lorem(30)\n```\n\nIf we hadn't used `{place}` here, the square would be in its own line, but here\nit overlaps the few lines of text following it. Likewise, that text acts like as\nif there was no square. To change this behavior, we can pass the argument\n`{float: true}` to ensure that the space taken up by the placed item at the top\nor bottom of the page is not occupied by any other content.\n\n```example:single\n>>> #let title = [\n>>>   A fluid dynamic model\n>>>   for glacier flow\n>>> ]\n>>>\n>>> #set text(font: \"Libertinus Serif\", 11pt)\n>>> #set par(justify: true)\n>>>\n#set page(\n>>> margin: auto,\n  paper: \"us-letter\",\n  header: align(\n    right + horizon,\n    title\n  ),\n  numbering: \"1\",\n  columns: 2,\n)\n\n#place(\n  top + center,\n  float: true,\n  scope: \"parent\",\n  clearance: 2em,\n)[\n>>>  #text(\n>>>    17pt,\n>>>    weight: \"bold\",\n>>>    title,\n>>>  )\n>>>\n>>>  #grid(\n>>>    columns: (1fr, 1fr),\n>>>    [\n>>>      Therese Tungsten \\\n>>>      Artos Institute \\\n>>>      #link(\"mailto:tung@artos.edu\")\n>>>    ],\n>>>    [\n>>>      Dr. John Doe \\\n>>>      Artos Institute \\\n>>>      #link(\"mailto:doe@artos.edu\")\n>>>    ]\n>>>  )\n<<<   ...\n\n  #par(justify: false)[\n    *Abstract* \\\n    #lorem(80)\n  ]\n]\n\n= Introduction\n#lorem(300)\n\n= Related Work\n#lorem(200)\n```\n\nIn this example, we also used the `clearance` argument of the `{place}` function\nto provide the space between it and the body instead of using the [`{v}`]($v)\nfunction. We can also remove the explicit `{align(center, ..)}` calls around the\nvarious parts since they inherit the center alignment from the placement.\n\nNow there is only one thing left to do: Style our headings. We need to make them\ncentered and use small capitals. Because the `heading` function does not offer\na way to set any of that, we need to write our own heading show rule.\n\n```example:50,250,265,270\n>>> #let title = [\n>>>   A fluid dynamic model\n>>>   for glacier flow\n>>> ]\n>>>\n>>> #set text(font: \"Libertinus Serif\", 11pt)\n>>> #set par(justify: true)\n>>> #set page(\n>>>   \"us-letter\",\n>>>   margin: auto,\n>>>   header: align(\n>>>     right + horizon,\n>>>     title\n>>>   ),\n>>>   numbering: \"1\",\n>>>   columns: 2,\n>>> )\n#show heading: it => [\n  #set align(center)\n  #set text(13pt, weight: \"regular\")\n  #block(smallcaps(it.body))\n]\n\n<<< ...\n>>>\n>>> #place(\n>>>   top + center,\n>>>   float: true,\n>>>   scope: \"parent\",\n>>>   clearance: 2em,\n>>> )[\n>>>   #text(\n>>>     17pt,\n>>>     weight: \"bold\",\n>>>     title,\n>>>   )\n>>>\n>>>   #grid(\n>>>     columns: (1fr, 1fr),\n>>>     [\n>>>       Therese Tungsten \\\n>>>       Artos Institute \\\n>>>       #link(\"mailto:tung@artos.edu\")\n>>>     ],\n>>>     [\n>>>       Dr. John Doe \\\n>>>       Artos Institute \\\n>>>       #link(\"mailto:doe@artos.edu\")\n>>>     ]\n>>>   )\n>>>\n>>>   #par(justify: false)[\n>>>     *Abstract* \\\n>>>     #lorem(80)\n>>>   ]\n>>> ]\n>>>\n>>> = Introduction\n>>> #lorem(35)\n>>>\n>>> == Motivation\n>>> #lorem(45)\n```\n\nThis looks great! We used a show rule that applies to all headings. We give it a\nfunction that gets passed the heading as a parameter. That parameter can be used\nas content but it also has some fields like `title`, `numbers`, and `level` from\nwhich we can compose a custom look. Here, we are center-aligning, setting the\nfont weight to `{\"regular\"}` because headings are bold by default, and use the\n[`smallcaps`] function to render the heading's title in small capitals.\n\nThe only remaining problem is that all headings look the same now. The\n\"Motivation\" and \"Problem Statement\" subsections ought to be italic run in\nheaders, but right now, they look indistinguishable from the section headings. We\ncan fix that by using a `where` selector on our set rule: This is a\n[method]($scripting/#methods) we can call on headings (and other\nelements) that allows us to filter them by their level. We can use it to\ndifferentiate between section and subsection headings:\n\n```example:50,250,265,245\n>>> #let title = [\n>>>   A fluid dynamic model\n>>>   for glacier flow\n>>> ]\n>>>\n>>> #set text(font: \"Libertinus Serif\", 11pt)\n>>> #set par(justify: true)\n>>> #set page(\n>>>   \"us-letter\",\n>>>   margin: auto,\n>>>   header: align(\n>>>     right + horizon,\n>>>     title\n>>>   ),\n>>>   numbering: \"1\",\n>>>   columns: 2,\n>>> )\n>>>\n#show heading.where(\n  level: 1\n): it => block(width: 100%)[\n  #set align(center)\n  #set text(13pt, weight: \"regular\")\n  #smallcaps(it.body)\n]\n\n#show heading.where(\n  level: 2\n): it => text(\n  size: 11pt,\n  weight: \"regular\",\n  style: \"italic\",\n  it.body + [.],\n)\n>>>\n>>> #place(\n>>>   top + center,\n>>>   float: true,\n>>>   scope: \"parent\",\n>>>   clearance: 2em,\n>>> )[\n>>>   #text(\n>>>     17pt,\n>>>     weight: \"bold\",\n>>>     title,\n>>>   )\n>>>\n>>>  #grid(\n>>>    columns: (1fr, 1fr),\n>>>    [\n>>>      Therese Tungsten \\\n>>>      Artos Institute \\\n>>>      #link(\"mailto:tung@artos.edu\")\n>>>    ],\n>>>    [\n>>>      Dr. John Doe \\\n>>>      Artos Institute \\\n>>>      #link(\"mailto:doe@artos.edu\")\n>>>    ]\n>>>  )\n>>>\n>>>   #par(justify: false)[\n>>>     *Abstract* \\\n>>>     #lorem(80)\n>>>   ]\n>>> ]\n>>>\n>>> = Introduction\n>>> #lorem(35)\n>>>\n>>> == Motivation\n>>> #lorem(45)\n```\n\nThis looks great! We wrote two show rules that each selectively apply to the\nfirst and second level headings. We used a `where` selector to filter the\nheadings by their level. We then rendered the subsection headings as run-ins. We\nalso automatically add a period to the end of the subsection headings.\n\nLet's review the conference's style guide:\n- The font should be an 11pt serif font ✓\n- The title should be in 17pt and bold ✓\n- The paper contains a single-column abstract and two-column main text ✓\n- The abstract should be centered ✓\n- The main text should be justified ✓\n- First level section headings should be centered, rendered in small caps and in\n  13pt ✓\n- Second level headings are run-ins, italicized and have the same size as the\n  body text ✓\n- Finally, the pages should be US letter sized, numbered in the center and the\n  top right corner of each page should contain the title of the paper ✓\n\nWe are now in compliance with all of these styles and can submit the paper to\nthe conference! The finished paper looks like this:\n\n<img\n  src=\"3-advanced-paper.png\"\n  alt=\"The finished paper\"\n  style=\"box-shadow: 0 4px 12px rgb(89 85 101 / 20%); width: 500px; max-width: 100%; display: block; margin: 24px auto;\"\n>\n\n## Review\nYou have now learned how to create headers and footers, how to use functions and\nscopes to locally override styles, how to create more complex layouts with the\n[`grid`] function and how to write show rules for individual functions, and the\nwhole document. You also learned how to use the\n[`where` selector]($styling/#show-rules) to filter the headings by their level.\n\nThe paper was a great success! You've met a lot of like-minded researchers at\nthe conference and are planning a project which you hope to publish at the same\nvenue next year. You'll need to write a new paper using the same style guide\nthough, so maybe now you want to create a time-saving template for you and your\nteam?\n\nIn the next section, we will learn how to create templates that can be reused in\nmultiple documents. This is a more advanced topic, so feel free to come back\nto it later if you don't feel up to it right now."

[tutorial.advanced-styling.description]
en = "Typst's tutorial."

[tutorial.advanced-styling.title]
en = "Advanced Styling"

[tutorial.body]
en = "\n# Tutorial\nWelcome to Typst's tutorial! In this tutorial, you will learn how to write and\nformat documents in Typst. We will start with everyday tasks and gradually\nintroduce more advanced features. This tutorial does not assume prior knowledge\nof Typst, other markup languages, or programming. We do assume that you know how\nto edit a text file.\n\nThe best way to start is to sign up to the Typst app for free and follow along\nwith the steps below. The app gives you instant preview, syntax highlighting and\nhelpful autocompletions. Alternatively, you can follow along in your local text\neditor with the [open-source CLI](https://github.com/typst/typst).\n\n## When to use Typst { #when-typst }\nBefore we get started, let's check what Typst is and when to use it. Typst is a\nmarkup language for typesetting documents. It is designed to be easy to learn,\nfast, and versatile. Typst takes text files with markup in them and outputs\nPDFs.\n\nTypst is a good choice for writing any long form text such as essays, articles,\nscientific papers, books, reports, and homework assignments. Moreover, Typst is\na great fit for any documents containing mathematical notation, such as papers\nin the math, physics, and engineering fields. Finally, due to its strong styling\nand automation features, it is an excellent choice for any set of documents that\nshare a common style, such as a book series.\n\n## What you will learn { #learnings }\nThis tutorial has four chapters. Each chapter builds on the previous one. Here\nis what you will learn in each of them:\n\n1. [Writing in Typst:]($tutorial/writing-in-typst) Learn how to write text and\n   insert images, equations, and other elements.\n2. [Formatting:]($tutorial/formatting) Learn how to adjust the formatting\n   of your document, including font size, heading styles, and more.\n3. [Advanced Styling:]($tutorial/advanced-styling) Create a complex page\n   layout for a scientific paper with typographic features such as an author\n   list and run-in headings.\n4. [Making a Template:]($tutorial/making-a-template) Build a reusable template\n   from the paper you created in the previous chapter.\n\nWe hope you'll enjoy Typst!"

[tutorial.description]
en = "Typst's tutorial."

[tutorial.formatting.body]
en = "\n# Formatting\nSo far, you have written a report with some text, a few equations and images.\nHowever, it still looks very plain. Your teaching assistant does not yet know\nthat you are using a new typesetting system, and you want your report to fit in\nwith the other student's submissions. In this chapter, we will see how to format\nyour report using Typst's styling system.\n\n## Set rules\nAs we have seen in the previous chapter, Typst has functions that _insert_\ncontent (e.g. the [`image`] function) and others that _manipulate_ content that\nthey received as arguments (e.g. the [`align`] function). The first impulse you\nmight have when you want, for example, to justify the report, could be to look\nfor a function that does that and wrap the complete document in it.\n\n```example\n#par(justify: true)[\n  = Background\n  In the case of glaciers, fluid\n  dynamics principles can be used\n  to understand how the movement\n  and behaviour of the ice is\n  influenced by factors such as\n  temperature, pressure, and the\n  presence of other fluids (such as\n  water).\n]\n```\n\nWait, shouldn't all arguments of a function be specified within parentheses? Why\nis there a second set of square brackets with content _after_ the parentheses?\nThe answer is that, as passing content to a function is such a common thing to\ndo in Typst, there is special syntax for it: Instead of putting the content\ninside of the argument list, you can write it in square brackets directly after\nthe normal arguments, saving on punctuation.\n\nAs seen above, that works. The [`par`] function justifies all paragraphs within\nit. However, wrapping the document in countless functions and applying styles\nselectively and in-situ can quickly become cumbersome.\n\nFortunately, Typst has a more elegant solution. With _set rules,_ you can apply\nstyle properties to all occurrences of some kind of content. You write a set\nrule by entering the `{set}` keyword, followed by the name of the function whose\nproperties you want to set, and a list of arguments in parentheses.\n\n```example\n#set par(justify: true)\n\n= Background\nIn the case of glaciers, fluid\ndynamics principles can be used\nto understand how the movement\nand behaviour of the ice is\ninfluenced by factors such as\ntemperature, pressure, and the\npresence of other fluids (such as\nwater).\n```\n\n<div class=\"info-box\">\n\nWant to know in more technical terms what is happening here?\n\nSet rules can be conceptualized as setting default values\nfor some of the parameters of a function for all future\nuses of that function.\n</div>\n\n## The autocomplete panel { #autocomplete }\nIf you followed along and tried a few things in the app, you might have noticed\nthat always after you enter a `#` character, a panel pops up to show you the\navailable functions, and, within an argument list, the available parameters.\nThat's the autocomplete panel. It can be very useful while you are writing your\ndocument: You can apply its suggestions by hitting the Return key or navigate to\nthe desired completion with the arrow keys. The panel can be dismissed by\nhitting the Escape key and opened again by typing `#` or hitting\n<kbd>Ctrl</kbd> + <kbd>Space</kbd>. Use the autocomplete panel to discover the\nright arguments for functions. Most suggestions come with a small description of\nwhat they do.\n\n![Autocomplete panel](2-formatting-autocomplete.png)\n\n## Set up the page { #page-setup }\nBack to set rules: When writing a rule, you choose the function depending on\nwhat type of element you want to style. Here is a list of some functions that\nare commonly used in set rules:\n\n- [`text`] to set font family, size, color, and other properties of text\n- [`page`] to set the page size, margins, headers, enable columns, and footers\n- [`par`] to justify paragraphs, set line spacing, and more\n- [`heading`] to set the appearance of headings and enable numbering\n- [`document`] to set the metadata contained in the PDF output, such as title\n  and author\n\nNot all function parameters can be set. In general, only parameters that tell\na function _how_ to do something can be set, not those that tell it _what_ to\ndo it with. The function reference pages indicate which parameters are settable.\n\nLet's add a few more styles to our document. We want larger margins and a serif\nfont. For the purposes of the example, we'll also set another page size.\n\n```example\n#set page(\n  paper: \"a6\",\n  margin: (x: 1.8cm, y: 1.5cm),\n)\n#set text(\n  font: \"New Computer Modern\",\n  size: 10pt\n)\n#set par(\n  justify: true,\n  leading: 0.52em,\n)\n\n= Introduction\nIn this report, we will explore the\nvarious factors that influence fluid\ndynamics in glaciers and how they\ncontribute to the formation and\nbehaviour of these natural structures.\n\n>>> Glacier displacement is influenced\n>>> by a number of factors, including\n>>> + The climate\n>>> + The topography\n>>> + The geology\n>>>\n>>> This report will present a physical\n>>> model of glacier displacement and\n>>> dynamics, and will explore the\n>>> influence of these factors on the\n>>> movement of large bodies of ice.\n<<< ...\n\n#align(center + bottom)[\n  #image(\"glacier.jpg\", width: 70%)\n\n  *Glaciers form an important\n  part of the earth's climate\n  system.*\n]\n```\n\nThere are a few things of note here.\n\nFirst is the [`page`] set rule. It receives two arguments: the page size and\nmargins for the page. The page size is a string. Typst accepts [many standard\npage sizes,]($page.paper) but you can also specify a custom page size. The\nmargins are specified as a [dictionary.]($dictionary) Dictionaries are a\ncollection of key-value pairs. In this case, the keys are `x` and `y`, and the\nvalues are the horizontal and vertical margins, respectively. We could also have\nspecified separate margins for each side by passing a dictionary with the keys\n`{left}`, `{right}`, `{top}`, and `{bottom}`.\n\nNext is the set [`text`] set rule. Here, we set the font size to `{10pt}` and\nfont family to `{\"New Computer Modern\"}`. The Typst app comes with many fonts\nthat you can try for your document. When you are in the text function's argument\nlist, you can discover the available fonts in the autocomplete panel.\n\nWe have also set the spacing between lines (a.k.a. leading): It is specified as\na [length] value, and we used the `em` unit to specify the leading relative to\nthe size of the font: `{1em}` is equivalent to the current font size (which\ndefaults to `{11pt}`).\n\nFinally, we have bottom aligned our image by adding a vertical alignment to our\ncenter alignment. Vertical and horizontal alignments can be combined with the\n`{+}` operator to yield a 2D alignment.\n\n## A hint of sophistication { #sophistication }\nTo structure our document more clearly, we now want to number our headings. We\ncan do this by setting the `numbering` parameter of the [`heading`] function.\n\n```example\n>>> #set text(font: \"New Computer Modern\")\n#set heading(numbering: \"1.\")\n\n= Introduction\n#lorem(10)\n\n== Background\n#lorem(12)\n\n== Methods\n#lorem(15)\n```\n\nWe specified the string `{\"1.\"}` as the numbering parameter. This tells Typst to\nnumber the headings with arabic numerals and to put a dot between the number of\neach level. We can also use [letters, roman numerals, and symbols]($numbering)\nfor our headings:\n\n```example\n>>> #set text(font: \"New Computer Modern\")\n#set heading(numbering: \"1.a\")\n\n= Introduction\n#lorem(10)\n\n== Background\n#lorem(12)\n\n== Methods\n#lorem(15)\n```\n\nThis example also uses the [`lorem`] function to generate some placeholder text.\nThis function takes a number as an argument and generates that many words of\n_Lorem Ipsum_ text.\n\n<div class=\"info-box\">\n\nDid you wonder why the headings and text set rules apply to all text and headings,\neven if they are not produced with the respective functions?\n\nTypst internally calls the `heading` function every time you write\n`[= Conclusion]`. In fact, the function call `[#heading[Conclusion]]` is\nequivalent to the heading markup above. Other markup elements work similarly,\nthey are only _syntax sugar_ for the corresponding function calls.\n</div>\n\n## Show rules\nYou are already pretty happy with how this turned out. But one last thing needs\nto be fixed: The report you are writing is intended for a larger project and\nthat project's name should always be accompanied by a logo, even in prose.\n\nYou consider your options. You could add an `[#image(\"logo.svg\")]` call before\nevery instance of the logo using search and replace. That sounds very tedious.\nInstead, you could maybe\n[define a custom function]($function/#defining-functions) that always yields the\nlogo with its image. However, there is an even easier way:\n\nWith show rules, you can redefine how Typst displays certain elements. You\nspecify which elements Typst should show differently and how they should look.\nShow rules can be applied to instances of text, many functions, and even the\nwhole document.\n\n```example\n#show \"ArtosFlow\": name => box[\n  #box(image(\n    \"logo.svg\",\n    height: 0.7em,\n  ))\n  #name\n]\n\nThis report is embedded in the\nArtosFlow project. ArtosFlow is a\nproject of the Artos Institute.\n```\n\nThere is a lot of new syntax in this example: We write the `{show}` keyword,\nfollowed by a string of text we want to show differently and a colon. Then, we\nwrite a function that takes the content that shall be shown as an argument.\nHere, we called that argument `name`. We can now use the `name` variable in the\nfunction's body to print the ArtosFlow name. Our show rule adds the logo image\nin front of the name and puts the result into a box to prevent linebreaks from\noccurring between logo and name. The image is also put inside of a box, so that\nit does not appear in its own paragraph.\n\nThe calls to the first box function and the image function did not require a\nleading `#` because they were not embedded directly in markup. When Typst\nexpects code instead of markup, the leading `#` is not needed to access\nfunctions, keywords, and variables. This can be observed in parameter lists,\nfunction definitions, and [code blocks]($scripting).\n\n## Review\nYou now know how to apply basic formatting to your Typst documents. You learned\nhow to set the font, justify your paragraphs, change the page dimensions, and\nadd numbering to your headings with set rules. You also learned how to use a\nbasic show rule to change how text appears throughout your document.\n\nYou have handed in your report. Your supervisor was so happy with it that they\nwant to adapt it into a conference paper! In the next section, we will learn how\nto format your document as a paper using more advanced show rules and functions."

[tutorial.formatting.description]
en = "Typst's tutorial."

[tutorial.formatting.title]
en = "Formatting"

[tutorial.making-a-template.body]
en = "\n# Making a Template\nIn the previous three chapters of this tutorial, you have learned how to write a\ndocument in Typst, apply basic styles, and customize its appearance in-depth to\ncomply with a publisher's style guide. Because the paper you wrote in the\nprevious chapter was a tremendous success, you have been asked to write a\nfollow-up article for the same conference. This time, you want to take the style\nyou created in the previous chapter and turn it into a reusable template. In\nthis chapter you will learn how to create a template that you and your team can\nuse with just one show rule. Let's get started!\n\n## A toy template { #toy-template }\nIn Typst, templates are functions in which you can wrap your whole document. To\nlearn how to do that, let's first review how to write your very own functions.\nThey can do anything you want them to, so why not go a bit crazy?\n\n```example\n#let amazed(term) = box[✨ #term ✨]\n\nYou are #amazed[beautiful]!\n```\n\nThis function takes a single argument, `term`, and returns a content block with\nthe `term` surrounded by sparkles. We also put the whole thing in a box so that\nthe term we are amazed by cannot be separated from its sparkles by a line break.\n\nMany functions that come with Typst have optional named parameters. Our\nfunctions can also have them. Let's add a parameter to our function that lets us\nchoose the color of the text. We need to provide a default color in case the\nparameter isn't given.\n\n```example\n#let amazed(term, color: blue) = {\n  text(color, box[✨ #term ✨])\n}\n\nYou are #amazed[beautiful]!\nI am #amazed(color: purple)[amazed]!\n```\n\nTemplates now work by wrapping our whole document in a custom function like\n`amazed`. But wrapping a whole document in a giant function call would be\ncumbersome! Instead, we can use an \"everything\" show rule to achieve the same\nwith cleaner code. To write such a show rule, put a colon directly behind the\nshow keyword and then provide a function. This function is given the rest of the\ndocument as a parameter. The function can then do anything with this content.\nSince the `amazed` function can be called with a single content argument, we can\njust pass it by name to the show rule. Let's try it:\n\n```example\n>>> #let amazed(term, color: blue) = {\n>>>   text(color, box[✨ #term ✨])\n>>> }\n#show: amazed\nI choose to focus on the good\nin my life and let go of any\nnegative thoughts or beliefs.\nIn fact, I am amazing!\n```\n\nOur whole document will now be passed to the `amazed` function, as if we wrapped\nit around it. Of course, this is not especially useful with this particular\nfunction, but when combined with set rules and named arguments, it can be very\npowerful.\n\n## Embedding set and show rules { #set-and-show-rules }\nTo apply some set and show rules to our template, we can use `set` and `show`\nwithin a content block in our function and then insert the document into\nthat content block.\n\n```example\n#let template(doc) = [\n  #set text(font: \"Inria Serif\")\n  #show \"something cool\": [Typst]\n  #doc\n]\n\n#show: template\nI am learning something cool today.\nIt's going great so far!\n```\n\nJust like we already discovered in the previous chapter, set rules will apply to\neverything within their content block. Since the everything show rule passes our\nwhole document to the `template` function, the text set rule and string show\nrule in our template will apply to the whole document. Let's use this knowledge\nto create a template that reproduces the body style of the paper we wrote in the\nprevious chapter.\n\n```example\n#let conf(title, doc) = {\n  set page(\n    paper: \"us-letter\",\n>>> margin: auto,\n    header: align(\n      right + horizon,\n      title\n    ),\n    columns: 2,\n<<<     ...\n  )\n  set par(justify: true)\n  set text(\n    font: \"Libertinus Serif\",\n    size: 11pt,\n  )\n\n  // Heading show rules.\n<<<   ...\n>>>  show heading.where(\n>>>    level: 1\n>>>  ): it => block(\n>>>    align(center,\n>>>      text(\n>>>        13pt,\n>>>        weight: \"regular\",\n>>>        smallcaps(it.body),\n>>>      )\n>>>    ),\n>>>  )\n>>>  show heading.where(\n>>>    level: 2\n>>>  ): it => box(\n>>>    text(\n>>>      11pt,\n>>>      weight: \"regular\",\n>>>      style: \"italic\",\n>>>      it.body + [.],\n>>>    )\n>>>  )\n\n  doc\n}\n\n#show: doc => conf(\n  [Paper title],\n  doc,\n)\n\n= Introduction\n#lorem(90)\n\n<<< ...\n>>> == Motivation\n>>> #lorem(140)\n>>>\n>>> == Problem Statement\n>>> #lorem(50)\n>>>\n>>> = Related Work\n>>> #lorem(200)\n```\n\nWe copy-pasted most of that code from the previous chapter. The two differences\nare this:\n\n1. We wrapped everything in the function `conf` using an everything show rule.\n   The function applies a few set and show rules and echoes the content it has\n   been passed at the end.\n\n2. Moreover, we used a curly-braced code block instead of a content block. This\n   way, we don't need to prefix all set rules and function calls with a `#`. In\n   exchange, we cannot write markup directly in the code block anymore.\n\nAlso note where the title comes from: We previously had it inside of a variable.\nNow, we are receiving it as the first parameter of the template function. To do\nso, we passed a closure (that's a function without a name that is used right\naway) to the everything show rule. We did that because the `conf` function\nexpects two positional arguments, the title and the body, but the show rule will\nonly pass the body. Therefore, we add a new function definition that allows us\nto set a paper title and use the single parameter from the show rule.\n\n## Templates with named arguments { #named-arguments }\nOur paper in the previous chapter had a title and an author list. Let's add\nthese things to our template. In addition to the title, we want our template to\naccept a list of authors with their affiliations and the paper's abstract. To\nkeep things readable, we'll add those as named arguments. In the end, we want it\nto work like this:\n\n```typ\n#show: doc => conf(\n  title: [Towards Improved Modelling],\n  authors: (\n    (\n      name: \"Theresa Tungsten\",\n      affiliation: \"Artos Institute\",\n      email: \"tung@artos.edu\",\n    ),\n    (\n      name: \"Eugene Deklan\",\n      affiliation: \"Honduras State\",\n      email: \"e.deklan@hstate.hn\",\n    ),\n  ),\n  abstract: lorem(80),\n  doc,\n)\n\n...\n```\n\nLet's build this new template function. First, we add a default value to the\n`title` argument. This way, we can call the template without specifying a title.\nWe also add the named `authors` and `abstract` parameters with empty defaults.\nNext, we copy the code that generates title, abstract and authors from the\nprevious chapter into the template, replacing the fixed details with the\nparameters.\n\nThe new `authors` parameter expects an [array] of [dictionaries]($dictionary)\nwith the keys `name`, `affiliation` and `email`. Because we can have an\narbitrary number of authors, we dynamically determine if we need one, two or\nthree columns for the author list. First, we determine the number of authors\nusing the [`.len()`]($array.len) method on the `authors` array. Then, we set the\nnumber of columns as the minimum of this count and three, so that we never\ncreate more than three columns. If there are more than three authors, a new row\nwill be inserted instead. For this purpose, we have also added a `row-gutter`\nparameter to the `grid` function. Otherwise, the rows would be too close\ntogether. To extract the details about the authors from the dictionary, we use\nthe [field access syntax]($scripting/#fields).\n\nWe still have to provide an argument to the grid for each author: Here is where\nthe array's [`map` method]($array.map) comes in handy. It takes a function as an\nargument that gets called with each item of the array. We pass it a function\nthat formats the details for each author and returns a new array containing\ncontent values. We've now got one array of values that we'd like to use as\nmultiple arguments for the grid. We can do that by using the\n[`spread` operator]($arguments). It takes an array and applies each of its items\nas a separate argument to the function.\n\nThe resulting template function looks like this:\n\n```typ\n#let conf(\n  title: none,\n  authors: (),\n  abstract: [],\n  doc,\n) = {\n  // Set and show rules from before.\n>>> #set page(columns: 2)\n<<<   ...\n\n  set align(center)\n  text(17pt, title)\n\n  let count = authors.len()\n  let ncols = calc.min(count, 3)\n  grid(\n    columns: (1fr,) * ncols,\n    row-gutter: 24pt,\n    ..authors.map(author => [\n      #author.name \\\n      #author.affiliation \\\n      #link(\"mailto:\" + author.email)\n    ]),\n  )\n\n  par(justify: false)[\n    *Abstract* \\\n    #abstract\n  ]\n\n  set align(left)\n  doc\n}\n```\n\n## A separate file { #separate-file }\nMost of the time, a template is specified in a different file and then imported\ninto the document. This way, the main file you write in is kept clutter free and\nyour template is easily reused. Create a new text file in the file panel by\nclicking the plus button and name it `conf.typ`. Move the `conf` function\ndefinition inside of that new file. Now you can access it from your main file by\nadding an import before the show rule. Specify the path of the file between the\n`{import}` keyword and a colon, then name the function that you want to import.\n\nAnother thing that you can do to make applying templates just a bit more elegant\nis to use the [`.with`]($function.with) method on functions to pre-populate all\nthe named arguments. This way, you can avoid spelling out a closure and\nappending the content argument at the bottom of your template list. Templates on\n[Typst Universe]($universe) are designed to work with this style of function\ncall.\n\n```example:single\n>>> #let conf(\n>>>   title: none,\n>>>   authors: (),\n>>>   abstract: [],\n>>>   doc,\n>>> ) = {\n>>>  set text(font: \"Libertinus Serif\", 11pt)\n>>>  set par(justify: true)\n>>>  set page(\n>>>    \"us-letter\",\n>>>    margin: auto,\n>>>    header: align(\n>>>      right + horizon,\n>>>      title\n>>>    ),\n>>>    numbering: \"1\",\n>>>    columns: 2,\n>>>  )\n>>>\n>>>  show heading.where(\n>>>    level: 1\n>>>  ): it => block(\n>>>    align(center,\n>>>      text(\n>>>        13pt,\n>>>        weight: \"regular\",\n>>>        smallcaps(it.body),\n>>>      )\n>>>    ),\n>>>  )\n>>>  show heading.where(\n>>>    level: 2\n>>>  ): it => box(\n>>>    text(\n>>>      11pt,\n>>>      weight: \"regular\",\n>>>      style: \"italic\",\n>>>      it.body + [.],\n>>>    )\n>>>  )\n>>>\n>>>  place(\n>>>    top,\n>>>    float: true,\n>>>    scope: \"parent\",\n>>>    clearance: 2em,\n>>>    {\n>>>      set align(center)\n>>>      text(17pt, title)\n>>>      let count = calc.min(authors.len(), 3)\n>>>      grid(\n>>>        columns: (1fr,) * count,\n>>>        row-gutter: 24pt,\n>>>        ..authors.map(author => [\n>>>          #author.name \\\n>>>          #author.affiliation \\\n>>>          #link(\"mailto:\" + author.email)\n>>>        ]),\n>>>      )\n>>>      par(justify: false)[\n>>>        *Abstract* \\\n>>>        #abstract\n>>>      ]\n>>>    },\n>>>  )\n>>>  doc\n>>>}\n<<< #import \"conf.typ\": conf\n#show: conf.with(\n  title: [\n    Towards Improved Modelling\n  ],\n  authors: (\n    (\n      name: \"Theresa Tungsten\",\n      affiliation: \"Artos Institute\",\n      email: \"tung@artos.edu\",\n    ),\n    (\n      name: \"Eugene Deklan\",\n      affiliation: \"Honduras State\",\n      email: \"e.deklan@hstate.hn\",\n    ),\n  ),\n  abstract: lorem(80),\n)\n\n= Introduction\n#lorem(90)\n\n== Motivation\n#lorem(140)\n\n== Problem Statement\n#lorem(50)\n\n= Related Work\n#lorem(200)\n```\n\nWe have now converted the conference paper into a reusable template for that\nconference! Why not share it in the [Forum](https://forum.typst.app/) or on\n[Typst's Discord server](https://discord.gg/2uDybryKPe) so that others can use\nit too?\n\n## Review\nCongratulations, you have completed Typst's Tutorial! In this section, you have\nlearned how to define your own functions and how to create and apply templates\nthat define reusable document styles. You've made it far and learned a lot. You\ncan now use Typst to write your own documents and share them with others.\n\nWe are still a super young project and are looking for feedback. If you have any\nquestions, suggestions or you found a bug, please let us know\nin the [Forum](https://forum.typst.app/),\non our [Discord server](https://discord.gg/2uDybryKPe),\non [GitHub](https://github.com/typst/typst/),\nor via the web app's feedback form (always available in the Help menu).\n\nSo what are you waiting for? [Sign up](https://typst.app) and write something!"

[tutorial.making-a-template.description]
en = "Typst's tutorial."

[tutorial.making-a-template.title]
en = "Making a Template"

[tutorial.title]
en = "Tutorial"

[tutorial.writing-in-typst.body]
en = "\n# Writing in Typst\nLet's get started! Suppose you got assigned to write a technical report for\nuniversity. It will contain prose, maths, headings, and figures. To get started,\nyou create a new project on the Typst app. You'll be taken to the editor where\nyou see two panels: A source panel where you compose your document and a\npreview panel where you see the rendered document.\n\n![Typst app screenshot](1-writing-app.png)\n\nYou already have a good angle for your report in mind. So let's start by writing\nthe introduction. Enter some text in the editor panel. You'll notice that the\ntext immediately appears on the previewed page.\n\n```example\nIn this report, we will explore the\nvarious factors that influence fluid\ndynamics in glaciers and how they\ncontribute to the formation and\nbehaviour of these natural structures.\n```\n\n_Throughout this tutorial, we'll show code examples like this one. Just like in the app, the first panel contains markup and the second panel shows a preview. We shrunk the page to fit the examples so you can see what's going on._\n\nThe next step is to add a heading and emphasize some text. Typst uses simple\nmarkup for the most common formatting tasks. To add a heading, enter the `=`\ncharacter and to emphasize some text with italics, enclose it in\n`[_underscores_]`.\n\n```example\n= Introduction\nIn this report, we will explore the\nvarious factors that influence _fluid\ndynamics_ in glaciers and how they\ncontribute to the formation and\nbehaviour of these natural structures.\n```\n\nThat was easy! To add a new paragraph, just add a blank line in between two\nlines of text. If that paragraph needs a subheading, produce it by typing `==`\ninstead of `=`. The number of `=` characters determines the nesting level of the\nheading.\n\nNow we want to list a few of the circumstances that influence glacier dynamics.\nTo do that, we use a numbered list. For each item of the list, we type a `+`\ncharacter at the beginning of the line. Typst will automatically number the\nitems.\n\n```example\n+ The climate\n+ The topography\n+ The geology\n```\n\nIf we wanted to add a bulleted list, we would use the `-` character instead of\nthe `+` character. We can also nest lists: For example, we can add a sub-list to\nthe first item of the list above by indenting it.\n\n```example\n+ The climate\n  - Temperature\n  - Precipitation\n+ The topography\n+ The geology\n```\n\n## Adding a figure { #figure }\nYou think that your report would benefit from a figure. Let's add one. Typst\nsupports images in the formats PNG, JPEG, GIF, and SVG. To add an image file to\nyour project, first open the _file panel_ by clicking the box icon in the left\nsidebar. Here, you can see a list of all files in your project. Currently, there\nis only one: The main Typst file you are writing in. To upload another file,\nclick the button with the arrow in the top-right corner. This opens the upload\ndialog, in which you can pick files to upload from your computer. Select an\nimage file for your report.\n\n![Upload dialog](1-writing-upload.png)\n\nWe have seen before that specific symbols (called _markup_) have specific\nmeaning in Typst. We can use `=`, `-`, `+`, and `_` to create headings, lists\nand emphasized text, respectively. However, having a special symbol for\neverything we want to insert into our document would soon become cryptic and\nunwieldy. For this reason, Typst reserves markup symbols only for the most\ncommon things. Everything else is inserted with _functions._ For our image to\nshow up on the page, we use Typst's [`image`] function.\n\n```example\n#image(\"glacier.jpg\")\n```\n\nIn general, a function produces some output for a set of _arguments_. When you\n_call_ a function within markup, you provide the arguments and Typst inserts the\nresult (the function's _return value_) into the document. In our case, the\n`image` function takes one argument: The path to the image file. To call a\nfunction in markup, we first need to type the `#` character, immediately\nfollowed by the name of the function. Then, we enclose the arguments in\nparentheses. Typst recognizes many different data types within argument lists.\nOur file path is a short [string of text]($str), so we need to enclose it in\ndouble quotes.\n\nThe inserted image uses the whole width of the page. To change that, pass the\n`width` argument to the `image` function. This is a _named_ argument and\ntherefore specified as a `name: value` pair. If there are multiple arguments,\nthey are separated by commas, so we first need to put a comma behind the path.\n\n```example\n#image(\"glacier.jpg\", width: 70%)\n```\n\nThe `width` argument is a [relative length]($relative). In our case, we\nspecified a percentage, determining that the image shall take up `{70%}` of the\npage's width. We also could have specified an absolute value like `{1cm}` or\n`{0.7in}`.\n\nJust like text, the image is now aligned at the left side of the page by\ndefault. It's also lacking a caption. Let's fix that by using the [figure]\nfunction. This function takes the figure's contents as a positional argument and\nan optional caption as a named argument.\n\nWithin the argument list of the `figure` function, Typst is already in code\nmode. This means, you now have to remove the hash before the image function call.\nThe hash is only needed directly in markup (to disambiguate text from function\ncalls).\n\nThe caption consists of arbitrary markup. To give markup to a function, we\nenclose it in square brackets. This construct is called a _content block._\n\n```example\n#figure(\n  image(\"glacier.jpg\", width: 70%),\n  caption: [\n    _Glaciers_ form an important part\n    of the earth's climate system.\n  ],\n)\n```\n\nYou continue to write your report and now want to reference the figure. To do\nthat, first attach a label to figure. A label uniquely identifies an element in\nyour document. Add one after the figure by enclosing some name in angle\nbrackets. You can then reference the figure in your text by writing an `[@]`\nsymbol followed by that name. Headings and equations can also be labelled to\nmake them referenceable.\n\n```example\nGlaciers as the one shown in\n@glaciers will cease to exist if\nwe don't take action soon!\n\n#figure(\n  image(\"glacier.jpg\", width: 70%),\n  caption: [\n    _Glaciers_ form an important part\n    of the earth's climate system.\n  ],\n) <glaciers>\n```\n\n<div class=\"info-box\">\n\nSo far, we've passed content blocks (markup in square brackets) and strings\n(text in double quotes) to our functions. Both seem to contain text. What's the\ndifference?\n\nA content block can contain text, but also any other kind of markup, function\ncalls, and more, whereas a string is really just a _sequence of characters_ and\nnothing else.\n\nFor example, the image function expects a path to an image file.\nIt would not make sense to pass, e.g., a paragraph of text or another image as\nthe image's path parameter. That's why only strings are allowed here.\nOn the contrary, strings work wherever content is expected because text is a\nvalid kind of content.\n</div>\n\n## Adding a bibliography { #bibliography }\nAs you write up your report, you need to back up some of your claims. You can\nadd a bibliography to your document with the [`bibliography`] function. This\nfunction expects a path to a bibliography file.\n\nTypst's native bibliography format is\n[Hayagriva](https://github.com/typst/hayagriva/blob/main/docs/file-format.md),\nbut for compatibility you can also use BibLaTeX files. As your classmate has\nalready done a literature survey and sent you a `.bib` file, you'll use that\none. Upload the file through the file panel to access it in Typst.\n\nOnce the document contains a bibliography, you can start citing from it.\nCitations use the same syntax as references to a label. As soon as you cite a\nsource for the first time, it will appear in the bibliography section of your\ndocument. Typst supports different citation and bibliography styles. Consult the\n[reference]($bibliography.style) for more details.\n\n```example\n= Methods\nWe follow the glacier melting models\nestablished in @glacier-melt.\n\n#bibliography(\"works.bib\")\n```\n\n## Maths\nAfter fleshing out the methods section, you move on to the meat of the document:\nYour equations. Typst has built-in mathematical typesetting and uses its own\nmath notation. Let's start with a simple equation. We wrap it in `[$]` signs\nto let Typst know it should expect a mathematical expression:\n\n```example\nThe equation $Q = rho A v + C$\ndefines the glacial flow rate.\n```\n\nThe equation is typeset inline, on the same line as the surrounding text. If you\nwant to have it on its own line instead, you should insert a single space at its\nstart and end:\n\n```example\nThe flow rate of a glacier is\ndefined by the following equation:\n\n$ Q = rho A v + C $\n```\n\nWe can see that Typst displayed the single letters `Q`, `A`, `v`, and `C` as-is,\nwhile it translated `rho` into a Greek letter. Math mode will always show single\nletters verbatim. Multiple letters, however, are interpreted as symbols,\nvariables, or function names. To imply a multiplication between single letters,\nput spaces between them.\n\nIf you want to have a variable that consists of multiple letters, you can\nenclose it in quotes:\n\n```example\nThe flow rate of a glacier is given\nby the following equation:\n\n$ Q = rho A v + \"time offset\" $\n```\n\nYou'll also need a sum formula in your paper. We can use the `sum` symbol and\nthen specify the range of the summation in sub- and superscripts:\n\n```example\nTotal displaced soil by glacial flow:\n\n$ 7.32 beta +\n  sum_(i=0)^nabla Q_i / 2 $\n```\n\nTo add a subscript to a symbol or variable, type a `_` character and then the\nsubscript. Similarly, use the `^` character for a superscript. If your\nsub- or superscript consists of multiple things, you must enclose them\nin round parentheses.\n\nThe above example also showed us how to insert fractions: Simply put a `/`\ncharacter between the numerator and the denominator and Typst will automatically\nturn it into a fraction. Parentheses are smartly resolved, so you can enter your\nexpression as you would into a calculator and Typst will replace parenthesized\nsub-expressions with the appropriate notation.\n\n```example\nTotal displaced soil by glacial flow:\n\n$ 7.32 beta +\n  sum_(i=0)^nabla\n    (Q_i (a_i - epsilon)) / 2 $\n```\n\nNot all math constructs have special syntax. Instead, we use functions, just\nlike the `image` function we have seen before. For example, to insert a column\nvector, we can use the [`vec`]($math.vec) function. Within math mode, function\ncalls don't need to start with the `#` character.\n\n```example\n$ v := vec(x_1, x_2, x_3) $\n```\n\nSome functions are only available within math mode. For example, the\n[`cal`]($math.cal) function is used to typeset calligraphic letters commonly\nused for sets. The [math section of the reference]($category/math) provides a\ncomplete list of all functions that math mode makes available.\n\nOne more thing: Many symbols, such as the arrow, have a lot of variants. You can\nselect among these variants by appending a dot and a modifier name to a symbol's\nname:\n\n```example\n$ a arrow.squiggly b $\n```\n\nThis notation is also available in markup mode, but the symbol name must be\npreceded with `#sym.` there. See the [symbols section]($category/symbols/sym)\nfor a list of all available symbols.\n\n## Review\nYou have now seen how to write a basic document in Typst. You learned how to\nemphasize text, write lists, insert images, align content, and typeset\nmathematical expressions. You also learned about Typst's functions. There are\nmany more kinds of content that Typst lets you insert into your document, such\nas [tables]($table), [shapes]($category/visualize), and [code blocks]($raw). You\ncan peruse the [reference] to learn more about these and other features.\n\nFor the moment, you have completed writing your report. You have already saved a\nPDF by clicking on the download button in the top right corner. However, you\nthink the report could look a bit less plain. In the next section, we'll learn\nhow to customize the look of our document."

[tutorial.writing-in-typst.description]
en = "Typst's tutorial."

[tutorial.writing-in-typst.title]
en = "Writing in Typst"
