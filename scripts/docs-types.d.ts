//! Generated by Json2Ts Schema Converter.

export type Root = Root2[];

export interface Root2 {
  route: string;
  title: string;
  description: string;
  part: any;
  outline: Outline[];
  body: Body;
  children: Children[];
}

export interface Outline {
  id: string;
  name: string;
  children: any[];
}

export interface Body {
  Html: Html;
}

export interface Html {
  kind: string;
  content: string;
}

export interface Children {
  route: string;
  title: string;
  description: string;
  part?: string;
  outline: Outline2[];
  body: Body2;
  children: Children3[];
}

export interface Outline2 {
  id: string;
  name: string;
  children: Children2[];
}

export interface Children2 {
  id: string;
  name: string;
  children: any[];
}

export interface Body2 {
  Html?: Html2;
  Category?: Category;
}

export interface Html2 {
  kind: string;
  content: string;
}

export interface Category {
  name: string;
  title: string;
  details: Details;
  items: Item[];
  shorthands?: Shorthands;
}

export interface Details {
  kind: string;
  content: string;
}

export interface Item {
  name: string;
  route: string;
  oneliner: string;
  code: boolean;
}

export interface Shorthands {
  markup: Markup[];
  math: Math[];
}

export interface Markup {
  name: string;
  codepoint: number;
  accent: boolean;
  alternates: string[];
  markupShorthand: string;
  mathShorthand?: string;
  mathClass?: string;
  deprecation: any;
}

export interface Math {
  name: string;
  codepoint: number;
  accent: boolean;
  alternates: string[];
  markupShorthand?: string;
  mathShorthand: string;
  mathClass: string;
  deprecation: any;
}

export interface Children3 {
  route: string;
  title: string;
  description: string;
  part: any;
  outline: Outline3[];
  body: Body3;
  children: any[];
}

export interface Outline3 {
  id: string;
  name: string;
  children: Children4[];
}

export interface Children4 {
  id: string;
  name: string;
  children: Children5[];
}

export interface Children5 {
  id: string;
  name: string;
  children: Children6[];
}

export interface Children6 {
  id: string;
  name: string;
  children: Children7[];
}

export interface Children7 {
  id: string;
  name: string;
  children: any[];
}

export interface Body3 {
  Type?: Type;
  Func?: Func;
  Group?: Group;
  Symbols?: Symbols;
}

export interface Type {
  name: string;
  title: string;
  keywords: string[];
  oneliner: string;
  details: Details2;
  constructor?: Constructor;
  scope: Scope[];
}

export interface Details2 {
  kind: string;
  content: string;
}

export interface Constructor {
  path: any[];
  name: string;
  title: string;
  keywords: any[];
  oneliner: string;
  element: boolean;
  contextual: boolean;
  deprecation: any;
  details: Details3;
  example?: Example;
  self: boolean;
  params: Param[];
  returns: string[];
  scope: any[];
}

export interface Details3 {
  kind: string;
  content: string;
}

export interface Example {
  kind: string;
  content: string;
}

export interface Param {
  name: string;
  details: Details4;
  example?: Example2;
  types: string[];
  strings: String[];
  default?: Default;
  positional: boolean;
  named: boolean;
  required: boolean;
  variadic: boolean;
  settable: boolean;
}

export interface Details4 {
  kind: string;
  content: string;
}

export interface Example2 {
  kind: string;
  content: string;
}

export interface String {
  string: string;
  details: Details5;
}

export interface Details5 {
  kind: string;
  content: string;
}

export interface Default {
  kind: string;
  content: string;
}

export interface Scope {
  path: string[];
  name: string;
  title: string;
  keywords: any[];
  oneliner: string;
  element: boolean;
  contextual: boolean;
  deprecation: any;
  details: Details6;
  example?: Example3;
  self: boolean;
  params: Param2[];
  returns: string[];
  scope: Scope[];
}

export interface Details6 {
  kind: string;
  content: string;
}

export interface Example3 {
  kind: string;
  content: string;
}

export interface Param2 {
  name: string;
  details: Details7;
  example?: Example4;
  types: string[];
  strings: String2[];
  default?: Default2;
  positional: boolean;
  named: boolean;
  required: boolean;
  variadic: boolean;
  settable: boolean;
}

export interface Details7 {
  kind: string;
  content: string;
}

export interface Example4 {
  kind: string;
  content: string;
}

export interface String2 {
  string: string;
  details: Details8;
}

export interface Details8 {
  kind: string;
  content: string;
}

export interface Default2 {
  kind: string;
  content: string;
}

export interface Func {
  path: string[];
  name: string;
  title: string;
  keywords: string[];
  oneliner: string;
  element: boolean;
  contextual: boolean;
  deprecation?: string;
  details: Details9;
  example: any;
  self: boolean;
  params: Param3[];
  returns: string[];
  scope: Scope2[];
}

export interface Details9 {
  kind: string;
  content: string;
}

export interface Param3 {
  name: string;
  details: Details10;
  example?: Example5;
  types: string[];
  strings: String3[];
  default?: Default3;
  positional: boolean;
  named: boolean;
  required: boolean;
  variadic: boolean;
  settable: boolean;
}

export interface Details10 {
  kind: string;
  content: string;
}

export interface Example5 {
  kind: string;
  content: string;
}

export interface String3 {
  string: string;
  details: Details11;
}

export interface Details11 {
  kind: string;
  content: string;
}

export interface Default3 {
  kind: string;
  content: string;
}

export interface Scope2 {
  path: string[];
  name: string;
  title: string;
  keywords: string[];
  oneliner: string;
  element: boolean;
  contextual: boolean;
  deprecation?: string;
  details: Details12;
  example?: Example6;
  self: boolean;
  params: Param4[];
  returns: string[];
  scope: Scope3[];
}

export interface Details12 {
  kind: string;
  content: string;
}

export interface Example6 {
  kind: string;
  content: string;
}

export interface Param4 {
  name: string;
  details: Details13;
  example?: Example7;
  types: string[];
  strings: String4[];
  default?: Default4;
  positional: boolean;
  named: boolean;
  required: boolean;
  variadic: boolean;
  settable: boolean;
}

export interface Details13 {
  kind: string;
  content: string;
}

export interface Example7 {
  kind: string;
  content: string;
}

export interface String4 {
  string: string;
  details: Details14;
}

export interface Details14 {
  kind: string;
  content: string;
}

export interface Default4 {
  kind: string;
  content: string;
}

export interface Scope3 {
  path: string[];
  name: string;
  title: string;
  keywords: any[];
  oneliner: string;
  element: boolean;
  contextual: boolean;
  deprecation: any;
  details: Details15;
  example: any;
  self: boolean;
  params: Param5[];
  returns: string[];
  scope: any[];
}

export interface Details15 {
  kind: string;
  content: string;
}

export interface Param5 {
  name: string;
  details: Details16;
  example: any;
  types: string[];
  strings: any[];
  default?: Default5;
  positional: boolean;
  named: boolean;
  required: boolean;
  variadic: boolean;
  settable: boolean;
}

export interface Details16 {
  kind: string;
  content: string;
}

export interface Default5 {
  kind: string;
  content: string;
}

export interface Group {
  name: string;
  title: string;
  details: Details17;
  functions: Function[];
}

export interface Details17 {
  kind: string;
  content: string;
}

export interface Function {
  path: string[];
  name: string;
  title: string;
  keywords: string[];
  oneliner: string;
  element: boolean;
  contextual: boolean;
  deprecation: any;
  details: Details18;
  example?: Example8;
  self: boolean;
  params: Param6[];
  returns: string[];
  scope: any[];
}

export interface Details18 {
  kind: string;
  content: string;
}

export interface Example8 {
  kind: string;
  content: string;
}

export interface Param6 {
  name: string;
  details: Details19;
  example: any;
  types: string[];
  strings: any[];
  default?: Default6;
  positional: boolean;
  named: boolean;
  required: boolean;
  variadic: boolean;
  settable: boolean;
}

export interface Details19 {
  kind: string;
  content: string;
}

export interface Default6 {
  kind: string;
  content: string;
}

export interface Symbols {
  name: string;
  title: string;
  details: Details20;
  list: List[];
}

export interface Details20 {
  kind: string;
  content: string;
}

export interface List {
  name: string;
  codepoint: number;
  accent: boolean;
  alternates: string[];
  markupShorthand?: string;
  mathShorthand?: string;
  mathClass?: string;
  deprecation?: string;
}

export type FunctionType = Constructor | Func;
